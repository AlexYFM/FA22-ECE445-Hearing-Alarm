
dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cdc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009e78  08009e78  00019e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f08  08009f08  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f10  08009f10  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f10  08009f10  00019f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f14  08009f14  00019f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001488  20000160  0800a078  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e8  0800a078  000215e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d83  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310e  00000000  00000000  00030f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00034d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c04  00000000  00000000  00035940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001239a  00000000  00000000  0004e544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088bda  00000000  00000000  000608de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e94b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a80  00000000  00000000  000e9508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009e5c 	.word	0x08009e5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	08009e5c 	.word	0x08009e5c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_uldivmod>:
 8000ac0:	b953      	cbnz	r3, 8000ad8 <__aeabi_uldivmod+0x18>
 8000ac2:	b94a      	cbnz	r2, 8000ad8 <__aeabi_uldivmod+0x18>
 8000ac4:	2900      	cmp	r1, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	2800      	cmpeq	r0, #0
 8000aca:	bf1c      	itt	ne
 8000acc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad4:	f000 b974 	b.w	8000dc0 <__aeabi_idiv0>
 8000ad8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000adc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae0:	f000 f806 	bl	8000af0 <__udivmoddi4>
 8000ae4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aec:	b004      	add	sp, #16
 8000aee:	4770      	bx	lr

08000af0 <__udivmoddi4>:
 8000af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af4:	9d08      	ldr	r5, [sp, #32]
 8000af6:	4604      	mov	r4, r0
 8000af8:	468e      	mov	lr, r1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d14d      	bne.n	8000b9a <__udivmoddi4+0xaa>
 8000afe:	428a      	cmp	r2, r1
 8000b00:	4694      	mov	ip, r2
 8000b02:	d969      	bls.n	8000bd8 <__udivmoddi4+0xe8>
 8000b04:	fab2 f282 	clz	r2, r2
 8000b08:	b152      	cbz	r2, 8000b20 <__udivmoddi4+0x30>
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	f1c2 0120 	rsb	r1, r2, #32
 8000b12:	fa20 f101 	lsr.w	r1, r0, r1
 8000b16:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1e:	4094      	lsls	r4, r2
 8000b20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b24:	0c21      	lsrs	r1, r4, #16
 8000b26:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2a:	fa1f f78c 	uxth.w	r7, ip
 8000b2e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b36:	fb06 f107 	mul.w	r1, r6, r7
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	d90a      	bls.n	8000b54 <__udivmoddi4+0x64>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b46:	f080 811f 	bcs.w	8000d88 <__udivmoddi4+0x298>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 811c 	bls.w	8000d88 <__udivmoddi4+0x298>
 8000b50:	3e02      	subs	r6, #2
 8000b52:	4463      	add	r3, ip
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 f707 	mul.w	r7, r0, r7
 8000b68:	42a7      	cmp	r7, r4
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x92>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b74:	f080 810a 	bcs.w	8000d8c <__udivmoddi4+0x29c>
 8000b78:	42a7      	cmp	r7, r4
 8000b7a:	f240 8107 	bls.w	8000d8c <__udivmoddi4+0x29c>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b86:	1be4      	subs	r4, r4, r7
 8000b88:	2600      	movs	r6, #0
 8000b8a:	b11d      	cbz	r5, 8000b94 <__udivmoddi4+0xa4>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c5 4300 	strd	r4, r3, [r5]
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0xc2>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	f000 80ef 	beq.w	8000d82 <__udivmoddi4+0x292>
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	e9c5 0100 	strd	r0, r1, [r5]
 8000baa:	4630      	mov	r0, r6
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f683 	clz	r6, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d14a      	bne.n	8000c50 <__udivmoddi4+0x160>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xd4>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80f9 	bhi.w	8000db6 <__udivmoddi4+0x2c6>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	469e      	mov	lr, r3
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d0e0      	beq.n	8000b94 <__udivmoddi4+0xa4>
 8000bd2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd6:	e7dd      	b.n	8000b94 <__udivmoddi4+0xa4>
 8000bd8:	b902      	cbnz	r2, 8000bdc <__udivmoddi4+0xec>
 8000bda:	deff      	udf	#255	; 0xff
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f040 8092 	bne.w	8000d0a <__udivmoddi4+0x21a>
 8000be6:	eba1 010c 	sub.w	r1, r1, ip
 8000bea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bee:	fa1f fe8c 	uxth.w	lr, ip
 8000bf2:	2601      	movs	r6, #1
 8000bf4:	0c20      	lsrs	r0, r4, #16
 8000bf6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfa:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c02:	fb0e f003 	mul.w	r0, lr, r3
 8000c06:	4288      	cmp	r0, r1
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x12c>
 8000c0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x12a>
 8000c14:	4288      	cmp	r0, r1
 8000c16:	f200 80cb 	bhi.w	8000db0 <__udivmoddi4+0x2c0>
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	1a09      	subs	r1, r1, r0
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c24:	fb07 1110 	mls	r1, r7, r0, r1
 8000c28:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x156>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3c:	d202      	bcs.n	8000c44 <__udivmoddi4+0x154>
 8000c3e:	45a6      	cmp	lr, r4
 8000c40:	f200 80bb 	bhi.w	8000dba <__udivmoddi4+0x2ca>
 8000c44:	4608      	mov	r0, r1
 8000c46:	eba4 040e 	sub.w	r4, r4, lr
 8000c4a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4e:	e79c      	b.n	8000b8a <__udivmoddi4+0x9a>
 8000c50:	f1c6 0720 	rsb	r7, r6, #32
 8000c54:	40b3      	lsls	r3, r6
 8000c56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c62:	fa01 f306 	lsl.w	r3, r1, r6
 8000c66:	431c      	orrs	r4, r3
 8000c68:	40f9      	lsrs	r1, r7
 8000c6a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6e:	fa00 f306 	lsl.w	r3, r0, r6
 8000c72:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c76:	0c20      	lsrs	r0, r4, #16
 8000c78:	fa1f fe8c 	uxth.w	lr, ip
 8000c7c:	fb09 1118 	mls	r1, r9, r8, r1
 8000c80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c84:	fb08 f00e 	mul.w	r0, r8, lr
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8e:	d90b      	bls.n	8000ca8 <__udivmoddi4+0x1b8>
 8000c90:	eb1c 0101 	adds.w	r1, ip, r1
 8000c94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c98:	f080 8088 	bcs.w	8000dac <__udivmoddi4+0x2bc>
 8000c9c:	4288      	cmp	r0, r1
 8000c9e:	f240 8085 	bls.w	8000dac <__udivmoddi4+0x2bc>
 8000ca2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	1a09      	subs	r1, r1, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb0:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cbc:	458e      	cmp	lr, r1
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x1e2>
 8000cc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc8:	d26c      	bcs.n	8000da4 <__udivmoddi4+0x2b4>
 8000cca:	458e      	cmp	lr, r1
 8000ccc:	d96a      	bls.n	8000da4 <__udivmoddi4+0x2b4>
 8000cce:	3802      	subs	r0, #2
 8000cd0:	4461      	add	r1, ip
 8000cd2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd6:	fba0 9402 	umull	r9, r4, r0, r2
 8000cda:	eba1 010e 	sub.w	r1, r1, lr
 8000cde:	42a1      	cmp	r1, r4
 8000ce0:	46c8      	mov	r8, r9
 8000ce2:	46a6      	mov	lr, r4
 8000ce4:	d356      	bcc.n	8000d94 <__udivmoddi4+0x2a4>
 8000ce6:	d053      	beq.n	8000d90 <__udivmoddi4+0x2a0>
 8000ce8:	b15d      	cbz	r5, 8000d02 <__udivmoddi4+0x212>
 8000cea:	ebb3 0208 	subs.w	r2, r3, r8
 8000cee:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf2:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf6:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfa:	40f1      	lsrs	r1, r6
 8000cfc:	431f      	orrs	r7, r3
 8000cfe:	e9c5 7100 	strd	r7, r1, [r5]
 8000d02:	2600      	movs	r6, #0
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	f1c2 0320 	rsb	r3, r2, #32
 8000d0e:	40d8      	lsrs	r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	fa21 f303 	lsr.w	r3, r1, r3
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	4301      	orrs	r1, r0
 8000d1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d20:	fa1f fe8c 	uxth.w	lr, ip
 8000d24:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d28:	fb07 3610 	mls	r6, r7, r0, r3
 8000d2c:	0c0b      	lsrs	r3, r1, #16
 8000d2e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d32:	fb00 f60e 	mul.w	r6, r0, lr
 8000d36:	429e      	cmp	r6, r3
 8000d38:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x260>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d46:	d22f      	bcs.n	8000da8 <__udivmoddi4+0x2b8>
 8000d48:	429e      	cmp	r6, r3
 8000d4a:	d92d      	bls.n	8000da8 <__udivmoddi4+0x2b8>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	b289      	uxth	r1, r1
 8000d54:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d58:	fb07 3316 	mls	r3, r7, r6, r3
 8000d5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d60:	fb06 f30e 	mul.w	r3, r6, lr
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x28a>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d70:	d216      	bcs.n	8000da0 <__udivmoddi4+0x2b0>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d914      	bls.n	8000da0 <__udivmoddi4+0x2b0>
 8000d76:	3e02      	subs	r6, #2
 8000d78:	4461      	add	r1, ip
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d80:	e738      	b.n	8000bf4 <__udivmoddi4+0x104>
 8000d82:	462e      	mov	r6, r5
 8000d84:	4628      	mov	r0, r5
 8000d86:	e705      	b.n	8000b94 <__udivmoddi4+0xa4>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	e6e3      	b.n	8000b54 <__udivmoddi4+0x64>
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	e6f8      	b.n	8000b82 <__udivmoddi4+0x92>
 8000d90:	454b      	cmp	r3, r9
 8000d92:	d2a9      	bcs.n	8000ce8 <__udivmoddi4+0x1f8>
 8000d94:	ebb9 0802 	subs.w	r8, r9, r2
 8000d98:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	e7a3      	b.n	8000ce8 <__udivmoddi4+0x1f8>
 8000da0:	4646      	mov	r6, r8
 8000da2:	e7ea      	b.n	8000d7a <__udivmoddi4+0x28a>
 8000da4:	4620      	mov	r0, r4
 8000da6:	e794      	b.n	8000cd2 <__udivmoddi4+0x1e2>
 8000da8:	4640      	mov	r0, r8
 8000daa:	e7d1      	b.n	8000d50 <__udivmoddi4+0x260>
 8000dac:	46d0      	mov	r8, sl
 8000dae:	e77b      	b.n	8000ca8 <__udivmoddi4+0x1b8>
 8000db0:	3b02      	subs	r3, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	e732      	b.n	8000c1c <__udivmoddi4+0x12c>
 8000db6:	4630      	mov	r0, r6
 8000db8:	e709      	b.n	8000bce <__udivmoddi4+0xde>
 8000dba:	4464      	add	r4, ip
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	e742      	b.n	8000c46 <__udivmoddi4+0x156>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 fcaf 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 fa13 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f000 faad 	bl	8001334 <MX_GPIO_Init>
  MX_I2S2_Init();
 8000dda:	f000 fa7d 	bl	80012d8 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 8000dde:	f007 f9b9 	bl	8008154 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint16_t data_in[2];
  uint16_t n = 1024; //number of samples, keep at power of 2 for FFT
 8000de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000dea:	f102 020a 	add.w	r2, r2, #10
 8000dee:	8013      	strh	r3, [r2, #0]
  int32_t current;
  uint16_t count = n;
 8000df0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000df4:	f103 030a 	add.w	r3, r3, #10
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000dfe:	f102 020e 	add.w	r2, r2, #14
 8000e02:	8013      	strh	r3, [r2, #0]
  int32_t avg = 0; //running average of the sampled data
 8000e04:	2300      	movs	r3, #0
 8000e06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000e0a:	f102 0204 	add.w	r2, r2, #4
 8000e0e:	6013      	str	r3, [r2, #0]
//  int32_t min_avg = -1; //keeps track of the lowest average so far -- DC offset
  char s[13]; //store string output
  float davg=0;
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000e18:	f102 0208 	add.w	r2, r2, #8
 8000e1c:	6013      	str	r3, [r2, #0]
  double dd = 0; //keep track of daily dose
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8000e2a:	e9c1 2300 	strd	r2, r3, [r1]
  int reached = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000e34:	f102 021c 	add.w	r2, r2, #28
 8000e38:	6013      	str	r3, [r2, #0]
  int32_t max = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000e40:	f102 0218 	add.w	r2, r2, #24
 8000e44:	6013      	str	r3, [r2, #0]
  int32_t min = 100000;
 8000e46:	4bc2      	ldr	r3, [pc, #776]	; (8001150 <main+0x38c>)
 8000e48:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000e4c:	f102 0214 	add.w	r2, r2, #20
 8000e50:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 8000e52:	2102      	movs	r1, #2
 8000e54:	48bf      	ldr	r0, [pc, #764]	; (8001154 <main+0x390>)
 8000e56:	f000 ffb0 	bl	8001dba <HAL_GPIO_TogglePin>
	  while(count){
 8000e5a:	e053      	b.n	8000f04 <main+0x140>
		  volatile HAL_StatusTypeDef result = HAL_I2S_Receive(&hi2s2, data_in, 2, 100);
 8000e5c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000e60:	f101 0118 	add.w	r1, r1, #24
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	2202      	movs	r2, #2
 8000e68:	48bb      	ldr	r0, [pc, #748]	; (8001158 <main+0x394>)
 8000e6a:	f001 f901 	bl	8002070 <HAL_I2S_Receive>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e76:	f803 2c49 	strb.w	r2, [r3, #-73]
		  if (result == HAL_OK) {
 8000e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e7e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d13d      	bne.n	8000f04 <main+0x140>
			  if(data_in[1]==0||data_in[0]>=16384) continue;
 8000e88:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000e8c:	f103 031a 	add.w	r3, r3, #26
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d036      	beq.n	8000f04 <main+0x140>
 8000e96:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000e9a:	f103 0318 	add.w	r3, r3, #24
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ea4:	d300      	bcc.n	8000ea8 <main+0xe4>
 8000ea6:	e02d      	b.n	8000f04 <main+0x140>
			  current = data_in[0]+(data_in[1]>>7);
 8000ea8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000eac:	f103 0318 	add.w	r3, r3, #24
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000eb8:	f103 031a 	add.w	r3, r3, #26
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	09db      	lsrs	r3, r3, #7
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000ec8:	f102 021c 	add.w	r2, r2, #28
 8000ecc:	6013      	str	r3, [r2, #0]
			  samples[--count] = current;
 8000ece:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000ed2:	f103 030e 	add.w	r3, r3, #14
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000ede:	f102 020e 	add.w	r2, r2, #14
 8000ee2:	8013      	strh	r3, [r2, #0]
 8000ee4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000ee8:	f103 030e 	add.w	r3, r3, #14
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000efa:	f102 021c 	add.w	r2, r2, #28
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	f843 2c48 	str.w	r2, [r3, #-72]
	  while(count){
 8000f04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000f08:	f103 030e 	add.w	r3, r3, #14
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1a4      	bne.n	8000e5c <main+0x98>
		  }
	  }
	  for (int i=0; i<n; i++){
 8000f12:	2300      	movs	r3, #0
 8000f14:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f18:	f102 0210 	add.w	r2, r2, #16
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e02f      	b.n	8000f80 <main+0x1bc>
		  davg += samples[i]/n; //average
 8000f20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f24:	461a      	mov	r2, r3
 8000f26:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f2a:	f103 0310 	add.w	r3, r3, #16
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000f38:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f3c:	f103 030a 	add.w	r3, r3, #10
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000f52:	f103 0308 	add.w	r3, r3, #8
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000f62:	f103 0308 	add.w	r3, r3, #8
 8000f66:	edc3 7a00 	vstr	s15, [r3]
	  for (int i=0; i<n; i++){
 8000f6a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f6e:	f103 0310 	add.w	r3, r3, #16
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f7a:	f102 0210 	add.w	r2, r2, #16
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f84:	f103 030a 	add.w	r3, r3, #10
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f8e:	f102 0210 	add.w	r2, r2, #16
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbc3      	blt.n	8000f20 <main+0x15c>
	  }
	  avg = (int32_t) davg;
 8000f98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000f9c:	f103 0308 	add.w	r3, r3, #8
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa8:	ee17 3a90 	vmov	r3, s15
 8000fac:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000fb0:	f102 0204 	add.w	r2, r2, #4
 8000fb4:	6013      	str	r3, [r2, #0]
	  for (int i=0; i<n; i++){
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000fbc:	f102 020c 	add.w	r2, r2, #12
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e070      	b.n	80010a6 <main+0x2e2>
		  samples[i] -= avg;
 8000fc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fce:	f103 030c 	add.w	r3, r3, #12
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000fdc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fe0:	f103 0304 	add.w	r3, r3, #4
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	1ad2      	subs	r2, r2, r3
 8000fe8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fec:	4619      	mov	r1, r3
 8000fee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000ff2:	f103 030c 	add.w	r3, r3, #12
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f843 2c48 	str.w	r2, [r3, #-72]
		  if(min>samples[i]) min = samples[i];
 8001000:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001004:	461a      	mov	r2, r3
 8001006:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800100a:	f103 030c 	add.w	r3, r3, #12
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001018:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800101c:	f102 0214 	add.w	r2, r2, #20
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	dd10      	ble.n	8001048 <main+0x284>
 8001026:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800102a:	461a      	mov	r2, r3
 800102c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001030:	f103 030c 	add.w	r3, r3, #12
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800103e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001042:	f102 0214 	add.w	r2, r2, #20
 8001046:	6013      	str	r3, [r2, #0]
		  if(max<samples[i]) max = samples[i];
 8001048:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800104c:	461a      	mov	r2, r3
 800104e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001052:	f103 030c 	add.w	r3, r3, #12
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001060:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001064:	f102 0218 	add.w	r2, r2, #24
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	da10      	bge.n	8001090 <main+0x2cc>
 800106e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001072:	461a      	mov	r2, r3
 8001074:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001078:	f103 030c 	add.w	r3, r3, #12
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001086:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800108a:	f102 0218 	add.w	r2, r2, #24
 800108e:	6013      	str	r3, [r2, #0]
	  for (int i=0; i<n; i++){
 8001090:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001094:	f103 030c 	add.w	r3, r3, #12
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80010a0:	f102 020c 	add.w	r2, r2, #12
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010aa:	f103 030a 	add.w	r3, r3, #10
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80010b4:	f102 020c 	add.w	r2, r2, #12
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	db82      	blt.n	8000fc4 <main+0x200>
	  }
	  count = n;
 80010be:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010c2:	f103 030a 	add.w	r3, r3, #10
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80010cc:	f102 020e 	add.w	r2, r2, #14
 80010d0:	8013      	strh	r3, [r2, #0]
	  peak = max-min;
 80010d2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010d6:	f103 0318 	add.w	r3, r3, #24
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010e0:	f103 0314 	add.w	r3, r3, #20
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80010ec:	6013      	str	r3, [r2, #0]
	  max = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80010f4:	f102 0218 	add.w	r2, r2, #24
 80010f8:	6013      	str	r3, [r2, #0]
	  min = 100000;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <main+0x38c>)
 80010fc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001100:	f102 0214 	add.w	r2, r2, #20
 8001104:	6013      	str	r3, [r2, #0]
	  getStr(peak, s); //2072.43028737 -- 90 dB right shifted by 7
 8001106:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800110a:	f103 0308 	add.w	r3, r3, #8
 800110e:	4619      	mov	r1, r3
 8001110:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	f000 f95d 	bl	80013d4 <getStr>
	  davg = 0;
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001122:	f102 0208 	add.w	r2, r2, #8
 8001126:	6013      	str	r3, [r2, #0]
	  data = s;
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <main+0x398>)
 800112a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800112e:	f103 0308 	add.w	r3, r3, #8
 8001132:	6013      	str	r3, [r2, #0]
	  if(peak>2072) HAL_GPIO_WritePin(GPIOA, LEDINST_Pin, GPIO_PIN_SET); //If over given value, means >90 dB, set warning
 8001134:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f640 0218 	movw	r2, #2072	; 0x818
 800113e:	4293      	cmp	r3, r2
 8001140:	dd0e      	ble.n	8001160 <main+0x39c>
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <main+0x390>)
 8001148:	f000 fe1e 	bl	8001d88 <HAL_GPIO_WritePin>
 800114c:	e00d      	b.n	800116a <main+0x3a6>
 800114e:	bf00      	nop
 8001150:	000186a0 	.word	0x000186a0
 8001154:	40020000 	.word	0x40020000
 8001158:	2000017c 	.word	0x2000017c
 800115c:	20000204 	.word	0x20000204
	  else HAL_GPIO_WritePin(GPIOA, LEDINST_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2108      	movs	r1, #8
 8001164:	4822      	ldr	r0, [pc, #136]	; (80011f0 <main+0x42c>)
 8001166:	f000 fe0f 	bl	8001d88 <HAL_GPIO_WritePin>
	  dd += dailyDose(peak);
 800116a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	f000 f966 	bl	8001440 <dailyDose>
 8001174:	ec53 2b10 	vmov	r2, r3, d0
 8001178:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 800117c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001180:	f7ff f838 	bl	80001f4 <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 800118c:	e9c1 2300 	strd	r2, r3, [r1]
	  if(dd>=1&&reached==0){
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <main+0x430>)
 8001196:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 800119a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800119e:	f7ff fc65 	bl	8000a6c <__aeabi_dcmpge>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d010      	beq.n	80011ca <main+0x406>
 80011a8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80011ac:	f103 031c 	add.w	r3, r3, #28
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <main+0x406>
		  HAL_GPIO_TogglePin(GPIOA, LEDINT_Pin); //If we've reached daily dose
 80011b6:	2120      	movs	r1, #32
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <main+0x42c>)
 80011ba:	f000 fdfe 	bl	8001dba <HAL_GPIO_TogglePin>
		  reached = 1; //Making sure we don't keep toggling pin
 80011be:	2301      	movs	r3, #1
 80011c0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80011c4:	f102 021c 	add.w	r2, r2, #28
 80011c8:	6013      	str	r3, [r2, #0]
	  }
	  CDC_Transmit_FS(data, strlen(data));
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <main+0x434>)
 80011cc:	681c      	ldr	r4, [r3, #0]
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <main+0x434>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f800 	bl	80001d8 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4619      	mov	r1, r3
 80011de:	4620      	mov	r0, r4
 80011e0:	f007 f88c 	bl	80082fc <CDC_Transmit_FS>
	  HAL_Delay(500);
 80011e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e8:	f000 fb14 	bl	8001814 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 80011ec:	e631      	b.n	8000e52 <main+0x8e>
 80011ee:	bf00      	nop
 80011f0:	40020000 	.word	0x40020000
 80011f4:	3ff00000 	.word	0x3ff00000
 80011f8:	20000204 	.word	0x20000204

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f007 fd00 	bl	8008c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <SystemClock_Config+0xd4>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <SystemClock_Config+0xd4>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <SystemClock_Config+0xd4>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <SystemClock_Config+0xd8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001248:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <SystemClock_Config+0xd8>)
 800124a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <SystemClock_Config+0xd8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001266:	2301      	movs	r3, #1
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126a:	2310      	movs	r3, #16
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126e:	2302      	movs	r3, #2
 8001270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001278:	230f      	movs	r3, #15
 800127a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800127c:	2390      	movs	r3, #144	; 0x90
 800127e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001284:	2305      	movs	r3, #5
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fdcf 	bl	8003e30 <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001298:	f000 f94c 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	230f      	movs	r3, #15
 800129e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 f832 	bl	8004320 <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012c2:	f000 f937 	bl	8001534 <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3750      	adds	r7, #80	; 0x50
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_I2S2_Init+0x54>)
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <MX_I2S2_Init+0x58>)
 80012e0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_I2S2_Init+0x54>)
 80012e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012e8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_I2S2_Init+0x54>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_I2S2_Init+0x54>)
 80012f2:	2203      	movs	r2, #3
 80012f4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <MX_I2S2_Init+0x54>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_I2S2_Init+0x54>)
 80012fe:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001302:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_I2S2_Init+0x54>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_I2S2_Init+0x54>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_I2S2_Init+0x54>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_I2S2_Init+0x54>)
 8001318:	f000 fd6a 	bl	8001df0 <HAL_I2S_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001322:	f000 f907 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000017c 	.word	0x2000017c
 8001330:	40003800 	.word	0x40003800

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_GPIO_Init+0x98>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <MX_GPIO_Init+0x98>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_GPIO_Init+0x98>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_GPIO_Init+0x98>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <MX_GPIO_Init+0x98>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_GPIO_Init+0x98>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_GPIO_Init+0x98>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <MX_GPIO_Init+0x98>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_GPIO_Init+0x98>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LEDINST_Pin|LEDINT_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	212a      	movs	r1, #42	; 0x2a
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <MX_GPIO_Init+0x9c>)
 80013a4:	f000 fcf0 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LEDINST_Pin LEDINT_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LEDINST_Pin|LEDINT_Pin;
 80013a8:	232a      	movs	r3, #42	; 0x2a
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_GPIO_Init+0x9c>)
 80013c0:	f000 fb5e 	bl	8001a80 <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000

080013d4 <getStr>:
	str[1]=d%10+'0';
	d/=10;
	str[0]=d%10+'0';
}

void getStr(int32_t d, char* str){ //assume str's length is at least 10
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	uint8_t count = 13;
 80013de:	230d      	movs	r3, #13
 80013e0:	73fb      	strb	r3, [r7, #15]
	while(count){
 80013e2:	e01d      	b.n	8001420 <getStr+0x4c>
		str[--count] = d%10+'0'; //there's an easier way to do this, but don't want to waste memory
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <getStr+0x64>)
 80013e8:	fb83 1302 	smull	r1, r3, r3, r2
 80013ec:	1099      	asrs	r1, r3, #2
 80013ee:	17d3      	asrs	r3, r2, #31
 80013f0:	1ac9      	subs	r1, r1, r3
 80013f2:	460b      	mov	r3, r1
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad1      	subs	r1, r2, r3
 80013fc:	b2ca      	uxtb	r2, r1
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	3b01      	subs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	440b      	add	r3, r1
 800140a:	3230      	adds	r2, #48	; 0x30
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	701a      	strb	r2, [r3, #0]
		d/=10;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <getStr+0x64>)
 8001414:	fb82 1203 	smull	r1, r2, r2, r3
 8001418:	1092      	asrs	r2, r2, #2
 800141a:	17db      	asrs	r3, r3, #31
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	607b      	str	r3, [r7, #4]
	while(count){
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1de      	bne.n	80013e4 <getStr+0x10>
	}
	str[0] = ',';
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	222c      	movs	r2, #44	; 0x2c
 800142a:	701a      	strb	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	66666667 	.word	0x66666667
 800143c:	00000000 	.word	0x00000000

08001440 <dailyDose>:

double dailyDose(int32_t p){ //adapted from my python code
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	double arg = (double) (p)/ 2072; //Using current definition of 90 dB, may change later -- make into a macro
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff f81f 	bl	800048c <__aeabi_i2d>
 800144e:	a337      	add	r3, pc, #220	; (adr r3, 800152c <dailyDose+0xec>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f9ae 	bl	80007b4 <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	arg = 10*log(p)/log(10); // to compute dB version of p using 90 dB as a reference
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff f813 	bl	800048c <__aeabi_i2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	ec43 2b10 	vmov	d0, r2, r3
 800146e:	f007 fbd7 	bl	8008c20 <log>
 8001472:	ec51 0b10 	vmov	r0, r1, d0
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <dailyDose+0xe0>)
 800147c:	f7ff f870 	bl	8000560 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	a31f      	add	r3, pc, #124	; (adr r3, 8001508 <dailyDose+0xc8>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f991 	bl	80007b4 <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	e9c7 2304 	strd	r2, r3, [r7, #16]
	arg = pow(2, -arg/5);
 800149a:	693c      	ldr	r4, [r7, #16]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <dailyDose+0xe4>)
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7ff f982 	bl	80007b4 <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	ec43 2b17 	vmov	d7, r2, r3
 80014b8:	eeb0 1a47 	vmov.f32	s2, s14
 80014bc:	eef0 1a67 	vmov.f32	s3, s15
 80014c0:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8001510 <dailyDose+0xd0>
 80014c4:	f007 fbea 	bl	8008c9c <pow>
 80014c8:	ed87 0b04 	vstr	d0, [r7, #16]
	double t = 8*60*60*arg; //defining the resulting exposure time period
 80014cc:	a312      	add	r3, pc, #72	; (adr r3, 8001518 <dailyDose+0xd8>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014d6:	f7ff f843 	bl	8000560 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return interval/t; //finally, return how much this exposure contributed to the daily dose based on
 80014e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014e6:	f04f 0000 	mov.w	r0, #0
 80014ea:	490f      	ldr	r1, [pc, #60]	; (8001528 <dailyDose+0xe8>)
 80014ec:	f7ff f962 	bl	80007b4 <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80014f8:	eeb0 0a47 	vmov.f32	s0, s14
 80014fc:	eef0 0a67 	vmov.f32	s1, s15
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bdb0      	pop	{r4, r5, r7, pc}
 8001506:	bf00      	nop
 8001508:	bbb55516 	.word	0xbbb55516
 800150c:	40026bb1 	.word	0x40026bb1
 8001510:	00000000 	.word	0x00000000
 8001514:	40000000 	.word	0x40000000
 8001518:	00000000 	.word	0x00000000
 800151c:	40dc2000 	.word	0x40dc2000
 8001520:	40240000 	.word	0x40240000
 8001524:	40140000 	.word	0x40140000
 8001528:	3fe00000 	.word	0x3fe00000
 800152c:	00000000 	.word	0x00000000
 8001530:	40a03000 	.word	0x40a03000

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_MspInit+0x4c>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_MspInit+0x4c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	; 0x38
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a21      	ldr	r2, [pc, #132]	; (8001644 <HAL_I2S_MspInit+0xb4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d13c      	bne.n	800163c <HAL_I2S_MspInit+0xac>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015c2:	2301      	movs	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 60;
 80015c6:	233c      	movs	r3, #60	; 0x3c
 80015c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 f85c 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80015de:	f7ff ffa9 	bl	8001534 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_I2S_MspInit+0xb8>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_I2S_MspInit+0xb8>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_I2S_MspInit+0xb8>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_I2S_MspInit+0xb8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_I2S_MspInit+0xb8>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_I2S_MspInit+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 800161a:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800162c:	2305      	movs	r3, #5
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_I2S_MspInit+0xbc>)
 8001638:	f000 fa22 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40003800 	.word	0x40003800
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f89a 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <OTG_FS_IRQHandler+0x10>)
 80016aa:	f001 fa93 	bl	8002bd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000ebc 	.word	0x20000ebc

080016b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016e2:	490e      	ldr	r1, [pc, #56]	; (800171c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f8:	4c0b      	ldr	r4, [pc, #44]	; (8001728 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001706:	f7ff ffd7 	bl	80016b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170a:	f007 fa4f 	bl	8008bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fb59 	bl	8000dc4 <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001720:	08009f18 	.word	0x08009f18
  ldr r2, =_sbss
 8001724:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001728:	200015e8 	.word	0x200015e8

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_Init+0x40>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_Init+0x40>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_Init+0x40>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f94f 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	200f      	movs	r0, #15
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff feec 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f967 	bl	8001a66 <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f000 f92f 	bl	8001a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000208 	.word	0x20000208

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000208 	.word	0x20000208

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	; (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff29 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff3e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff31 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	e159      	b.n	8001d50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f040 8148 	bne.w	8001d4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d005      	beq.n	8001ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d130      	bne.n	8001b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 0201 	and.w	r2, r3, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d017      	beq.n	8001b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d123      	bne.n	8001bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a2 	beq.w	8001d4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <HAL_GPIO_Init+0x2e8>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a56      	ldr	r2, [pc, #344]	; (8001d68 <HAL_GPIO_Init+0x2e8>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b54      	ldr	r3, [pc, #336]	; (8001d68 <HAL_GPIO_Init+0x2e8>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c22:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_Init+0x2ec>)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d019      	beq.n	8001c82 <HAL_GPIO_Init+0x202>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <HAL_GPIO_Init+0x2f4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x1fe>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <HAL_GPIO_Init+0x2f8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x1fa>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_GPIO_Init+0x2fc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x1f6>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a45      	ldr	r2, [pc, #276]	; (8001d80 <HAL_GPIO_Init+0x300>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x1f2>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <HAL_GPIO_Init+0x2ec>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1a:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d44:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f aea2 	bls.w	8001a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dcc:	887a      	ldrh	r2, [r7, #2]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	041a      	lsls	r2, r3, #16
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	400b      	ands	r3, r1
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e128      	b.n	8002054 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a90      	ldr	r2, [pc, #576]	; (800205c <HAL_I2S_Init+0x26c>)
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fbb7 	bl	8001590 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e38:	f023 030f 	bic.w	r3, r3, #15
 8001e3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2202      	movs	r2, #2
 8001e44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d060      	beq.n	8001f10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e56:	2310      	movs	r3, #16
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e001      	b.n	8001e60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d802      	bhi.n	8001e6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f002 fcfc 	bl	800486c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e74:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7e:	d125      	bne.n	8001ecc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	3305      	adds	r3, #5
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e01f      	b.n	8001eea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	3305      	adds	r3, #5
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e00e      	b.n	8001eea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	3305      	adds	r3, #5
 8001ee8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <HAL_I2S_Init+0x270>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e003      	b.n	8001f18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d902      	bls.n	8001f24 <HAL_I2S_Init+0x134>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	2bff      	cmp	r3, #255	; 0xff
 8001f22:	d907      	bls.n	8001f34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f043 0210 	orr.w	r2, r3, #16
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e08f      	b.n	8002054 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	ea42 0103 	orr.w	r1, r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6851      	ldr	r1, [r2, #4]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6892      	ldr	r2, [r2, #8]
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68d2      	ldr	r2, [r2, #12]
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6992      	ldr	r2, [r2, #24]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d161      	bne.n	8002044 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a38      	ldr	r2, [pc, #224]	; (8002064 <HAL_I2S_Init+0x274>)
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a37      	ldr	r2, [pc, #220]	; (8002068 <HAL_I2S_Init+0x278>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2S_Init+0x1a4>
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_I2S_Init+0x27c>)
 8001f92:	e001      	b.n	8001f98 <HAL_I2S_Init+0x1a8>
 8001f94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4932      	ldr	r1, [pc, #200]	; (8002068 <HAL_I2S_Init+0x278>)
 8001fa0:	428a      	cmp	r2, r1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2S_Init+0x1b8>
 8001fa4:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_I2S_Init+0x27c>)
 8001fa6:	e001      	b.n	8001fac <HAL_I2S_Init+0x1bc>
 8001fa8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001fac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001fb0:	f023 030f 	bic.w	r3, r3, #15
 8001fb4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <HAL_I2S_Init+0x278>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_I2S_Init+0x1d4>
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_I2S_Init+0x27c>)
 8001fc2:	e001      	b.n	8001fc8 <HAL_I2S_Init+0x1d8>
 8001fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc8:	2202      	movs	r2, #2
 8001fca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <HAL_I2S_Init+0x278>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_I2S_Init+0x1ea>
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_I2S_Init+0x27c>)
 8001fd8:	e001      	b.n	8001fde <HAL_I2S_Init+0x1ee>
 8001fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fea:	d003      	beq.n	8001ff4 <HAL_I2S_Init+0x204>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e001      	b.n	8002000 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800200a:	4313      	orrs	r3, r2
 800200c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002014:	4313      	orrs	r3, r2
 8002016:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800201e:	4313      	orrs	r3, r2
 8002020:	b29a      	uxth	r2, r3
 8002022:	897b      	ldrh	r3, [r7, #10]
 8002024:	4313      	orrs	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800202c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_I2S_Init+0x278>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_I2S_Init+0x24c>
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_I2S_Init+0x27c>)
 800203a:	e001      	b.n	8002040 <HAL_I2S_Init+0x250>
 800203c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002040:	897a      	ldrh	r2, [r7, #10]
 8002042:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	080022f9 	.word	0x080022f9
 8002060:	cccccccd 	.word	0xcccccccd
 8002064:	08002481 	.word	0x08002481
 8002068:	40003800 	.word	0x40003800
 800206c:	40003400 	.word	0x40003400

08002070 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <HAL_I2S_Receive+0x1c>
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b4      	b.n	80021fa <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_I2S_Receive+0x30>
 800209c:	2302      	movs	r3, #2
 800209e:	e0ac      	b.n	80021fa <HAL_I2S_Receive+0x18a>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d005      	beq.n	80020c0 <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
 80020be:	e09c      	b.n	80021fa <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2204      	movs	r2, #4
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d002      	beq.n	80020ec <HAL_I2S_Receive+0x7c>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10a      	bne.n	8002102 <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	865a      	strh	r2, [r3, #50]	; 0x32
 8002100:	e005      	b.n	800210e <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211c:	d007      	beq.n	800212e <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800212c:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800213c:	d14f      	bne.n	80021de <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8002154:	e043      	b.n	80021de <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2201      	movs	r2, #1
 800215a:	2101      	movs	r1, #1
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f955 	bl	800240c <I2S_WaitFlagStateUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00f      	beq.n	8002188 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e038      	b.n	80021fa <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	b292      	uxth	r2, r2
 8002194:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	1c9a      	adds	r2, r3, #2
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d110      	bne.n	80021de <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f043 0202 	orr.w	r2, r3, #2
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1b6      	bne.n	8002156 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c9a      	adds	r2, r3, #2
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10e      	bne.n	8002292 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002282:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffb8 	bl	8002202 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	b292      	uxth	r2, r2
 80022ae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	1c9a      	adds	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10e      	bne.n	80022f0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ff93 	bl	8002216 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b04      	cmp	r3, #4
 8002312:	d13a      	bne.n	800238a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d109      	bne.n	8002332 <I2S_IRQHandler+0x3a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d102      	bne.n	8002332 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ffb4 	bl	800229a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d126      	bne.n	800238a <I2S_IRQHandler+0x92>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b20      	cmp	r3, #32
 8002348:	d11f      	bne.n	800238a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002358:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f043 0202 	orr.w	r2, r3, #2
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff50 	bl	800222a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d136      	bne.n	8002404 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d109      	bne.n	80023b4 <I2S_IRQHandler+0xbc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d102      	bne.n	80023b4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ff45 	bl	800223e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d122      	bne.n	8002404 <I2S_IRQHandler+0x10c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d11b      	bne.n	8002404 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023da:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ff13 	bl	800222a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800241c:	f7ff f9ee 	bl	80017fc <HAL_GetTick>
 8002420:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002422:	e018      	b.n	8002456 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242a:	d014      	beq.n	8002456 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800242c:	f7ff f9e6 	bl	80017fc <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d902      	bls.n	8002442 <I2S_WaitFlagStateUntilTimeout+0x36>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e00f      	b.n	8002476 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d1d7      	bne.n	8002424 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a92      	ldr	r2, [pc, #584]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800249a:	4b92      	ldr	r3, [pc, #584]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800249c:	e001      	b.n	80024a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800249e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a8b      	ldr	r2, [pc, #556]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80024b8:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024ba:	e001      	b.n	80024c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80024bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024cc:	d004      	beq.n	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 8099 	bne.w	800260a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f925 	bl	800273c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9c8 	bl	800289c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d13a      	bne.n	800258c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d035      	beq.n	800258c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6e      	ldr	r2, [pc, #440]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800252a:	4b6e      	ldr	r3, [pc, #440]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800252c:	e001      	b.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800252e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4969      	ldr	r1, [pc, #420]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800253a:	428b      	cmp	r3, r1
 800253c:	d101      	bne.n	8002542 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800253e:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002540:	e001      	b.n	8002546 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800254a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800255a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f043 0202 	orr.w	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fe4f 	bl	800222a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	f040 80c3 	bne.w	800271e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80bd 	beq.w	800271e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a49      	ldr	r2, [pc, #292]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80025be:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025c0:	e001      	b.n	80025c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80025c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4944      	ldr	r1, [pc, #272]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025ce:	428b      	cmp	r3, r1
 80025d0:	d101      	bne.n	80025d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025d4:	e001      	b.n	80025da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80025d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f043 0204 	orr.w	r2, r3, #4
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fe11 	bl	800222a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002608:	e089      	b.n	800271e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b02      	cmp	r3, #2
 8002612:	d107      	bne.n	8002624 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8be 	bl	80027a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f8fd 	bl	8002838 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d12f      	bne.n	80026a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02a      	beq.n	80026a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002660:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d101      	bne.n	8002670 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800266e:	e001      	b.n	8002674 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4919      	ldr	r1, [pc, #100]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800267c:	428b      	cmp	r3, r1
 800267e:	d101      	bne.n	8002684 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002682:	e001      	b.n	8002688 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002688:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800268c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f043 0202 	orr.w	r2, r3, #2
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fdc1 	bl	800222a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d136      	bne.n	8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d031      	beq.n	8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026c8:	e001      	b.n	80026ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80026ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4902      	ldr	r1, [pc, #8]	; (80026e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026d6:	428b      	cmp	r3, r1
 80026d8:	d106      	bne.n	80026e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80026da:	4b02      	ldr	r3, [pc, #8]	; (80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026dc:	e006      	b.n	80026ec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80026de:	bf00      	nop
 80026e0:	40003800 	.word	0x40003800
 80026e4:	40003400 	.word	0x40003400
 80026e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026f0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002700:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f043 0204 	orr.w	r2, r3, #4
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fd87 	bl	800222a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800271c:	e000      	b.n	8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800271e:	bf00      	nop
}
 8002720:	bf00      	nop
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c99      	adds	r1, r3, #2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6251      	str	r1, [r2, #36]	; 0x24
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800277c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ffc9 	bl	8002728 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	1c99      	adds	r1, r3, #2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6251      	str	r1, [r2, #36]	; 0x24
 80027b2:	8819      	ldrh	r1, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <I2SEx_TxISR_I2SExt+0x90>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <I2SEx_TxISR_I2SExt+0x22>
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <I2SEx_TxISR_I2SExt+0x94>)
 80027c0:	e001      	b.n	80027c6 <I2SEx_TxISR_I2SExt+0x26>
 80027c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c6:	460a      	mov	r2, r1
 80027c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d121      	bne.n	8002826 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <I2SEx_TxISR_I2SExt+0x90>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <I2SEx_TxISR_I2SExt+0x50>
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <I2SEx_TxISR_I2SExt+0x94>)
 80027ee:	e001      	b.n	80027f4 <I2SEx_TxISR_I2SExt+0x54>
 80027f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	490d      	ldr	r1, [pc, #52]	; (8002830 <I2SEx_TxISR_I2SExt+0x90>)
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d101      	bne.n	8002804 <I2SEx_TxISR_I2SExt+0x64>
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <I2SEx_TxISR_I2SExt+0x94>)
 8002802:	e001      	b.n	8002808 <I2SEx_TxISR_I2SExt+0x68>
 8002804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800280c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d106      	bne.n	8002826 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff81 	bl	8002728 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40003800 	.word	0x40003800
 8002834:	40003400 	.word	0x40003400

08002838 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68d8      	ldr	r0, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	1c99      	adds	r1, r3, #2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002850:	b282      	uxth	r2, r0
 8002852:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d113      	bne.n	8002894 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800287a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff4a 	bl	8002728 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a20      	ldr	r2, [pc, #128]	; (800292c <I2SEx_RxISR_I2SExt+0x90>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <I2SEx_RxISR_I2SExt+0x16>
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <I2SEx_RxISR_I2SExt+0x94>)
 80028b0:	e001      	b.n	80028b6 <I2SEx_RxISR_I2SExt+0x1a>
 80028b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b6:	68d8      	ldr	r0, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	1c99      	adds	r1, r3, #2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80028c2:	b282      	uxth	r2, r0
 80028c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d121      	bne.n	8002922 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <I2SEx_RxISR_I2SExt+0x90>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <I2SEx_RxISR_I2SExt+0x50>
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <I2SEx_RxISR_I2SExt+0x94>)
 80028ea:	e001      	b.n	80028f0 <I2SEx_RxISR_I2SExt+0x54>
 80028ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	490d      	ldr	r1, [pc, #52]	; (800292c <I2SEx_RxISR_I2SExt+0x90>)
 80028f8:	428b      	cmp	r3, r1
 80028fa:	d101      	bne.n	8002900 <I2SEx_RxISR_I2SExt+0x64>
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <I2SEx_RxISR_I2SExt+0x94>)
 80028fe:	e001      	b.n	8002904 <I2SEx_RxISR_I2SExt+0x68>
 8002900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002904:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002908:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff03 	bl	8002728 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40003800 	.word	0x40003800
 8002930:	40003400 	.word	0x40003400

08002934 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002936:	b08f      	sub	sp, #60	; 0x3c
 8002938:	af0a      	add	r7, sp, #40	; 0x28
 800293a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e10f      	b.n	8002b66 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f005 fe13 	bl	800858c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2203      	movs	r2, #3
 800296a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f002 f8e4 	bl	8004b52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	687e      	ldr	r6, [r7, #4]
 8002992:	466d      	mov	r5, sp
 8002994:	f106 0410 	add.w	r4, r6, #16
 8002998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80029a8:	1d33      	adds	r3, r6, #4
 80029aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ac:	6838      	ldr	r0, [r7, #0]
 80029ae:	f001 ffbb 	bl	8004928 <USB_CoreInit>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0d0      	b.n	8002b66 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 f8d2 	bl	8004b74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e04a      	b.n	8002a6c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	333d      	adds	r3, #61	; 0x3d
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	333c      	adds	r3, #60	; 0x3c
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	b298      	uxth	r0, r3
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3344      	adds	r3, #68	; 0x44
 8002a12:	4602      	mov	r2, r0
 8002a14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3340      	adds	r3, #64	; 0x40
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3348      	adds	r3, #72	; 0x48
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334c      	adds	r3, #76	; 0x4c
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3354      	adds	r3, #84	; 0x54
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3af      	bcc.n	80029d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e044      	b.n	8002b06 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	3301      	adds	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d3b5      	bcc.n	8002a7c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	687e      	ldr	r6, [r7, #4]
 8002b18:	466d      	mov	r5, sp
 8002b1a:	f106 0410 	add.w	r4, r6, #16
 8002b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b2e:	1d33      	adds	r3, r6, #4
 8002b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b32:	6838      	ldr	r0, [r7, #0]
 8002b34:	f002 f86a 	bl	8004c0c <USB_DevInit>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00d      	b.n	8002b66 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 f9b9 	bl	8005ed6 <USB_DevDisconnect>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_PCD_Start+0x1c>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e020      	b.n	8002bcc <HAL_PCD_Start+0x5e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d109      	bne.n	8002bae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d005      	beq.n	8002bae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 ffbc 	bl	8004b30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 f969 	bl	8005e94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08d      	sub	sp, #52	; 0x34
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fa27 	bl	800603e <USB_GetMode>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 848a 	bne.w	800350c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 f98b 	bl	8005f18 <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8480 	beq.w	800350a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 f978 	bl	8005f18 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d107      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f002 0202 	and.w	r2, r2, #2
 8002c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 f966 	bl	8005f18 <USB_ReadInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d161      	bne.n	8002d1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0210 	bic.w	r2, r2, #16
 8002c64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	0c5b      	lsrs	r3, r3, #17
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d124      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d035      	beq.n	8002d0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6a38      	ldr	r0, [r7, #32]
 8002cb2:	f002 ff9d 	bl	8005bf0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc2:	441a      	add	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	6a1a      	ldr	r2, [r3, #32]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd4:	441a      	add	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	e016      	b.n	8002d0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	0c5b      	lsrs	r3, r3, #17
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d110      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cee:	2208      	movs	r2, #8
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6a38      	ldr	r0, [r7, #32]
 8002cf4:	f002 ff7c 	bl	8005bf0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	6a1a      	ldr	r2, [r3, #32]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d04:	441a      	add	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0210 	orr.w	r2, r2, #16
 8002d18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 f8fa 	bl	8005f18 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d2e:	f040 80a7 	bne.w	8002e80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 f8ff 	bl	8005f3e <USB_ReadDevAllOutEpInterrupt>
 8002d40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d42:	e099      	b.n	8002e78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 808e 	beq.w	8002e6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 f923 	bl	8005fa6 <USB_ReadDevOutEPInterrupt>
 8002d60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00c      	beq.n	8002d86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fec3 	bl	8003b0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00c      	beq.n	8002daa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2308      	movs	r3, #8
 8002da0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 ff99 	bl	8003cdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d030      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d109      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	3304      	adds	r3, #4
 8002e04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	78db      	ldrb	r3, [r3, #3]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d108      	bne.n	8002e20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f005 fcb2 	bl	8008784 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2302      	movs	r3, #2
 8002e30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e64:	461a      	mov	r2, r3
 8002e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	3301      	adds	r3, #1
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f47f af62 	bne.w	8002d44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 f847 	bl	8005f18 <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e94:	f040 80db 	bne.w	800304e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 f868 	bl	8005f72 <USB_ReadDevAllInEpInterrupt>
 8002ea2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ea8:	e0cd      	b.n	8003046 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80c2 	beq.w	800303a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 f88e 	bl	8005fe2 <USB_ReadDevInEPInterrupt>
 8002ec6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d057      	beq.n	8002f82 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	2201      	movs	r2, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69f9      	ldr	r1, [r7, #28]
 8002eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f02:	461a      	mov	r2, r3
 8002f04:	2301      	movs	r3, #1
 8002f06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d132      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	334c      	adds	r3, #76	; 0x4c
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4403      	add	r3, r0
 8002f30:	3348      	adds	r3, #72	; 0x48
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4419      	add	r1, r3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4403      	add	r3, r0
 8002f44:	334c      	adds	r3, #76	; 0x4c
 8002f46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d113      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x3a2>
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3354      	adds	r3, #84	; 0x54
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2101      	movs	r1, #1
 8002f72:	f003 f895 	bl	80060a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f005 fb86 	bl	800868e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2340      	movs	r3, #64	; 0x40
 8002fd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d023      	beq.n	8003028 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe2:	6a38      	ldr	r0, [r7, #32]
 8002fe4:	f001 ff76 	bl	8004ed4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	3338      	adds	r3, #56	; 0x38
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	78db      	ldrb	r3, [r3, #3]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d108      	bne.n	8003016 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f005 fbc9 	bl	80087a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003022:	461a      	mov	r2, r3
 8003024:	2302      	movs	r3, #2
 8003026:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fcdb 	bl	80039f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	3301      	adds	r3, #1
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f af2e 	bne.w	8002eaa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f002 ff60 	bl	8005f18 <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800305e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003062:	d122      	bne.n	80030aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800307e:	2b01      	cmp	r3, #1
 8003080:	d108      	bne.n	8003094 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800308a:	2100      	movs	r1, #0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fec3 	bl	8003e18 <HAL_PCDEx_LPM_Callback>
 8003092:	e002      	b.n	800309a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f005 fb67 	bl	8008768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 ff32 	bl	8005f18 <USB_ReadInterrupts>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030be:	d112      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d102      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f005 fb23 	bl	800871c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030e4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f002 ff14 	bl	8005f18 <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	f040 80b7 	bne.w	800326c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2110      	movs	r1, #16
 8003118:	4618      	mov	r0, r3
 800311a:	f001 fedb 	bl	8004ed4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	e046      	b.n	80031b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003130:	461a      	mov	r2, r3
 8003132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003136:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003148:	0151      	lsls	r1, r2, #5
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	440a      	add	r2, r1
 800314e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003156:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800316a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317c:	0151      	lsls	r1, r2, #5
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	440a      	add	r2, r1
 8003182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003186:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800318a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319c:	0151      	lsls	r1, r2, #5
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	440a      	add	r2, r1
 80031a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	3301      	adds	r3, #1
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d3b3      	bcc.n	8003124 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d016      	beq.n	8003206 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e8:	f043 030b 	orr.w	r3, r3, #11
 80031ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fe:	f043 030b 	orr.w	r3, r3, #11
 8003202:	6453      	str	r3, [r2, #68]	; 0x44
 8003204:	e015      	b.n	8003232 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003218:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800321c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322c:	f043 030b 	orr.w	r3, r3, #11
 8003230:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003240:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003244:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003256:	461a      	mov	r2, r3
 8003258:	f002 ff22 	bl	80060a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800326a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f002 fe51 	bl	8005f18 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800327c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003280:	d124      	bne.n	80032cc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f002 fee7 	bl	800605a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f001 fe9c 	bl	8004fce <USB_GetDevSpeed>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681c      	ldr	r4, [r3, #0]
 80032a2:	f001 f9e9 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80032a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	4620      	mov	r0, r4
 80032b2:	f001 fb9b 	bl	80049ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f005 fa11 	bl	80086de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 fe21 	bl	8005f18 <USB_ReadInterrupts>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d10a      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f005 f9ee 	bl	80086c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f002 0208 	and.w	r2, r2, #8
 80032f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fe0c 	bl	8005f18 <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d122      	bne.n	8003350 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003316:	2301      	movs	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	e014      	b.n	8003346 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	b2db      	uxtb	r3, r3
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fb27 	bl	800398e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	3301      	adds	r3, #1
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	429a      	cmp	r2, r3
 800334e:	d3e5      	bcc.n	800331c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f002 fddf 	bl	8005f18 <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003364:	d13b      	bne.n	80033de <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003366:	2301      	movs	r3, #1
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	e02b      	b.n	80033c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3340      	adds	r3, #64	; 0x40
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d115      	bne.n	80033be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003392:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	da12      	bge.n	80033be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	333f      	adds	r3, #63	; 0x3f
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fae8 	bl	800398e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	3301      	adds	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d3ce      	bcc.n	800336c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 fd98 	bl	8005f18 <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f2:	d155      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033f4:	2301      	movs	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	e045      	b.n	8003486 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d12e      	bne.n	8003480 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003422:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003424:	2b00      	cmp	r3, #0
 8003426:	da2b      	bge.n	8003480 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003434:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003438:	429a      	cmp	r2, r3
 800343a:	d121      	bne.n	8003480 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800347c:	6053      	str	r3, [r2, #4]
            break;
 800347e:	e007      	b.n	8003490 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	3301      	adds	r3, #1
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	429a      	cmp	r2, r3
 800348e:	d3b4      	bcc.n	80033fa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800349e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 fd37 	bl	8005f18 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d10a      	bne.n	80034cc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f005 f988 	bl	80087cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 fd21 	bl	8005f18 <USB_ReadInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d115      	bne.n	800350c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f005 f978 	bl	80087e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	e000      	b.n	800350c <HAL_PCD_IRQHandler+0x938>
      return;
 800350a:	bf00      	nop
    }
  }
}
 800350c:	3734      	adds	r7, #52	; 0x34
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}

08003512 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_PCD_SetAddress+0x1a>
 8003528:	2302      	movs	r3, #2
 800352a:	e013      	b.n	8003554 <HAL_PCD_SetAddress+0x42>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f002 fc7f 	bl	8005e48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	4603      	mov	r3, r0
 800356c:	70fb      	strb	r3, [r7, #3]
 800356e:	460b      	mov	r3, r1
 8003570:	803b      	strh	r3, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800357a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800357e:	2b00      	cmp	r3, #0
 8003580:	da0f      	bge.n	80035a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	3338      	adds	r3, #56	; 0x38
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	3304      	adds	r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	705a      	strb	r2, [r3, #1]
 80035a0:	e00f      	b.n	80035c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	f003 020f 	and.w	r2, r3, #15
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035ce:	883a      	ldrh	r2, [r7, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	78ba      	ldrb	r2, [r7, #2]
 80035d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035ec:	78bb      	ldrb	r3, [r7, #2]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d102      	bne.n	80035f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_PCD_EP_Open+0xaa>
 8003602:	2302      	movs	r3, #2
 8003604:	e00e      	b.n	8003624 <HAL_PCD_EP_Open+0xc8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fcff 	bl	8005018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003622:	7afb      	ldrb	r3, [r7, #11]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363c:	2b00      	cmp	r3, #0
 800363e:	da0f      	bge.n	8003660 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 020f 	and.w	r2, r3, #15
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	3338      	adds	r3, #56	; 0x38
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	705a      	strb	r2, [r3, #1]
 800365e:	e00f      	b.n	8003680 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	3304      	adds	r3, #4
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_PCD_EP_Close+0x6e>
 8003696:	2302      	movs	r3, #2
 8003698:	e00e      	b.n	80036b8 <HAL_PCD_EP_Close+0x8c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fd3d 	bl	8005128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	460b      	mov	r3, r1
 80036ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	f003 020f 	and.w	r2, r3, #15
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	b2da      	uxtb	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d102      	bne.n	800371c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800371c:	7afb      	ldrb	r3, [r7, #11]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	f002 f81c 	bl	8005770 <USB_EP0StartXfer>
 8003738:	e008      	b.n	800374c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	6979      	ldr	r1, [r7, #20]
 8003748:	f001 fdca 	bl	80052e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 020f 	and.w	r2, r3, #15
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003778:	681b      	ldr	r3, [r3, #0]
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	460b      	mov	r3, r1
 8003794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003796:	7afb      	ldrb	r3, [r7, #11]
 8003798:	f003 020f 	and.w	r2, r3, #15
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	3338      	adds	r3, #56	; 0x38
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	3304      	adds	r3, #4
 80037ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2201      	movs	r2, #1
 80037c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e0:	7afb      	ldrb	r3, [r7, #11]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	6979      	ldr	r1, [r7, #20]
 80037f8:	f001 ffba 	bl	8005770 <USB_EP0StartXfer>
 80037fc:	e008      	b.n	8003810 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	f001 fd68 	bl	80052e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	f003 020f 	and.w	r2, r3, #15
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d901      	bls.n	8003838 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e050      	b.n	80038da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800383c:	2b00      	cmp	r3, #0
 800383e:	da0f      	bge.n	8003860 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 020f 	and.w	r2, r3, #15
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3338      	adds	r3, #56	; 0x38
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	705a      	strb	r2, [r3, #1]
 800385e:	e00d      	b.n	800387c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	3304      	adds	r3, #4
 8003874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_PCD_EP_SetStall+0x82>
 8003898:	2302      	movs	r3, #2
 800389a:	e01e      	b.n	80038da <HAL_PCD_EP_SetStall+0xc0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f002 f9f8 	bl	8005ca0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	b2d9      	uxtb	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038ca:	461a      	mov	r2, r3
 80038cc:	f002 fbe8 	bl	80060a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	f003 020f 	and.w	r2, r3, #15
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d901      	bls.n	8003900 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e042      	b.n	8003986 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003904:	2b00      	cmp	r3, #0
 8003906:	da0f      	bge.n	8003928 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	3338      	adds	r3, #56	; 0x38
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	4413      	add	r3, r2
 800391c:	3304      	adds	r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	705a      	strb	r2, [r3, #1]
 8003926:	e00f      	b.n	8003948 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_PCD_EP_ClrStall+0x86>
 8003964:	2302      	movs	r3, #2
 8003966:	e00e      	b.n	8003986 <HAL_PCD_EP_ClrStall+0xa4>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f002 fa00 	bl	8005d7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800399a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	da0c      	bge.n	80039bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	f003 020f 	and.w	r2, r3, #15
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	3338      	adds	r3, #56	; 0x38
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	3304      	adds	r3, #4
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e00c      	b.n	80039d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 020f 	and.w	r2, r3, #15
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	3304      	adds	r3, #4
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	4618      	mov	r0, r3
 80039de:	f002 f81f 	bl	8005a20 <USB_EPStopXfer>
 80039e2:	4603      	mov	r3, r0
 80039e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039e6:	7afb      	ldrb	r3, [r7, #11]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3338      	adds	r3, #56	; 0x38
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d901      	bls.n	8003a28 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e06c      	b.n	8003b02 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d902      	bls.n	8003a44 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3303      	adds	r3, #3
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a4c:	e02b      	b.n	8003aa6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d902      	bls.n	8003a6a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6919      	ldr	r1, [r3, #16]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	4603      	mov	r3, r0
 8003a88:	6978      	ldr	r0, [r7, #20]
 8003a8a:	f002 f873 	bl	8005b74 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	441a      	add	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1a      	ldr	r2, [r3, #32]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d809      	bhi.n	8003ad0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1a      	ldr	r2, [r3, #32]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d203      	bcs.n	8003ad0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1be      	bne.n	8003a4e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d811      	bhi.n	8003b00 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	6939      	ldr	r1, [r7, #16]
 8003af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003afc:	4013      	ands	r3, r2
 8003afe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	333c      	adds	r3, #60	; 0x3c
 8003b24:	3304      	adds	r3, #4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d17b      	bne.n	8003c3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4a61      	ldr	r2, [pc, #388]	; (8003cd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	f240 80b9 	bls.w	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80b3 	beq.w	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b74:	6093      	str	r3, [r2, #8]
 8003b76:	e0a7      	b.n	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2320      	movs	r3, #32
 8003b92:	6093      	str	r3, [r2, #8]
 8003b94:	e098      	b.n	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 8093 	bne.w	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4a4b      	ldr	r2, [pc, #300]	; (8003cd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d90f      	bls.n	8003bca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc6:	6093      	str	r3, [r2, #8]
 8003bc8:	e07e      	b.n	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3304      	adds	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	0159      	lsls	r1, r3, #5
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	440b      	add	r3, r1
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d114      	bne.n	8003c2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c14:	461a      	mov	r2, r3
 8003c16:	2101      	movs	r1, #1
 8003c18:	f002 fa42 	bl	80060a0 <USB_EP0_OutStart>
 8003c1c:	e006      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	441a      	add	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f004 fd10 	bl	8008658 <HAL_PCD_DataOutStageCallback>
 8003c38:	e046      	b.n	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d124      	bne.n	8003c8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	e032      	b.n	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f004 fce7 	bl	8008658 <HAL_PCD_DataOutStageCallback>
 8003c8a:	e01d      	b.n	8003cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d114      	bne.n	8003cbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d108      	bne.n	8003cbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f002 f9f2 	bl	80060a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f004 fcc8 	bl	8008658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	4f54300a 	.word	0x4f54300a
 8003cd8:	4f54310a 	.word	0x4f54310a

08003cdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	333c      	adds	r3, #60	; 0x3c
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d90e      	bls.n	8003d30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f004 fc7f 	bl	8008634 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d90c      	bls.n	8003d58 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d108      	bne.n	8003d58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d50:	461a      	mov	r2, r3
 8003d52:	2101      	movs	r1, #1
 8003d54:	f002 f9a4 	bl	80060a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	4f54300a 	.word	0x4f54300a

08003d68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
 8003d74:	4613      	mov	r3, r2
 8003d76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d107      	bne.n	8003d96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d86:	883b      	ldrh	r3, [r7, #0]
 8003d88:	0419      	lsls	r1, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
 8003d94:	e028      	b.n	8003de8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	4413      	add	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e00d      	b.n	8003dc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	3340      	adds	r3, #64	; 0x40
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d3ec      	bcc.n	8003daa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003dd0:	883b      	ldrh	r3, [r7, #0]
 8003dd2:	0418      	lsls	r0, r3, #16
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	4302      	orrs	r2, r0
 8003de0:	3340      	adds	r3, #64	; 0x40
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e267      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d075      	beq.n	8003f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e4e:	4b88      	ldr	r3, [pc, #544]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d00c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b85      	ldr	r3, [pc, #532]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d112      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e66:	4b82      	ldr	r3, [pc, #520]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e72:	d10b      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	4b7e      	ldr	r3, [pc, #504]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d05b      	beq.n	8003f38 <HAL_RCC_OscConfig+0x108>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d157      	bne.n	8003f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e242      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x74>
 8003e96:	4b76      	ldr	r3, [pc, #472]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a75      	ldr	r2, [pc, #468]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e01d      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x98>
 8003eae:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6f      	ldr	r2, [pc, #444]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b6d      	ldr	r3, [pc, #436]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6c      	ldr	r2, [pc, #432]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	4b69      	ldr	r3, [pc, #420]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a68      	ldr	r2, [pc, #416]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b66      	ldr	r3, [pc, #408]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a65      	ldr	r2, [pc, #404]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fc88 	bl	80017fc <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fd fc84 	bl	80017fc <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e207      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b5b      	ldr	r3, [pc, #364]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xc0>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fd fc74 	bl	80017fc <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fd fc70 	bl	80017fc <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1f3      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	4b51      	ldr	r3, [pc, #324]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0xe8>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d063      	beq.n	800400e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f46:	4b4a      	ldr	r3, [pc, #296]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d11c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5e:	4b44      	ldr	r3, [pc, #272]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1c7      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4937      	ldr	r1, [pc, #220]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	e03a      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa0:	4b34      	ldr	r3, [pc, #208]	; (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fc29 	bl	80017fc <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fd fc25 	bl	80017fc <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1a8      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4925      	ldr	r1, [pc, #148]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fc08 	bl	80017fc <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fd fc04 	bl	80017fc <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e187      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d036      	beq.n	8004088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x248>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fd fbe8 	bl	80017fc <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004030:	f7fd fbe4 	bl	80017fc <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e167      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x200>
 800404e:	e01b      	b.n	8004088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_OscConfig+0x248>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fd fbd1 	bl	80017fc <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	e00e      	b.n	800407c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405e:	f7fd fbcd 	bl	80017fc <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d907      	bls.n	800407c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e150      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
 8004070:	40023800 	.word	0x40023800
 8004074:	42470000 	.word	0x42470000
 8004078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ea      	bne.n	800405e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8097 	beq.w	80041c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409a:	4b81      	ldr	r3, [pc, #516]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	4b7d      	ldr	r3, [pc, #500]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	4a7c      	ldr	r2, [pc, #496]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40
 80040b6:	4b7a      	ldr	r3, [pc, #488]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b77      	ldr	r3, [pc, #476]	; (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d2:	4b74      	ldr	r3, [pc, #464]	; (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a73      	ldr	r2, [pc, #460]	; (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7fd fb8d 	bl	80017fc <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fd fb89 	bl	80017fc <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e10c      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x2ea>
 800410c:	4b64      	ldr	r3, [pc, #400]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	4a63      	ldr	r2, [pc, #396]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x30c>
 8004122:	4b5f      	ldr	r3, [pc, #380]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a5e      	ldr	r2, [pc, #376]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
 800412e:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a5b      	ldr	r2, [pc, #364]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6713      	str	r3, [r2, #112]	; 0x70
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800413c:	4b58      	ldr	r3, [pc, #352]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a57      	ldr	r2, [pc, #348]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
 8004148:	4b55      	ldr	r3, [pc, #340]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a54      	ldr	r2, [pc, #336]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 0304 	bic.w	r3, r3, #4
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fd fb4e 	bl	80017fc <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	e00a      	b.n	800417a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fd fb4a 	bl	80017fc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0cb      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ee      	beq.n	8004164 <HAL_RCC_OscConfig+0x334>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004188:	f7fd fb38 	bl	80017fc <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fd fb34 	bl	80017fc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0b5      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a6:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ee      	bne.n	8004190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	4a38      	ldr	r2, [pc, #224]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a1 	beq.w	8004310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ce:	4b34      	ldr	r3, [pc, #208]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d05c      	beq.n	8004294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d141      	bne.n	8004266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fd fb08 	bl	80017fc <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fd fb04 	bl	80017fc <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e087      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	491b      	ldr	r1, [pc, #108]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fd fadd 	bl	80017fc <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004246:	f7fd fad9 	bl	80017fc <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e05c      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x416>
 8004264:	e054      	b.n	8004310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fd fac6 	bl	80017fc <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004274:	f7fd fac2 	bl	80017fc <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e045      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x444>
 8004292:	e03d      	b.n	8004310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e038      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40007000 	.word	0x40007000
 80042a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042ac:	4b1b      	ldr	r3, [pc, #108]	; (800431c <HAL_RCC_OscConfig+0x4ec>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d028      	beq.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d121      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d11a      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d111      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	3b01      	subs	r3, #1
 80042f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800

08004320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0cc      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b68      	ldr	r3, [pc, #416]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d90c      	bls.n	800435c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b65      	ldr	r3, [pc, #404]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b63      	ldr	r3, [pc, #396]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0b8      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d020      	beq.n	80043aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004374:	4b59      	ldr	r3, [pc, #356]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a58      	ldr	r2, [pc, #352]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800437e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800438c:	4b53      	ldr	r3, [pc, #332]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4a52      	ldr	r2, [pc, #328]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b50      	ldr	r3, [pc, #320]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	494d      	ldr	r1, [pc, #308]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d044      	beq.n	8004440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d119      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d003      	beq.n	80043de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b3f      	ldr	r3, [pc, #252]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e06f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ee:	4b3b      	ldr	r3, [pc, #236]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e067      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b37      	ldr	r3, [pc, #220]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4934      	ldr	r1, [pc, #208]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004410:	f7fd f9f4 	bl	80017fc <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	e00a      	b.n	800442e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004418:	f7fd f9f0 	bl	80017fc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	; 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 020c 	and.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d1eb      	bne.n	8004418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d20c      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e032      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004474:	4b19      	ldr	r3, [pc, #100]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4916      	ldr	r1, [pc, #88]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	490e      	ldr	r1, [pc, #56]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044a6:	f000 f821 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 80044aa:	4602      	mov	r2, r0
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	490a      	ldr	r1, [pc, #40]	; (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 80044b8:	5ccb      	ldrb	r3, [r1, r3]
 80044ba:	fa22 f303 	lsr.w	r3, r2, r3
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_RCC_ClockConfig+0x1c8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fd f954 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023c00 	.word	0x40023c00
 80044dc:	40023800 	.word	0x40023800
 80044e0:	08009ec0 	.word	0x08009ec0
 80044e4:	20000000 	.word	0x20000000
 80044e8:	20000004 	.word	0x20000004

080044ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b090      	sub	sp, #64	; 0x40
 80044f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
 80044f8:	2300      	movs	r3, #0
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fc:	2300      	movs	r3, #0
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004504:	4b59      	ldr	r3, [pc, #356]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b08      	cmp	r3, #8
 800450e:	d00d      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x40>
 8004510:	2b08      	cmp	r3, #8
 8004512:	f200 80a1 	bhi.w	8004658 <HAL_RCC_GetSysClockFreq+0x16c>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x34>
 800451a:	2b04      	cmp	r3, #4
 800451c:	d003      	beq.n	8004526 <HAL_RCC_GetSysClockFreq+0x3a>
 800451e:	e09b      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b53      	ldr	r3, [pc, #332]	; (8004670 <HAL_RCC_GetSysClockFreq+0x184>)
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004524:	e09b      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004526:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_GetSysClockFreq+0x188>)
 8004528:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800452a:	e098      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800452c:	4b4f      	ldr	r3, [pc, #316]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004536:	4b4d      	ldr	r3, [pc, #308]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d028      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004542:	4b4a      	ldr	r3, [pc, #296]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	2200      	movs	r2, #0
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	627a      	str	r2, [r7, #36]	; 0x24
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004554:	2100      	movs	r1, #0
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_GetSysClockFreq+0x188>)
 8004558:	fb03 f201 	mul.w	r2, r3, r1
 800455c:	2300      	movs	r3, #0
 800455e:	fb00 f303 	mul.w	r3, r0, r3
 8004562:	4413      	add	r3, r2
 8004564:	4a43      	ldr	r2, [pc, #268]	; (8004674 <HAL_RCC_GetSysClockFreq+0x188>)
 8004566:	fba0 1202 	umull	r1, r2, r0, r2
 800456a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800456c:	460a      	mov	r2, r1
 800456e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004572:	4413      	add	r3, r2
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004578:	2200      	movs	r2, #0
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	61fa      	str	r2, [r7, #28]
 800457e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004582:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004586:	f7fc fa9b 	bl	8000ac0 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4613      	mov	r3, r2
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004592:	e053      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004594:	4b35      	ldr	r3, [pc, #212]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	2200      	movs	r2, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	617a      	str	r2, [r7, #20]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045a6:	f04f 0b00 	mov.w	fp, #0
 80045aa:	4652      	mov	r2, sl
 80045ac:	465b      	mov	r3, fp
 80045ae:	f04f 0000 	mov.w	r0, #0
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	0159      	lsls	r1, r3, #5
 80045b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045bc:	0150      	lsls	r0, r2, #5
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	ebb2 080a 	subs.w	r8, r2, sl
 80045c6:	eb63 090b 	sbc.w	r9, r3, fp
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045de:	ebb2 0408 	subs.w	r4, r2, r8
 80045e2:	eb63 0509 	sbc.w	r5, r3, r9
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	00eb      	lsls	r3, r5, #3
 80045f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f4:	00e2      	lsls	r2, r4, #3
 80045f6:	4614      	mov	r4, r2
 80045f8:	461d      	mov	r5, r3
 80045fa:	eb14 030a 	adds.w	r3, r4, sl
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	eb45 030b 	adc.w	r3, r5, fp
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004612:	4629      	mov	r1, r5
 8004614:	028b      	lsls	r3, r1, #10
 8004616:	4621      	mov	r1, r4
 8004618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800461c:	4621      	mov	r1, r4
 800461e:	028a      	lsls	r2, r1, #10
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	2200      	movs	r2, #0
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	60fa      	str	r2, [r7, #12]
 800462c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004630:	f7fc fa46 	bl	8000ac0 <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4613      	mov	r3, r2
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_GetSysClockFreq+0x180>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	3301      	adds	r3, #1
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800464c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004656:	e002      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCC_GetSysClockFreq+0x184>)
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800465c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004660:	4618      	mov	r0, r3
 8004662:	3740      	adds	r7, #64	; 0x40
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	00f42400 	.word	0x00f42400
 8004674:	017d7840 	.word	0x017d7840

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000000 	.word	0x20000000

08004690 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d035      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046b8:	4b67      	ldr	r3, [pc, #412]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046be:	f7fd f89d 	bl	80017fc <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fd f899 	bl	80017fc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0ba      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046d8:	4b60      	ldr	r3, [pc, #384]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	019a      	lsls	r2, r3, #6
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	071b      	lsls	r3, r3, #28
 80046f0:	495a      	ldr	r1, [pc, #360]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046f8:	4b57      	ldr	r3, [pc, #348]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046fe:	f7fd f87d 	bl	80017fc <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004706:	f7fd f879 	bl	80017fc <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e09a      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004718:	4b50      	ldr	r3, [pc, #320]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8083 	beq.w	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	4b49      	ldr	r3, [pc, #292]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4a48      	ldr	r2, [pc, #288]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6413      	str	r3, [r2, #64]	; 0x40
 8004742:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800474e:	4b44      	ldr	r3, [pc, #272]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a43      	ldr	r2, [pc, #268]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004758:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800475a:	f7fd f84f 	bl	80017fc <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004762:	f7fd f84b 	bl	80017fc <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e06c      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004774:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004788:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d02f      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	429a      	cmp	r2, r3
 800479c:	d028      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800479e:	4b2f      	ldr	r3, [pc, #188]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047a8:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ae:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047b4:	4a29      	ldr	r2, [pc, #164]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047ba:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d114      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047c6:	f7fd f819 	bl	80017fc <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ce:	f7fd f815 	bl	80017fc <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e034      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ee      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047fc:	d10d      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047fe:	4b17      	ldr	r3, [pc, #92]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800480e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004812:	4912      	ldr	r1, [pc, #72]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]
 8004818:	e005      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	4a0f      	ldr	r2, [pc, #60]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004820:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004824:	6093      	str	r3, [r2, #8]
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004832:	490a      	ldr	r1, [pc, #40]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7c1a      	ldrb	r2, [r3, #16]
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800484a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	42470068 	.word	0x42470068
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000
 8004864:	42470e40 	.word	0x42470e40
 8004868:	424711e0 	.word	0x424711e0

0800486c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d13e      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800488a:	4b23      	ldr	r3, [pc, #140]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d12f      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048a0:	4b1e      	ldr	r3, [pc, #120]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048a2:	617b      	str	r3, [r7, #20]
          break;
 80048a4:	e02f      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b2:	d108      	bne.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048b4:	4b18      	ldr	r3, [pc, #96]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	4a18      	ldr	r2, [pc, #96]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	e007      	b.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	fb02 f303 	mul.w	r3, r2, r3
 80048e8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f0:	0f1b      	lsrs	r3, r3, #28
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]
          break;
 80048fe:	e002      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
          break;
 8004904:	bf00      	nop
        }
      }
      break;
 8004906:	bf00      	nop
    }
  }
  return frequency;
 8004908:	697b      	ldr	r3, [r7, #20]
}
 800490a:	4618      	mov	r0, r3
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800
 800491c:	00bb8000 	.word	0x00bb8000
 8004920:	017d7840 	.word	0x017d7840
 8004924:	00f42400 	.word	0x00f42400

08004928 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004928:	b084      	sub	sp, #16
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	f107 001c 	add.w	r0, r7, #28
 8004936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2b01      	cmp	r3, #1
 800493e:	d122      	bne.n	8004986 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d105      	bne.n	800497a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f001 fbee 	bl	800615c <USB_CoreReset>
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
 8004984:	e01a      	b.n	80049bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 fbe2 	bl	800615c <USB_CoreReset>
 8004998:	4603      	mov	r3, r0
 800499a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800499c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38
 80049ae:	e005      	b.n	80049bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d10b      	bne.n	80049da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f043 0206 	orr.w	r2, r3, #6
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f043 0220 	orr.w	r2, r3, #32
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049e6:	b004      	add	sp, #16
 80049e8:	4770      	bx	lr
	...

080049ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	4613      	mov	r3, r2
 80049f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d165      	bne.n	8004acc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4a41      	ldr	r2, [pc, #260]	; (8004b08 <USB_SetTurnaroundTime+0x11c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d906      	bls.n	8004a16 <USB_SetTurnaroundTime+0x2a>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4a40      	ldr	r2, [pc, #256]	; (8004b0c <USB_SetTurnaroundTime+0x120>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d202      	bcs.n	8004a16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a10:	230f      	movs	r3, #15
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e062      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a3c      	ldr	r2, [pc, #240]	; (8004b0c <USB_SetTurnaroundTime+0x120>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d306      	bcc.n	8004a2c <USB_SetTurnaroundTime+0x40>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4a3b      	ldr	r2, [pc, #236]	; (8004b10 <USB_SetTurnaroundTime+0x124>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d202      	bcs.n	8004a2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a26:	230e      	movs	r3, #14
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e057      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4a38      	ldr	r2, [pc, #224]	; (8004b10 <USB_SetTurnaroundTime+0x124>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d306      	bcc.n	8004a42 <USB_SetTurnaroundTime+0x56>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a37      	ldr	r2, [pc, #220]	; (8004b14 <USB_SetTurnaroundTime+0x128>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d202      	bcs.n	8004a42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a3c:	230d      	movs	r3, #13
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e04c      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4a33      	ldr	r2, [pc, #204]	; (8004b14 <USB_SetTurnaroundTime+0x128>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d306      	bcc.n	8004a58 <USB_SetTurnaroundTime+0x6c>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a32      	ldr	r2, [pc, #200]	; (8004b18 <USB_SetTurnaroundTime+0x12c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d802      	bhi.n	8004a58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a52:	230c      	movs	r3, #12
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e041      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <USB_SetTurnaroundTime+0x12c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d906      	bls.n	8004a6e <USB_SetTurnaroundTime+0x82>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <USB_SetTurnaroundTime+0x130>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d802      	bhi.n	8004a6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a68:	230b      	movs	r3, #11
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	e036      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <USB_SetTurnaroundTime+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d906      	bls.n	8004a84 <USB_SetTurnaroundTime+0x98>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4a29      	ldr	r2, [pc, #164]	; (8004b20 <USB_SetTurnaroundTime+0x134>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d802      	bhi.n	8004a84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a7e:	230a      	movs	r3, #10
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e02b      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4a26      	ldr	r2, [pc, #152]	; (8004b20 <USB_SetTurnaroundTime+0x134>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d906      	bls.n	8004a9a <USB_SetTurnaroundTime+0xae>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <USB_SetTurnaroundTime+0x138>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d202      	bcs.n	8004a9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a94:	2309      	movs	r3, #9
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e020      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <USB_SetTurnaroundTime+0x138>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d306      	bcc.n	8004ab0 <USB_SetTurnaroundTime+0xc4>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <USB_SetTurnaroundTime+0x13c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d802      	bhi.n	8004ab0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004aaa:	2308      	movs	r3, #8
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e015      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <USB_SetTurnaroundTime+0x13c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d906      	bls.n	8004ac6 <USB_SetTurnaroundTime+0xda>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4a1c      	ldr	r2, [pc, #112]	; (8004b2c <USB_SetTurnaroundTime+0x140>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d202      	bcs.n	8004ac6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ac0:	2307      	movs	r3, #7
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e00a      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ac6:	2306      	movs	r3, #6
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	e007      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d102      	bne.n	8004ad8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ad2:	2309      	movs	r3, #9
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	e001      	b.n	8004adc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ad8:	2309      	movs	r3, #9
 8004ada:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	029b      	lsls	r3, r3, #10
 8004af0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004af4:	431a      	orrs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	00d8acbf 	.word	0x00d8acbf
 8004b0c:	00e4e1c0 	.word	0x00e4e1c0
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	01067380 	.word	0x01067380
 8004b18:	011a499f 	.word	0x011a499f
 8004b1c:	01312cff 	.word	0x01312cff
 8004b20:	014ca43f 	.word	0x014ca43f
 8004b24:	016e3600 	.word	0x016e3600
 8004b28:	01a6ab1f 	.word	0x01a6ab1f
 8004b2c:	01e84800 	.word	0x01e84800

08004b30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f043 0201 	orr.w	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d115      	bne.n	8004bc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	f7fc fe36 	bl	8001814 <HAL_Delay>
      ms++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f001 fa45 	bl	800603e <USB_GetMode>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d01e      	beq.n	8004bf8 <USB_SetCurrentMode+0x84>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b31      	cmp	r3, #49	; 0x31
 8004bbe:	d9f0      	bls.n	8004ba2 <USB_SetCurrentMode+0x2e>
 8004bc0:	e01a      	b.n	8004bf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d115      	bne.n	8004bf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f7fc fe1d 	bl	8001814 <HAL_Delay>
      ms++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f001 fa2c 	bl	800603e <USB_GetMode>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <USB_SetCurrentMode+0x84>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b31      	cmp	r3, #49	; 0x31
 8004bf0:	d9f0      	bls.n	8004bd4 <USB_SetCurrentMode+0x60>
 8004bf2:	e001      	b.n	8004bf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e005      	b.n	8004c04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b32      	cmp	r3, #50	; 0x32
 8004bfc:	d101      	bne.n	8004c02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e009      	b.n	8004c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3340      	adds	r3, #64	; 0x40
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	2200      	movs	r2, #0
 8004c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b0e      	cmp	r3, #14
 8004c44:	d9f2      	bls.n	8004c2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d11c      	bne.n	8004c86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
 8004c84:	e00b      	b.n	8004c9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	461a      	mov	r2, r3
 8004cba:	680b      	ldr	r3, [r1, #0]
 8004cbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d10c      	bne.n	8004cde <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d104      	bne.n	8004cd4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cca:	2100      	movs	r1, #0
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f965 	bl	8004f9c <USB_SetDevSpeed>
 8004cd2:	e008      	b.n	8004ce6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f960 	bl	8004f9c <USB_SetDevSpeed>
 8004cdc:	e003      	b.n	8004ce6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cde:	2103      	movs	r1, #3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f95b 	bl	8004f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ce6:	2110      	movs	r1, #16
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f8f3 	bl	8004ed4 <USB_FlushTxFifo>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f91f 	bl	8004f3c <USB_FlushRxFifo>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	461a      	mov	r2, r3
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	e043      	b.n	8004dba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d48:	d118      	bne.n	8004d7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e013      	b.n	8004d8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	461a      	mov	r2, r3
 8004d74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e008      	b.n	8004d8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	461a      	mov	r2, r3
 8004dae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004db2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	3301      	adds	r3, #1
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3b7      	bcc.n	8004d32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e043      	b.n	8004e50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dde:	d118      	bne.n	8004e12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	461a      	mov	r2, r3
 8004df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e013      	b.n	8004e24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e008      	b.n	8004e24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e42:	461a      	mov	r2, r3
 8004e44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d3b7      	bcc.n	8004dc8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f043 0210 	orr.w	r2, r3, #16
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <USB_DevInit+0x2c4>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f043 0208 	orr.w	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d107      	bne.n	8004ec0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ecc:	b004      	add	sp, #16
 8004ece:	4770      	bx	lr
 8004ed0:	803c3800 	.word	0x803c3800

08004ed4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <USB_FlushTxFifo+0x64>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e01b      	b.n	8004f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	daf2      	bge.n	8004ee2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	019b      	lsls	r3, r3, #6
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <USB_FlushTxFifo+0x64>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e006      	b.n	8004f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d0f0      	beq.n	8004f0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	00030d40 	.word	0x00030d40

08004f3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <USB_FlushRxFifo+0x5c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e018      	b.n	8004f8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	daf2      	bge.n	8004f48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2210      	movs	r2, #16
 8004f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <USB_FlushRxFifo+0x5c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e006      	b.n	8004f8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d0f0      	beq.n	8004f6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	00030d40 	.word	0x00030d40

08004f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0306 	and.w	r3, r3, #6
 8004fe6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
 8004ff2:	e00a      	b.n	800500a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d002      	beq.n	8005000 <USB_GetDevSpeed+0x32>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b06      	cmp	r3, #6
 8004ffe:	d102      	bne.n	8005006 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005000:	2302      	movs	r3, #2
 8005002:	75fb      	strb	r3, [r7, #23]
 8005004:	e001      	b.n	800500a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005006:	230f      	movs	r3, #15
 8005008:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800500a:	7dfb      	ldrb	r3, [r7, #23]
}
 800500c:	4618      	mov	r0, r3
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d13a      	bne.n	80050aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	b29b      	uxth	r3, r3
 800504c:	68f9      	ldr	r1, [r7, #12]
 800504e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005052:	4313      	orrs	r3, r2
 8005054:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d155      	bne.n	8005118 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	791b      	ldrb	r3, [r3, #4]
 8005086:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005088:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005090:	4313      	orrs	r3, r2
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	e036      	b.n	8005118 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	2101      	movs	r1, #1
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	041b      	lsls	r3, r3, #16
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d11a      	bne.n	8005118 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	791b      	ldrb	r3, [r3, #4]
 80050fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050fe:	430b      	orrs	r3, r1
 8005100:	4313      	orrs	r3, r2
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005116:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d161      	bne.n	8005208 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800515a:	d11f      	bne.n	800519c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800517a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800519a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	2101      	movs	r1, #1
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	68f9      	ldr	r1, [r7, #12]
 80051b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051bc:	4013      	ands	r3, r2
 80051be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e0:	4013      	ands	r3, r2
 80051e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	0159      	lsls	r1, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	440b      	add	r3, r1
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	4619      	mov	r1, r3
 8005200:	4b35      	ldr	r3, [pc, #212]	; (80052d8 <USB_DeactivateEndpoint+0x1b0>)
 8005202:	4013      	ands	r3, r2
 8005204:	600b      	str	r3, [r1, #0]
 8005206:	e060      	b.n	80052ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521e:	d11f      	bne.n	8005260 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800523e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800525e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	43db      	mvns	r3, r3
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005280:	4013      	ands	r3, r2
 8005282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	2101      	movs	r1, #1
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	041b      	lsls	r3, r3, #16
 800529c:	43db      	mvns	r3, r3
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a4:	4013      	ands	r3, r2
 80052a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	0159      	lsls	r1, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	440b      	add	r3, r1
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	4619      	mov	r1, r3
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <USB_DeactivateEndpoint+0x1b4>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	ec337800 	.word	0xec337800
 80052dc:	eff37800 	.word	0xeff37800

080052e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	f040 815c 	bne.w	80055ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d132      	bne.n	8005370 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800532c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800534c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005368:	0cdb      	lsrs	r3, r3, #19
 800536a:	04db      	lsls	r3, r3, #19
 800536c:	6113      	str	r3, [r2, #16]
 800536e:	e074      	b.n	800545a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538a:	0cdb      	lsrs	r3, r3, #19
 800538c:	04db      	lsls	r3, r3, #19
 800538e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	440b      	add	r3, r1
 80053cc:	1e59      	subs	r1, r3, #1
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80053d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053d8:	4b9d      	ldr	r3, [pc, #628]	; (8005650 <USB_EPStartXfer+0x370>)
 80053da:	400b      	ands	r3, r1
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	0148      	lsls	r0, r1, #5
 80053e0:	69f9      	ldr	r1, [r7, #28]
 80053e2:	4401      	add	r1, r0
 80053e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053e8:	4313      	orrs	r3, r2
 80053ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005402:	69b9      	ldr	r1, [r7, #24]
 8005404:	0148      	lsls	r0, r1, #5
 8005406:	69f9      	ldr	r1, [r7, #28]
 8005408:	4401      	add	r1, r0
 800540a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800540e:	4313      	orrs	r3, r2
 8005410:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	791b      	ldrb	r3, [r3, #4]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d11f      	bne.n	800545a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005434:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005438:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	440a      	add	r2, r1
 8005450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005454:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005458:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d14b      	bne.n	80054f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005474:	461a      	mov	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	791b      	ldrb	r3, [r3, #4]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d128      	bne.n	80054d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d110      	bne.n	80054b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	e00f      	b.n	80054d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	0151      	lsls	r1, r2, #5
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	440a      	add	r2, r1
 80054cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e133      	b.n	8005760 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005516:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	791b      	ldrb	r3, [r3, #4]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d015      	beq.n	800554c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 811b 	beq.w	8005760 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	2101      	movs	r1, #1
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	69f9      	ldr	r1, [r7, #28]
 8005542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005546:	4313      	orrs	r3, r2
 8005548:	634b      	str	r3, [r1, #52]	; 0x34
 800554a:	e109      	b.n	8005760 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d110      	bne.n	800557e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e00f      	b.n	800559e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6919      	ldr	r1, [r3, #16]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	b298      	uxth	r0, r3
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4603      	mov	r3, r0
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fade 	bl	8005b74 <USB_WritePacket>
 80055b8:	e0d2      	b.n	8005760 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	0cdb      	lsrs	r3, r3, #19
 80055d6:	04db      	lsls	r3, r3, #19
 80055d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d126      	bne.n	8005654 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800561c:	69b9      	ldr	r1, [r7, #24]
 800561e:	0148      	lsls	r0, r1, #5
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	4401      	add	r1, r0
 8005624:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800564a:	6113      	str	r3, [r2, #16]
 800564c:	e03a      	b.n	80056c4 <USB_EPStartXfer+0x3e4>
 800564e:	bf00      	nop
 8005650:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4413      	add	r3, r2
 800565e:	1e5a      	subs	r2, r3, #1
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	8afa      	ldrh	r2, [r7, #22]
 8005670:	fb03 f202 	mul.w	r2, r3, r2
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	8afb      	ldrh	r3, [r7, #22]
 8005688:	04d9      	lsls	r1, r3, #19
 800568a:	4b38      	ldr	r3, [pc, #224]	; (800576c <USB_EPStartXfer+0x48c>)
 800568c:	400b      	ands	r3, r1
 800568e:	69b9      	ldr	r1, [r7, #24]
 8005690:	0148      	lsls	r0, r1, #5
 8005692:	69f9      	ldr	r1, [r7, #28]
 8005694:	4401      	add	r1, r0
 8005696:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800569a:	4313      	orrs	r3, r2
 800569c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b4:	69b9      	ldr	r1, [r7, #24]
 80056b6:	0148      	lsls	r0, r1, #5
 80056b8:	69f9      	ldr	r1, [r7, #28]
 80056ba:	4401      	add	r1, r0
 80056bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056c0:	4313      	orrs	r3, r2
 80056c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10d      	bne.n	80056e6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6919      	ldr	r1, [r3, #16]
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	460a      	mov	r2, r1
 80056e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	791b      	ldrb	r3, [r3, #4]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d128      	bne.n	8005740 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d110      	bne.n	8005720 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	e00f      	b.n	8005740 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	440a      	add	r2, r1
 8005736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800575e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	1ff80000 	.word	0x1ff80000

08005770 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b01      	cmp	r3, #1
 800578e:	f040 80ce 	bne.w	800592e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d132      	bne.n	8005800 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f8:	0cdb      	lsrs	r3, r3, #19
 80057fa:	04db      	lsls	r3, r3, #19
 80057fc:	6113      	str	r3, [r2, #16]
 80057fe:	e04e      	b.n	800589e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581a:	0cdb      	lsrs	r3, r3, #19
 800581c:	04db      	lsls	r3, r3, #19
 800581e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800583e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005842:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	429a      	cmp	r2, r3
 800584e:	d903      	bls.n	8005858 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005872:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	0148      	lsls	r0, r1, #5
 8005892:	6979      	ldr	r1, [r7, #20]
 8005894:	4401      	add	r1, r0
 8005896:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800589a:	4313      	orrs	r3, r2
 800589c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d11e      	bne.n	80058e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	461a      	mov	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	e097      	b.n	8005a12 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005900:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8083 	beq.w	8005a12 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	6979      	ldr	r1, [r7, #20]
 8005924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005928:	4313      	orrs	r3, r2
 800592a:	634b      	str	r3, [r1, #52]	; 0x34
 800592c:	e071      	b.n	8005a12 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005948:	0cdb      	lsrs	r3, r3, #19
 800594a:	04db      	lsls	r3, r3, #19
 800594c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800596c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005970:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c0:	6939      	ldr	r1, [r7, #16]
 80059c2:	0148      	lsls	r0, r1, #5
 80059c4:	6979      	ldr	r1, [r7, #20]
 80059c6:	4401      	add	r1, r0
 80059c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059cc:	4313      	orrs	r3, r2
 80059ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10d      	bne.n	80059f2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6919      	ldr	r1, [r3, #16]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	460a      	mov	r2, r1
 80059f0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d14a      	bne.n	8005ad4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a56:	f040 8086 	bne.w	8005b66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f242 7210 	movw	r2, #10000	; 0x2710
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d902      	bls.n	8005ab8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ab6:	e056      	b.n	8005b66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ad0:	d0e7      	beq.n	8005aa2 <USB_EPStopXfer+0x82>
 8005ad2:	e048      	b.n	8005b66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aec:	d13b      	bne.n	8005b66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	7812      	ldrb	r2, [r2, #0]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d902      	bls.n	8005b4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
          break;
 8005b4a:	e00c      	b.n	8005b66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b64:	d0e7      	beq.n	8005b36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	; 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	4611      	mov	r1, r2
 8005b80:	461a      	mov	r2, r3
 8005b82:	460b      	mov	r3, r1
 8005b84:	71fb      	strb	r3, [r7, #7]
 8005b86:	4613      	mov	r3, r2
 8005b88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d123      	bne.n	8005be2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b9a:	88bb      	ldrh	r3, [r7, #4]
 8005b9c:	3303      	adds	r3, #3
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e018      	b.n	8005bda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	031a      	lsls	r2, r3, #12
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d3e2      	bcc.n	8005ba8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3724      	adds	r7, #36	; 0x24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b08b      	sub	sp, #44	; 0x2c
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	089b      	lsrs	r3, r3, #2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	e014      	b.n	8005c46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	3301      	adds	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	3301      	adds	r3, #1
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	3301      	adds	r3, #1
 8005c44:	623b      	str	r3, [r7, #32]
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d3e6      	bcc.n	8005c1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c4e:	8bfb      	ldrh	r3, [r7, #30]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01e      	beq.n	8005c92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f107 0310 	add.w	r3, r7, #16
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	701a      	strb	r2, [r3, #0]
      i++;
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	3301      	adds	r3, #1
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c86:	8bfb      	ldrh	r3, [r7, #30]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c8c:	8bfb      	ldrh	r3, [r7, #30]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1ea      	bne.n	8005c68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	372c      	adds	r7, #44	; 0x2c
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d12c      	bne.n	8005d16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db12      	blt.n	8005cf4 <USB_EPSetStall+0x54>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00f      	beq.n	8005cf4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cf2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	e02b      	b.n	8005d6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	db12      	blt.n	8005d4e <USB_EPSetStall+0xae>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d128      	bne.n	8005dea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005db6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	791b      	ldrb	r3, [r3, #4]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d003      	beq.n	8005dc8 <USB_EPClearStall+0x4c>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	791b      	ldrb	r3, [r3, #4]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d138      	bne.n	8005e3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e027      	b.n	8005e3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	791b      	ldrb	r3, [r3, #4]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d003      	beq.n	8005e1a <USB_EPClearStall+0x9e>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	791b      	ldrb	r3, [r3, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d10f      	bne.n	8005e3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e7c:	68f9      	ldr	r1, [r7, #12]
 8005e7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e82:	4313      	orrs	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec2:	f023 0302 	bic.w	r3, r3, #2
 8005ec6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f04:	f043 0302 	orr.w	r3, r3, #2
 8005f08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f30:	68fb      	ldr	r3, [r7, #12]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	0c1b      	lsrs	r3, r3, #16
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	4013      	ands	r3, r2
 8005f94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	b29b      	uxth	r3, r3
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b087      	sub	sp, #28
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006006:	78fb      	ldrb	r3, [r7, #3]
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	fa22 f303 	lsr.w	r3, r2, r3
 8006012:	01db      	lsls	r3, r3, #7
 8006014:	b2db      	uxtb	r3, r3
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4013      	ands	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006030:	68bb      	ldr	r3, [r7, #8]
}
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0301 	and.w	r3, r3, #1
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006078:	f023 0307 	bic.w	r3, r3, #7
 800607c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800608c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006090:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	460b      	mov	r3, r1
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	333c      	adds	r3, #60	; 0x3c
 80060b6:	3304      	adds	r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4a26      	ldr	r2, [pc, #152]	; (8006158 <USB_EP0_OutStart+0xb8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d90a      	bls.n	80060da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d4:	d101      	bne.n	80060da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e037      	b.n	800614a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006108:	f043 0318 	orr.w	r3, r3, #24
 800610c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006120:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006122:	7afb      	ldrb	r3, [r7, #11]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d10f      	bne.n	8006148 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	461a      	mov	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006142:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	4f54300a 	.word	0x4f54300a

0800615c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <USB_CoreReset+0x64>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e01b      	b.n	80061b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	daf2      	bge.n	8006168 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f043 0201 	orr.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <USB_CoreReset+0x64>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e006      	b.n	80061b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d0f0      	beq.n	8006192 <USB_CoreReset+0x36>

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	00030d40 	.word	0x00030d40

080061c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061d4:	f002 fca0 	bl	8008b18 <USBD_static_malloc>
 80061d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	32b0      	adds	r2, #176	; 0xb0
 80061ea:	2100      	movs	r1, #0
 80061ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80061f0:	2302      	movs	r3, #2
 80061f2:	e0d4      	b.n	800639e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80061f4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80061f8:	2100      	movs	r1, #0
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f002 fd08 	bl	8008c10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32b0      	adds	r2, #176	; 0xb0
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	32b0      	adds	r2, #176	; 0xb0
 800621a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	7c1b      	ldrb	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d138      	bne.n	800629e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800622c:	4b5e      	ldr	r3, [pc, #376]	; (80063a8 <USBD_CDC_Init+0x1e4>)
 800622e:	7819      	ldrb	r1, [r3, #0]
 8006230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006234:	2202      	movs	r2, #2
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f002 fb4b 	bl	80088d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800623c:	4b5a      	ldr	r3, [pc, #360]	; (80063a8 <USBD_CDC_Init+0x1e4>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 020f 	and.w	r2, r3, #15
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	3324      	adds	r3, #36	; 0x24
 8006252:	2201      	movs	r2, #1
 8006254:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006256:	4b55      	ldr	r3, [pc, #340]	; (80063ac <USBD_CDC_Init+0x1e8>)
 8006258:	7819      	ldrb	r1, [r3, #0]
 800625a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800625e:	2202      	movs	r2, #2
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f002 fb36 	bl	80088d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006266:	4b51      	ldr	r3, [pc, #324]	; (80063ac <USBD_CDC_Init+0x1e8>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 020f 	and.w	r2, r3, #15
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800627e:	2201      	movs	r2, #1
 8006280:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006282:	4b4b      	ldr	r3, [pc, #300]	; (80063b0 <USBD_CDC_Init+0x1ec>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f003 020f 	and.w	r2, r3, #15
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	3326      	adds	r3, #38	; 0x26
 8006298:	2210      	movs	r2, #16
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e035      	b.n	800630a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800629e:	4b42      	ldr	r3, [pc, #264]	; (80063a8 <USBD_CDC_Init+0x1e4>)
 80062a0:	7819      	ldrb	r1, [r3, #0]
 80062a2:	2340      	movs	r3, #64	; 0x40
 80062a4:	2202      	movs	r2, #2
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f002 fb13 	bl	80088d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062ac:	4b3e      	ldr	r3, [pc, #248]	; (80063a8 <USBD_CDC_Init+0x1e4>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	f003 020f 	and.w	r2, r3, #15
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	3324      	adds	r3, #36	; 0x24
 80062c2:	2201      	movs	r2, #1
 80062c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062c6:	4b39      	ldr	r3, [pc, #228]	; (80063ac <USBD_CDC_Init+0x1e8>)
 80062c8:	7819      	ldrb	r1, [r3, #0]
 80062ca:	2340      	movs	r3, #64	; 0x40
 80062cc:	2202      	movs	r2, #2
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f002 faff 	bl	80088d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062d4:	4b35      	ldr	r3, [pc, #212]	; (80063ac <USBD_CDC_Init+0x1e8>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062ec:	2201      	movs	r2, #1
 80062ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80062f0:	4b2f      	ldr	r3, [pc, #188]	; (80063b0 <USBD_CDC_Init+0x1ec>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	f003 020f 	and.w	r2, r3, #15
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	3326      	adds	r3, #38	; 0x26
 8006306:	2210      	movs	r2, #16
 8006308:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800630a:	4b29      	ldr	r3, [pc, #164]	; (80063b0 <USBD_CDC_Init+0x1ec>)
 800630c:	7819      	ldrb	r1, [r3, #0]
 800630e:	2308      	movs	r3, #8
 8006310:	2203      	movs	r2, #3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f002 fadd 	bl	80088d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <USBD_CDC_Init+0x1ec>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	3324      	adds	r3, #36	; 0x24
 800632e:	2201      	movs	r2, #1
 8006330:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	33b0      	adds	r3, #176	; 0xb0
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006368:	2302      	movs	r3, #2
 800636a:	e018      	b.n	800639e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7c1b      	ldrb	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006374:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <USBD_CDC_Init+0x1e8>)
 8006376:	7819      	ldrb	r1, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800637e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f002 fb94 	bl	8008ab0 <USBD_LL_PrepareReceive>
 8006388:	e008      	b.n	800639c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800638a:	4b08      	ldr	r3, [pc, #32]	; (80063ac <USBD_CDC_Init+0x1e8>)
 800638c:	7819      	ldrb	r1, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006394:	2340      	movs	r3, #64	; 0x40
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f002 fb8a 	bl	8008ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000093 	.word	0x20000093
 80063ac:	20000094 	.word	0x20000094
 80063b0:	20000095 	.word	0x20000095

080063b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80063c0:	4b3a      	ldr	r3, [pc, #232]	; (80064ac <USBD_CDC_DeInit+0xf8>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f002 faa9 	bl	800891e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80063cc:	4b37      	ldr	r3, [pc, #220]	; (80064ac <USBD_CDC_DeInit+0xf8>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f003 020f 	and.w	r2, r3, #15
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3324      	adds	r3, #36	; 0x24
 80063e2:	2200      	movs	r2, #0
 80063e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80063e6:	4b32      	ldr	r3, [pc, #200]	; (80064b0 <USBD_CDC_DeInit+0xfc>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f002 fa96 	bl	800891e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80063f2:	4b2f      	ldr	r3, [pc, #188]	; (80064b0 <USBD_CDC_DeInit+0xfc>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f003 020f 	and.w	r2, r3, #15
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800640a:	2200      	movs	r2, #0
 800640c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800640e:	4b29      	ldr	r3, [pc, #164]	; (80064b4 <USBD_CDC_DeInit+0x100>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f002 fa82 	bl	800891e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800641a:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <USBD_CDC_DeInit+0x100>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f003 020f 	and.w	r2, r3, #15
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	3324      	adds	r3, #36	; 0x24
 8006430:	2200      	movs	r2, #0
 8006432:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006434:	4b1f      	ldr	r3, [pc, #124]	; (80064b4 <USBD_CDC_DeInit+0x100>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 020f 	and.w	r2, r3, #15
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	3326      	adds	r3, #38	; 0x26
 800644a:	2200      	movs	r2, #0
 800644c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	32b0      	adds	r2, #176	; 0xb0
 8006458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01f      	beq.n	80064a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	33b0      	adds	r3, #176	; 0xb0
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	32b0      	adds	r2, #176	; 0xb0
 800647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006482:	4618      	mov	r0, r3
 8006484:	f002 fb56 	bl	8008b34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	32b0      	adds	r2, #176	; 0xb0
 8006492:	2100      	movs	r1, #0
 8006494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000093 	.word	0x20000093
 80064b0:	20000094 	.word	0x20000094
 80064b4:	20000095 	.word	0x20000095

080064b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	32b0      	adds	r2, #176	; 0xb0
 80064cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e0bf      	b.n	8006668 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d050      	beq.n	8006596 <USBD_CDC_Setup+0xde>
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	f040 80af 	bne.w	8006658 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	88db      	ldrh	r3, [r3, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d03a      	beq.n	8006578 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	b25b      	sxtb	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	da1b      	bge.n	8006544 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	33b0      	adds	r3, #176	; 0xb0
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006522:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	88d2      	ldrh	r2, [r2, #6]
 8006528:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	88db      	ldrh	r3, [r3, #6]
 800652e:	2b07      	cmp	r3, #7
 8006530:	bf28      	it	cs
 8006532:	2307      	movcs	r3, #7
 8006534:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	89fa      	ldrh	r2, [r7, #14]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fd89 	bl	8008054 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006542:	e090      	b.n	8006666 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	785a      	ldrb	r2, [r3, #1]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	88db      	ldrh	r3, [r3, #6]
 8006552:	2b3f      	cmp	r3, #63	; 0x3f
 8006554:	d803      	bhi.n	800655e <USBD_CDC_Setup+0xa6>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	88db      	ldrh	r3, [r3, #6]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	e000      	b.n	8006560 <USBD_CDC_Setup+0xa8>
 800655e:	2240      	movs	r2, #64	; 0x40
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006566:	6939      	ldr	r1, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800656e:	461a      	mov	r2, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fd9b 	bl	80080ac <USBD_CtlPrepareRx>
      break;
 8006576:	e076      	b.n	8006666 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	33b0      	adds	r3, #176	; 0xb0
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	7850      	ldrb	r0, [r2, #1]
 800658e:	2200      	movs	r2, #0
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	4798      	blx	r3
      break;
 8006594:	e067      	b.n	8006666 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	2b0b      	cmp	r3, #11
 800659c:	d851      	bhi.n	8006642 <USBD_CDC_Setup+0x18a>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <USBD_CDC_Setup+0xec>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065d5 	.word	0x080065d5
 80065a8:	08006651 	.word	0x08006651
 80065ac:	08006643 	.word	0x08006643
 80065b0:	08006643 	.word	0x08006643
 80065b4:	08006643 	.word	0x08006643
 80065b8:	08006643 	.word	0x08006643
 80065bc:	08006643 	.word	0x08006643
 80065c0:	08006643 	.word	0x08006643
 80065c4:	08006643 	.word	0x08006643
 80065c8:	08006643 	.word	0x08006643
 80065cc:	080065ff 	.word	0x080065ff
 80065d0:	08006629 	.word	0x08006629
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d107      	bne.n	80065f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065e0:	f107 030a 	add.w	r3, r7, #10
 80065e4:	2202      	movs	r2, #2
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fd33 	bl	8008054 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065ee:	e032      	b.n	8006656 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 fcbd 	bl	8007f72 <USBD_CtlError>
            ret = USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	75fb      	strb	r3, [r7, #23]
          break;
 80065fc:	e02b      	b.n	8006656 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b03      	cmp	r3, #3
 8006608:	d107      	bne.n	800661a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800660a:	f107 030d 	add.w	r3, r7, #13
 800660e:	2201      	movs	r2, #1
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 fd1e 	bl	8008054 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006618:	e01d      	b.n	8006656 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 fca8 	bl	8007f72 <USBD_CtlError>
            ret = USBD_FAIL;
 8006622:	2303      	movs	r3, #3
 8006624:	75fb      	strb	r3, [r7, #23]
          break;
 8006626:	e016      	b.n	8006656 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b03      	cmp	r3, #3
 8006632:	d00f      	beq.n	8006654 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fc9b 	bl	8007f72 <USBD_CtlError>
            ret = USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006640:	e008      	b.n	8006654 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fc94 	bl	8007f72 <USBD_CtlError>
          ret = USBD_FAIL;
 800664a:	2303      	movs	r3, #3
 800664c:	75fb      	strb	r3, [r7, #23]
          break;
 800664e:	e002      	b.n	8006656 <USBD_CDC_Setup+0x19e>
          break;
 8006650:	bf00      	nop
 8006652:	e008      	b.n	8006666 <USBD_CDC_Setup+0x1ae>
          break;
 8006654:	bf00      	nop
      }
      break;
 8006656:	e006      	b.n	8006666 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 fc89 	bl	8007f72 <USBD_CtlError>
      ret = USBD_FAIL;
 8006660:	2303      	movs	r3, #3
 8006662:	75fb      	strb	r3, [r7, #23]
      break;
 8006664:	bf00      	nop
  }

  return (uint8_t)ret;
 8006666:	7dfb      	ldrb	r3, [r7, #23]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006682:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	32b0      	adds	r2, #176	; 0xb0
 800668e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006696:	2303      	movs	r3, #3
 8006698:	e065      	b.n	8006766 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	32b0      	adds	r2, #176	; 0xb0
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	f003 020f 	and.w	r2, r3, #15
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	3318      	adds	r3, #24
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d02f      	beq.n	8006724 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	f003 020f 	and.w	r2, r3, #15
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	3318      	adds	r3, #24
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	f003 010f 	and.w	r1, r3, #15
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	460b      	mov	r3, r1
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	440b      	add	r3, r1
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4403      	add	r3, r0
 80066ec:	3348      	adds	r3, #72	; 0x48
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d112      	bne.n	8006724 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	f003 020f 	and.w	r2, r3, #15
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	3318      	adds	r3, #24
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006716:	78f9      	ldrb	r1, [r7, #3]
 8006718:	2300      	movs	r3, #0
 800671a:	2200      	movs	r2, #0
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f002 f9a6 	bl	8008a6e <USBD_LL_Transmit>
 8006722:	e01f      	b.n	8006764 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	33b0      	adds	r3, #176	; 0xb0
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d010      	beq.n	8006764 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	33b0      	adds	r3, #176	; 0xb0
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	32b0      	adds	r2, #176	; 0xb0
 8006784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006788:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	32b0      	adds	r2, #176	; 0xb0
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800679c:	2303      	movs	r3, #3
 800679e:	e01a      	b.n	80067d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f002 f9a4 	bl	8008af2 <USBD_LL_GetRxDataSize>
 80067aa:	4602      	mov	r2, r0
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	33b0      	adds	r3, #176	; 0xb0
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067d0:	4611      	mov	r1, r2
 80067d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	32b0      	adds	r2, #176	; 0xb0
 80067f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e025      	b.n	800684c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	33b0      	adds	r3, #176	; 0xb0
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01a      	beq.n	800684a <USBD_CDC_EP0_RxReady+0x6c>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800681a:	2bff      	cmp	r3, #255	; 0xff
 800681c:	d015      	beq.n	800684a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	33b0      	adds	r3, #176	; 0xb0
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006836:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800683e:	b292      	uxth	r2, r2
 8006840:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	22ff      	movs	r2, #255	; 0xff
 8006846:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800685c:	2182      	movs	r1, #130	; 0x82
 800685e:	4818      	ldr	r0, [pc, #96]	; (80068c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006860:	f000 fd4f 	bl	8007302 <USBD_GetEpDesc>
 8006864:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006866:	2101      	movs	r1, #1
 8006868:	4815      	ldr	r0, [pc, #84]	; (80068c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800686a:	f000 fd4a 	bl	8007302 <USBD_GetEpDesc>
 800686e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006870:	2181      	movs	r1, #129	; 0x81
 8006872:	4813      	ldr	r0, [pc, #76]	; (80068c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006874:	f000 fd45 	bl	8007302 <USBD_GetEpDesc>
 8006878:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2210      	movs	r2, #16
 8006884:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2200      	movs	r2, #0
 8006890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006894:	711a      	strb	r2, [r3, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d006      	beq.n	80068ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068a8:	711a      	strb	r2, [r3, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2243      	movs	r2, #67	; 0x43
 80068b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068b4:	4b02      	ldr	r3, [pc, #8]	; (80068c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000050 	.word	0x20000050

080068c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068cc:	2182      	movs	r1, #130	; 0x82
 80068ce:	4818      	ldr	r0, [pc, #96]	; (8006930 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068d0:	f000 fd17 	bl	8007302 <USBD_GetEpDesc>
 80068d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068d6:	2101      	movs	r1, #1
 80068d8:	4815      	ldr	r0, [pc, #84]	; (8006930 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068da:	f000 fd12 	bl	8007302 <USBD_GetEpDesc>
 80068de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068e0:	2181      	movs	r1, #129	; 0x81
 80068e2:	4813      	ldr	r0, [pc, #76]	; (8006930 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068e4:	f000 fd0d 	bl	8007302 <USBD_GetEpDesc>
 80068e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2210      	movs	r2, #16
 80068f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d006      	beq.n	800690a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2200      	movs	r2, #0
 8006900:	711a      	strb	r2, [r3, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f042 0202 	orr.w	r2, r2, #2
 8006908:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d006      	beq.n	800691e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	711a      	strb	r2, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f042 0202 	orr.w	r2, r2, #2
 800691c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2243      	movs	r2, #67	; 0x43
 8006922:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006924:	4b02      	ldr	r3, [pc, #8]	; (8006930 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000050 	.word	0x20000050

08006934 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800693c:	2182      	movs	r1, #130	; 0x82
 800693e:	4818      	ldr	r0, [pc, #96]	; (80069a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006940:	f000 fcdf 	bl	8007302 <USBD_GetEpDesc>
 8006944:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006946:	2101      	movs	r1, #1
 8006948:	4815      	ldr	r0, [pc, #84]	; (80069a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800694a:	f000 fcda 	bl	8007302 <USBD_GetEpDesc>
 800694e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006950:	2181      	movs	r1, #129	; 0x81
 8006952:	4813      	ldr	r0, [pc, #76]	; (80069a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006954:	f000 fcd5 	bl	8007302 <USBD_GetEpDesc>
 8006958:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2210      	movs	r2, #16
 8006964:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d006      	beq.n	800697a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2200      	movs	r2, #0
 8006970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006974:	711a      	strb	r2, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006988:	711a      	strb	r2, [r3, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2243      	movs	r2, #67	; 0x43
 8006992:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006994:	4b02      	ldr	r3, [pc, #8]	; (80069a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000050 	.word	0x20000050

080069a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	220a      	movs	r2, #10
 80069b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80069b2:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	2000000c 	.word	0x2000000c

080069c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e009      	b.n	80069ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	33b0      	adds	r3, #176	; 0xb0
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	32b0      	adds	r2, #176	; 0xb0
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e008      	b.n	8006a30 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	32b0      	adds	r2, #176	; 0xb0
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e004      	b.n	8006a6a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	32b0      	adds	r2, #176	; 0xb0
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a90:	2301      	movs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	32b0      	adds	r2, #176	; 0xb0
 8006a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e025      	b.n	8006af6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11f      	bne.n	8006af4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006abc:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <USBD_CDC_TransmitPacket+0x88>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4403      	add	r3, r0
 8006ad6:	3318      	adds	r3, #24
 8006ad8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <USBD_CDC_TransmitPacket+0x88>)
 8006adc:	7819      	ldrb	r1, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 ffbf 	bl	8008a6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000093 	.word	0x20000093

08006b04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	32b0      	adds	r2, #176	; 0xb0
 8006b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	32b0      	adds	r2, #176	; 0xb0
 8006b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e018      	b.n	8006b64 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7c1b      	ldrb	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <USBD_CDC_ReceivePacket+0x68>)
 8006b3c:	7819      	ldrb	r1, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 ffb1 	bl	8008ab0 <USBD_LL_PrepareReceive>
 8006b4e:	e008      	b.n	8006b62 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b50:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <USBD_CDC_ReceivePacket+0x68>)
 8006b52:	7819      	ldrb	r1, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b5a:	2340      	movs	r3, #64	; 0x40
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 ffa7 	bl	8008ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20000094 	.word	0x20000094

08006b70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e01f      	b.n	8006bc8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	79fa      	ldrb	r2, [r7, #7]
 8006bba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f001 fe21 	bl	8008804 <USBD_LL_Init>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e025      	b.n	8006c34 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32ae      	adds	r2, #174	; 0xae
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00f      	beq.n	8006c24 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	32ae      	adds	r2, #174	; 0xae
 8006c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	f107 020e 	add.w	r2, r7, #14
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fe29 	bl	800889c <USBD_LL_Start>
 8006c4a:	4603      	mov	r3, r0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c5c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d009      	beq.n	8006c98 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	78fa      	ldrb	r2, [r7, #3]
 8006c8e:	4611      	mov	r1, r2
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 f908 	bl	8007efe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d01a      	beq.n	8006d48 <USBD_LL_SetupStage+0x72>
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d822      	bhi.n	8006d5c <USBD_LL_SetupStage+0x86>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <USBD_LL_SetupStage+0x4a>
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d00a      	beq.n	8006d34 <USBD_LL_SetupStage+0x5e>
 8006d1e:	e01d      	b.n	8006d5c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fb5f 	bl	80073ec <USBD_StdDevReq>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]
      break;
 8006d32:	e020      	b.n	8006d76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fbc7 	bl	80074d0 <USBD_StdItfReq>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]
      break;
 8006d46:	e016      	b.n	8006d76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fc29 	bl	80075a8 <USBD_StdEPReq>
 8006d56:	4603      	mov	r3, r0
 8006d58:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5a:	e00c      	b.n	8006d76 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fdf6 	bl	800895c <USBD_LL_StallEP>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73fb      	strb	r3, [r7, #15]
      break;
 8006d74:	bf00      	nop
  }

  return ret;
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006d92:	7afb      	ldrb	r3, [r7, #11]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d16e      	bne.n	8006e76 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	f040 8098 	bne.w	8006edc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d913      	bls.n	8006de0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	bf28      	it	cs
 8006dd2:	4613      	movcs	r3, r2
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f001 f984 	bl	80080e6 <USBD_CtlContinueRx>
 8006dde:	e07d      	b.n	8006edc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006de6:	f003 031f 	and.w	r3, r3, #31
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d014      	beq.n	8006e18 <USBD_LL_DataOutStage+0x98>
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d81d      	bhi.n	8006e2e <USBD_LL_DataOutStage+0xae>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <USBD_LL_DataOutStage+0x7c>
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d003      	beq.n	8006e02 <USBD_LL_DataOutStage+0x82>
 8006dfa:	e018      	b.n	8006e2e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	75bb      	strb	r3, [r7, #22]
            break;
 8006e00:	e018      	b.n	8006e34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fa5e 	bl	80072ce <USBD_CoreFindIF>
 8006e12:	4603      	mov	r3, r0
 8006e14:	75bb      	strb	r3, [r7, #22]
            break;
 8006e16:	e00d      	b.n	8006e34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	4619      	mov	r1, r3
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fa60 	bl	80072e8 <USBD_CoreFindEP>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	75bb      	strb	r3, [r7, #22]
            break;
 8006e2c:	e002      	b.n	8006e34 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	75bb      	strb	r3, [r7, #22]
            break;
 8006e32:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e34:	7dbb      	ldrb	r3, [r7, #22]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d119      	bne.n	8006e6e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d113      	bne.n	8006e6e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e46:	7dba      	ldrb	r2, [r7, #22]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	32ae      	adds	r2, #174	; 0xae
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e56:	7dba      	ldrb	r2, [r7, #22]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e5e:	7dba      	ldrb	r2, [r7, #22]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	32ae      	adds	r2, #174	; 0xae
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f001 f94a 	bl	8008108 <USBD_CtlSendStatus>
 8006e74:	e032      	b.n	8006edc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fa31 	bl	80072e8 <USBD_CoreFindEP>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e8a:	7dbb      	ldrb	r3, [r7, #22]
 8006e8c:	2bff      	cmp	r3, #255	; 0xff
 8006e8e:	d025      	beq.n	8006edc <USBD_LL_DataOutStage+0x15c>
 8006e90:	7dbb      	ldrb	r3, [r7, #22]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d122      	bne.n	8006edc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d117      	bne.n	8006ed2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ea2:	7dba      	ldrb	r2, [r7, #22]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	32ae      	adds	r2, #174	; 0xae
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00f      	beq.n	8006ed2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006eb2:	7dba      	ldrb	r2, [r7, #22]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006eba:	7dba      	ldrb	r2, [r7, #22]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	32ae      	adds	r2, #174	; 0xae
 8006ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	7afa      	ldrb	r2, [r7, #11]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	4798      	blx	r3
 8006ece:	4603      	mov	r3, r0
 8006ed0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	e000      	b.n	8006ede <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d16f      	bne.n	8006fda <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3314      	adds	r3, #20
 8006efe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d15a      	bne.n	8006fc0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d914      	bls.n	8006f40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f001 f8ac 	bl	800808a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f32:	2300      	movs	r3, #0
 8006f34:	2200      	movs	r2, #0
 8006f36:	2100      	movs	r1, #0
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f001 fdb9 	bl	8008ab0 <USBD_LL_PrepareReceive>
 8006f3e:	e03f      	b.n	8006fc0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d11c      	bne.n	8006f86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d316      	bcc.n	8006f86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d20f      	bcs.n	8006f86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f66:	2200      	movs	r2, #0
 8006f68:	2100      	movs	r1, #0
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 f88d 	bl	800808a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f001 fd96 	bl	8008ab0 <USBD_LL_PrepareReceive>
 8006f84:	e01c      	b.n	8006fc0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d10f      	bne.n	8006fb2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fb2:	2180      	movs	r1, #128	; 0x80
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f001 fcd1 	bl	800895c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f001 f8b7 	bl	800812e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d03a      	beq.n	8007040 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f7ff fe42 	bl	8006c54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fd8:	e032      	b.n	8007040 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f97f 	bl	80072e8 <USBD_CoreFindEP>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	2bff      	cmp	r3, #255	; 0xff
 8006ff2:	d025      	beq.n	8007040 <USBD_LL_DataInStage+0x15a>
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d122      	bne.n	8007040 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b03      	cmp	r3, #3
 8007004:	d11c      	bne.n	8007040 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007006:	7dfa      	ldrb	r2, [r7, #23]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	32ae      	adds	r2, #174	; 0xae
 800700c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d014      	beq.n	8007040 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007016:	7dfa      	ldrb	r2, [r7, #23]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800701e:	7dfa      	ldrb	r2, [r7, #23]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	32ae      	adds	r2, #174	; 0xae
 8007024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	7afa      	ldrb	r2, [r7, #11]
 800702c:	4611      	mov	r1, r2
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	4798      	blx	r3
 8007032:	4603      	mov	r3, r0
 8007034:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007036:	7dbb      	ldrb	r3, [r7, #22]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800703c:	7dbb      	ldrb	r3, [r7, #22]
 800703e:	e000      	b.n	8007042 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d014      	beq.n	80070b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00e      	beq.n	80070b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6852      	ldr	r2, [r2, #4]
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	4611      	mov	r1, r2
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	4798      	blx	r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070ac:	2303      	movs	r3, #3
 80070ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b0:	2340      	movs	r3, #64	; 0x40
 80070b2:	2200      	movs	r2, #0
 80070b4:	2100      	movs	r1, #0
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fc0b 	bl	80088d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2240      	movs	r2, #64	; 0x40
 80070c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	2200      	movs	r2, #0
 80070d0:	2180      	movs	r1, #128	; 0x80
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 fbfd 	bl	80088d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2240      	movs	r2, #64	; 0x40
 80070e2:	621a      	str	r2, [r3, #32]

  return ret;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	78fa      	ldrb	r2, [r7, #3]
 80070fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711c:	b2da      	uxtb	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2204      	movs	r2, #4
 8007128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b04      	cmp	r3, #4
 800714c:	d106      	bne.n	800715c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007154:	b2da      	uxtb	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b03      	cmp	r3, #3
 800717c:	d110      	bne.n	80071a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	460b      	mov	r3, r1
 80071b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	32ae      	adds	r2, #174	; 0xae
 80071c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e01c      	b.n	8007206 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d115      	bne.n	8007204 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	32ae      	adds	r2, #174	; 0xae
 80071e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	32ae      	adds	r2, #174	; 0xae
 80071f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	4611      	mov	r1, r2
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	32ae      	adds	r2, #174	; 0xae
 8007224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	e01c      	b.n	800726a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b03      	cmp	r3, #3
 800723a:	d115      	bne.n	8007268 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32ae      	adds	r2, #174	; 0xae
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	32ae      	adds	r2, #174	; 0xae
 800725a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	4611      	mov	r1, r2
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00e      	beq.n	80072c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6852      	ldr	r2, [r2, #4]
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	4611      	mov	r1, r2
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b086      	sub	sp, #24
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	885b      	ldrh	r3, [r3, #2]
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	429a      	cmp	r2, r3
 8007328:	d920      	bls.n	800736c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007332:	e013      	b.n	800735c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007334:	f107 030a 	add.w	r3, r7, #10
 8007338:	4619      	mov	r1, r3
 800733a:	6978      	ldr	r0, [r7, #20]
 800733c:	f000 f81b 	bl	8007376 <USBD_GetNextDesc>
 8007340:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b05      	cmp	r3, #5
 8007348:	d108      	bne.n	800735c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	789b      	ldrb	r3, [r3, #2]
 8007352:	78fa      	ldrb	r2, [r7, #3]
 8007354:	429a      	cmp	r2, r3
 8007356:	d008      	beq.n	800736a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007358:	2300      	movs	r3, #0
 800735a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	885b      	ldrh	r3, [r3, #2]
 8007360:	b29a      	uxth	r2, r3
 8007362:	897b      	ldrh	r3, [r7, #10]
 8007364:	429a      	cmp	r2, r3
 8007366:	d8e5      	bhi.n	8007334 <USBD_GetEpDesc+0x32>
 8007368:	e000      	b.n	800736c <USBD_GetEpDesc+0x6a>
          break;
 800736a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800736c:	693b      	ldr	r3, [r7, #16]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	881a      	ldrh	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	4413      	add	r3, r2
 8007390:	b29a      	uxth	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4413      	add	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073a2:	68fb      	ldr	r3, [r7, #12]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	3301      	adds	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073ce:	8a3b      	ldrh	r3, [r7, #16]
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	b21a      	sxth	r2, r3
 80073d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073d8:	4313      	orrs	r3, r2
 80073da:	b21b      	sxth	r3, r3
 80073dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073de:	89fb      	ldrh	r3, [r7, #14]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d005      	beq.n	8007412 <USBD_StdDevReq+0x26>
 8007406:	2b40      	cmp	r3, #64	; 0x40
 8007408:	d857      	bhi.n	80074ba <USBD_StdDevReq+0xce>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00f      	beq.n	800742e <USBD_StdDevReq+0x42>
 800740e:	2b20      	cmp	r3, #32
 8007410:	d153      	bne.n	80074ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	32ae      	adds	r2, #174	; 0xae
 800741c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
      break;
 800742c:	e04a      	b.n	80074c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	2b09      	cmp	r3, #9
 8007434:	d83b      	bhi.n	80074ae <USBD_StdDevReq+0xc2>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <USBD_StdDevReq+0x50>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007491 	.word	0x08007491
 8007440:	080074a5 	.word	0x080074a5
 8007444:	080074af 	.word	0x080074af
 8007448:	0800749b 	.word	0x0800749b
 800744c:	080074af 	.word	0x080074af
 8007450:	0800746f 	.word	0x0800746f
 8007454:	08007465 	.word	0x08007465
 8007458:	080074af 	.word	0x080074af
 800745c:	08007487 	.word	0x08007487
 8007460:	08007479 	.word	0x08007479
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa3c 	bl	80078e4 <USBD_GetDescriptor>
          break;
 800746c:	e024      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fba1 	bl	8007bb8 <USBD_SetAddress>
          break;
 8007476:	e01f      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fbe0 	bl	8007c40 <USBD_SetConfig>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
          break;
 8007484:	e018      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc83 	bl	8007d94 <USBD_GetConfig>
          break;
 800748e:	e013      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fcb4 	bl	8007e00 <USBD_GetStatus>
          break;
 8007498:	e00e      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fce3 	bl	8007e68 <USBD_SetFeature>
          break;
 80074a2:	e009      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fd07 	bl	8007eba <USBD_ClrFeature>
          break;
 80074ac:	e004      	b.n	80074b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fd5e 	bl	8007f72 <USBD_CtlError>
          break;
 80074b6:	bf00      	nop
      }
      break;
 80074b8:	e004      	b.n	80074c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fd58 	bl	8007f72 <USBD_CtlError>
      break;
 80074c2:	bf00      	nop
  }

  return ret;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	d005      	beq.n	80074f6 <USBD_StdItfReq+0x26>
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d852      	bhi.n	8007594 <USBD_StdItfReq+0xc4>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <USBD_StdItfReq+0x26>
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d14e      	bne.n	8007594 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	2b02      	cmp	r3, #2
 8007502:	d840      	bhi.n	8007586 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	889b      	ldrh	r3, [r3, #4]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b01      	cmp	r3, #1
 800750c:	d836      	bhi.n	800757c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	889b      	ldrh	r3, [r3, #4]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff fed9 	bl	80072ce <USBD_CoreFindIF>
 800751c:	4603      	mov	r3, r0
 800751e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2bff      	cmp	r3, #255	; 0xff
 8007524:	d01d      	beq.n	8007562 <USBD_StdItfReq+0x92>
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11a      	bne.n	8007562 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800752c:	7bba      	ldrb	r2, [r7, #14]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32ae      	adds	r2, #174	; 0xae
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00f      	beq.n	800755c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800753c:	7bba      	ldrb	r2, [r7, #14]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007544:	7bba      	ldrb	r2, [r7, #14]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	32ae      	adds	r2, #174	; 0xae
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
 8007556:	4603      	mov	r3, r0
 8007558:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800755a:	e004      	b.n	8007566 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007560:	e001      	b.n	8007566 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007562:	2303      	movs	r3, #3
 8007564:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	88db      	ldrh	r3, [r3, #6]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d110      	bne.n	8007590 <USBD_StdItfReq+0xc0>
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10d      	bne.n	8007590 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fdc7 	bl	8008108 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800757a:	e009      	b.n	8007590 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fcf7 	bl	8007f72 <USBD_CtlError>
          break;
 8007584:	e004      	b.n	8007590 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fcf2 	bl	8007f72 <USBD_CtlError>
          break;
 800758e:	e000      	b.n	8007592 <USBD_StdItfReq+0xc2>
          break;
 8007590:	bf00      	nop
      }
      break;
 8007592:	e004      	b.n	800759e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fceb 	bl	8007f72 <USBD_CtlError>
      break;
 800759c:	bf00      	nop
  }

  return ret;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	889b      	ldrh	r3, [r3, #4]
 80075ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075c4:	2b40      	cmp	r3, #64	; 0x40
 80075c6:	d007      	beq.n	80075d8 <USBD_StdEPReq+0x30>
 80075c8:	2b40      	cmp	r3, #64	; 0x40
 80075ca:	f200 817f 	bhi.w	80078cc <USBD_StdEPReq+0x324>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02a      	beq.n	8007628 <USBD_StdEPReq+0x80>
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	f040 817a 	bne.w	80078cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff fe83 	bl	80072e8 <USBD_CoreFindEP>
 80075e2:	4603      	mov	r3, r0
 80075e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075e6:	7b7b      	ldrb	r3, [r7, #13]
 80075e8:	2bff      	cmp	r3, #255	; 0xff
 80075ea:	f000 8174 	beq.w	80078d6 <USBD_StdEPReq+0x32e>
 80075ee:	7b7b      	ldrb	r3, [r7, #13]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f040 8170 	bne.w	80078d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80075f6:	7b7a      	ldrb	r2, [r7, #13]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80075fe:	7b7a      	ldrb	r2, [r7, #13]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	32ae      	adds	r2, #174	; 0xae
 8007604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 8163 	beq.w	80078d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007610:	7b7a      	ldrb	r2, [r7, #13]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	32ae      	adds	r2, #174	; 0xae
 8007616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007626:	e156      	b.n	80078d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d008      	beq.n	8007642 <USBD_StdEPReq+0x9a>
 8007630:	2b03      	cmp	r3, #3
 8007632:	f300 8145 	bgt.w	80078c0 <USBD_StdEPReq+0x318>
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 809b 	beq.w	8007772 <USBD_StdEPReq+0x1ca>
 800763c:	2b01      	cmp	r3, #1
 800763e:	d03c      	beq.n	80076ba <USBD_StdEPReq+0x112>
 8007640:	e13e      	b.n	80078c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d002      	beq.n	8007654 <USBD_StdEPReq+0xac>
 800764e:	2b03      	cmp	r3, #3
 8007650:	d016      	beq.n	8007680 <USBD_StdEPReq+0xd8>
 8007652:	e02c      	b.n	80076ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <USBD_StdEPReq+0xce>
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d00a      	beq.n	8007676 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f979 	bl	800895c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f975 	bl	800895c <USBD_LL_StallEP>
 8007672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007674:	e020      	b.n	80076b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc7a 	bl	8007f72 <USBD_CtlError>
              break;
 800767e:	e01b      	b.n	80076b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	885b      	ldrh	r3, [r3, #2]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10e      	bne.n	80076a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <USBD_StdEPReq+0xfe>
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	2b80      	cmp	r3, #128	; 0x80
 8007692:	d008      	beq.n	80076a6 <USBD_StdEPReq+0xfe>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	88db      	ldrh	r3, [r3, #6]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 f95b 	bl	800895c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fd2e 	bl	8008108 <USBD_CtlSendStatus>

              break;
 80076ac:	e004      	b.n	80076b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fc5e 	bl	8007f72 <USBD_CtlError>
              break;
 80076b6:	bf00      	nop
          }
          break;
 80076b8:	e107      	b.n	80078ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d002      	beq.n	80076cc <USBD_StdEPReq+0x124>
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d016      	beq.n	80076f8 <USBD_StdEPReq+0x150>
 80076ca:	e04b      	b.n	8007764 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00d      	beq.n	80076ee <USBD_StdEPReq+0x146>
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b80      	cmp	r3, #128	; 0x80
 80076d6:	d00a      	beq.n	80076ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 f93d 	bl	800895c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076e2:	2180      	movs	r1, #128	; 0x80
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f939 	bl	800895c <USBD_LL_StallEP>
 80076ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076ec:	e040      	b.n	8007770 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc3e 	bl	8007f72 <USBD_CtlError>
              break;
 80076f6:	e03b      	b.n	8007770 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	885b      	ldrh	r3, [r3, #2]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d136      	bne.n	800776e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 f943 	bl	800899a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fcf7 	bl	8008108 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fde2 	bl	80072e8 <USBD_CoreFindEP>
 8007724:	4603      	mov	r3, r0
 8007726:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007728:	7b7b      	ldrb	r3, [r7, #13]
 800772a:	2bff      	cmp	r3, #255	; 0xff
 800772c:	d01f      	beq.n	800776e <USBD_StdEPReq+0x1c6>
 800772e:	7b7b      	ldrb	r3, [r7, #13]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11c      	bne.n	800776e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007734:	7b7a      	ldrb	r2, [r7, #13]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800773c:	7b7a      	ldrb	r2, [r7, #13]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	32ae      	adds	r2, #174	; 0xae
 8007742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d010      	beq.n	800776e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800774c:	7b7a      	ldrb	r2, [r7, #13]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	32ae      	adds	r2, #174	; 0xae
 8007752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007762:	e004      	b.n	800776e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fc03 	bl	8007f72 <USBD_CtlError>
              break;
 800776c:	e000      	b.n	8007770 <USBD_StdEPReq+0x1c8>
              break;
 800776e:	bf00      	nop
          }
          break;
 8007770:	e0ab      	b.n	80078ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d002      	beq.n	8007784 <USBD_StdEPReq+0x1dc>
 800777e:	2b03      	cmp	r3, #3
 8007780:	d032      	beq.n	80077e8 <USBD_StdEPReq+0x240>
 8007782:	e097      	b.n	80078b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d007      	beq.n	800779a <USBD_StdEPReq+0x1f2>
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	2b80      	cmp	r3, #128	; 0x80
 800778e:	d004      	beq.n	800779a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fbed 	bl	8007f72 <USBD_CtlError>
                break;
 8007798:	e091      	b.n	80078be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	da0b      	bge.n	80077ba <USBD_StdEPReq+0x212>
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	3310      	adds	r3, #16
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	4413      	add	r3, r2
 80077b6:	3304      	adds	r3, #4
 80077b8:	e00b      	b.n	80077d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	4413      	add	r3, r2
 80077d0:	3304      	adds	r3, #4
 80077d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2202      	movs	r2, #2
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fc37 	bl	8008054 <USBD_CtlSendData>
              break;
 80077e6:	e06a      	b.n	80078be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da11      	bge.n	8007814 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	f003 020f 	and.w	r2, r3, #15
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	3324      	adds	r3, #36	; 0x24
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d117      	bne.n	800783a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fbb0 	bl	8007f72 <USBD_CtlError>
                  break;
 8007812:	e054      	b.n	80078be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	f003 020f 	and.w	r2, r3, #15
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	440b      	add	r3, r1
 8007826:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d104      	bne.n	800783a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fb9d 	bl	8007f72 <USBD_CtlError>
                  break;
 8007838:	e041      	b.n	80078be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800783e:	2b00      	cmp	r3, #0
 8007840:	da0b      	bge.n	800785a <USBD_StdEPReq+0x2b2>
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	3310      	adds	r3, #16
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	3304      	adds	r3, #4
 8007858:	e00b      	b.n	8007872 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4413      	add	r3, r2
 8007870:	3304      	adds	r3, #4
 8007872:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <USBD_StdEPReq+0x2d8>
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d103      	bne.n	8007888 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e00e      	b.n	80078a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 f8a3 	bl	80089d8 <USBD_LL_IsStallEP>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e002      	b.n	80078a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2202      	movs	r2, #2
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fbd1 	bl	8008054 <USBD_CtlSendData>
              break;
 80078b2:	e004      	b.n	80078be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fb5b 	bl	8007f72 <USBD_CtlError>
              break;
 80078bc:	bf00      	nop
          }
          break;
 80078be:	e004      	b.n	80078ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fb55 	bl	8007f72 <USBD_CtlError>
          break;
 80078c8:	bf00      	nop
      }
      break;
 80078ca:	e005      	b.n	80078d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fb4f 	bl	8007f72 <USBD_CtlError>
      break;
 80078d4:	e000      	b.n	80078d8 <USBD_StdEPReq+0x330>
      break;
 80078d6:	bf00      	nop
  }

  return ret;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	2b06      	cmp	r3, #6
 8007906:	f200 8128 	bhi.w	8007b5a <USBD_GetDescriptor+0x276>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <USBD_GetDescriptor+0x2c>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	0800792d 	.word	0x0800792d
 8007914:	08007945 	.word	0x08007945
 8007918:	08007985 	.word	0x08007985
 800791c:	08007b5b 	.word	0x08007b5b
 8007920:	08007b5b 	.word	0x08007b5b
 8007924:	08007afb 	.word	0x08007afb
 8007928:	08007b27 	.word	0x08007b27
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7c12      	ldrb	r2, [r2, #16]
 8007938:	f107 0108 	add.w	r1, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
      break;
 8007942:	e112      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7c1b      	ldrb	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10d      	bne.n	8007968 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	f107 0208 	add.w	r2, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	2202      	movs	r2, #2
 8007964:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007966:	e100      	b.n	8007b6a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	f107 0208 	add.w	r2, r7, #8
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
 8007978:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3301      	adds	r3, #1
 800797e:	2202      	movs	r2, #2
 8007980:	701a      	strb	r2, [r3, #0]
      break;
 8007982:	e0f2      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	885b      	ldrh	r3, [r3, #2]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b05      	cmp	r3, #5
 800798c:	f200 80ac 	bhi.w	8007ae8 <USBD_GetDescriptor+0x204>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <USBD_GetDescriptor+0xb4>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079b1 	.word	0x080079b1
 800799c:	080079e5 	.word	0x080079e5
 80079a0:	08007a19 	.word	0x08007a19
 80079a4:	08007a4d 	.word	0x08007a4d
 80079a8:	08007a81 	.word	0x08007a81
 80079ac:	08007ab5 	.word	0x08007ab5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	7c12      	ldrb	r2, [r2, #16]
 80079c8:	f107 0108 	add.w	r1, r7, #8
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
 80079d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079d2:	e091      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 facb 	bl	8007f72 <USBD_CtlError>
            err++;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	3301      	adds	r3, #1
 80079e0:	72fb      	strb	r3, [r7, #11]
          break;
 80079e2:	e089      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	7c12      	ldrb	r2, [r2, #16]
 80079fc:	f107 0108 	add.w	r1, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a06:	e077      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fab1 	bl	8007f72 <USBD_CtlError>
            err++;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	3301      	adds	r3, #1
 8007a14:	72fb      	strb	r3, [r7, #11]
          break;
 8007a16:	e06f      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	7c12      	ldrb	r2, [r2, #16]
 8007a30:	f107 0108 	add.w	r1, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a3a:	e05d      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa97 	bl	8007f72 <USBD_CtlError>
            err++;
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	3301      	adds	r3, #1
 8007a48:	72fb      	strb	r3, [r7, #11]
          break;
 8007a4a:	e055      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	7c12      	ldrb	r2, [r2, #16]
 8007a64:	f107 0108 	add.w	r1, r7, #8
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
 8007a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a6e:	e043      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa7d 	bl	8007f72 <USBD_CtlError>
            err++;
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a7e:	e03b      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7c12      	ldrb	r2, [r2, #16]
 8007a98:	f107 0108 	add.w	r1, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa2:	e029      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fa63 	bl	8007f72 <USBD_CtlError>
            err++;
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab2:	e021      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	7c12      	ldrb	r2, [r2, #16]
 8007acc:	f107 0108 	add.w	r1, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ad6:	e00f      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa49 	bl	8007f72 <USBD_CtlError>
            err++;
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ae6:	e007      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa41 	bl	8007f72 <USBD_CtlError>
          err++;
 8007af0:	7afb      	ldrb	r3, [r7, #11]
 8007af2:	3301      	adds	r3, #1
 8007af4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007af6:	bf00      	nop
      }
      break;
 8007af8:	e037      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7c1b      	ldrb	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0a:	f107 0208 	add.w	r2, r7, #8
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4798      	blx	r3
 8007b12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b14:	e029      	b.n	8007b6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fa2a 	bl	8007f72 <USBD_CtlError>
        err++;
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
 8007b20:	3301      	adds	r3, #1
 8007b22:	72fb      	strb	r3, [r7, #11]
      break;
 8007b24:	e021      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7c1b      	ldrb	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	f107 0208 	add.w	r2, r7, #8
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4798      	blx	r3
 8007b3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3301      	adds	r3, #1
 8007b44:	2207      	movs	r2, #7
 8007b46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b48:	e00f      	b.n	8007b6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fa10 	bl	8007f72 <USBD_CtlError>
        err++;
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	3301      	adds	r3, #1
 8007b56:	72fb      	strb	r3, [r7, #11]
      break;
 8007b58:	e007      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa08 	bl	8007f72 <USBD_CtlError>
      err++;
 8007b62:	7afb      	ldrb	r3, [r7, #11]
 8007b64:	3301      	adds	r3, #1
 8007b66:	72fb      	strb	r3, [r7, #11]
      break;
 8007b68:	bf00      	nop
  }

  if (err != 0U)
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d11e      	bne.n	8007bae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	88db      	ldrh	r3, [r3, #6]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d016      	beq.n	8007ba6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b78:	893b      	ldrh	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88da      	ldrh	r2, [r3, #6]
 8007b82:	893b      	ldrh	r3, [r7, #8]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	bf28      	it	cs
 8007b88:	4613      	movcs	r3, r2
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b8e:	893b      	ldrh	r3, [r7, #8]
 8007b90:	461a      	mov	r2, r3
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fa5d 	bl	8008054 <USBD_CtlSendData>
 8007b9a:	e009      	b.n	8007bb0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9e7 	bl	8007f72 <USBD_CtlError>
 8007ba4:	e004      	b.n	8007bb0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 faae 	bl	8008108 <USBD_CtlSendStatus>
 8007bac:	e000      	b.n	8007bb0 <USBD_GetDescriptor+0x2cc>
    return;
 8007bae:	bf00      	nop
  }
}
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop

08007bb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	889b      	ldrh	r3, [r3, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d131      	bne.n	8007c2e <USBD_SetAddress+0x76>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	88db      	ldrh	r3, [r3, #6]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d12d      	bne.n	8007c2e <USBD_SetAddress+0x76>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	885b      	ldrh	r3, [r3, #2]
 8007bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8007bd8:	d829      	bhi.n	8007c2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	885b      	ldrh	r3, [r3, #2]
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d104      	bne.n	8007bfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9bc 	bl	8007f72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfa:	e01d      	b.n	8007c38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	7bfa      	ldrb	r2, [r7, #15]
 8007c00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 ff11 	bl	8008a30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa7a 	bl	8008108 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	e009      	b.n	8007c38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2c:	e004      	b.n	8007c38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f99e 	bl	8007f72 <USBD_CtlError>
  }
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	885b      	ldrh	r3, [r3, #2]
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	4b4e      	ldr	r3, [pc, #312]	; (8007d90 <USBD_SetConfig+0x150>)
 8007c56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c58:	4b4d      	ldr	r3, [pc, #308]	; (8007d90 <USBD_SetConfig+0x150>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d905      	bls.n	8007c6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f985 	bl	8007f72 <USBD_CtlError>
    return USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e08c      	b.n	8007d86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d002      	beq.n	8007c7e <USBD_SetConfig+0x3e>
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d029      	beq.n	8007cd0 <USBD_SetConfig+0x90>
 8007c7c:	e075      	b.n	8007d6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c7e:	4b44      	ldr	r3, [pc, #272]	; (8007d90 <USBD_SetConfig+0x150>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d020      	beq.n	8007cc8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007c86:	4b42      	ldr	r3, [pc, #264]	; (8007d90 <USBD_SetConfig+0x150>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c90:	4b3f      	ldr	r3, [pc, #252]	; (8007d90 <USBD_SetConfig+0x150>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fe ffe7 	bl	8006c6a <USBD_SetClassConfig>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d008      	beq.n	8007cb8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f962 	bl	8007f72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cb6:	e065      	b.n	8007d84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa25 	bl	8008108 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cc6:	e05d      	b.n	8007d84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fa1d 	bl	8008108 <USBD_CtlSendStatus>
      break;
 8007cce:	e059      	b.n	8007d84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cd0:	4b2f      	ldr	r3, [pc, #188]	; (8007d90 <USBD_SetConfig+0x150>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d112      	bne.n	8007cfe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ce0:	4b2b      	ldr	r3, [pc, #172]	; (8007d90 <USBD_SetConfig+0x150>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cea:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <USBD_SetConfig+0x150>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7fe ffd6 	bl	8006ca2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa06 	bl	8008108 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cfc:	e042      	b.n	8007d84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007cfe:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <USBD_SetConfig+0x150>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d02a      	beq.n	8007d62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7fe ffc4 	bl	8006ca2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d1a:	4b1d      	ldr	r3, [pc, #116]	; (8007d90 <USBD_SetConfig+0x150>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d24:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <USBD_SetConfig+0x150>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fe ff9d 	bl	8006c6a <USBD_SetClassConfig>
 8007d30:	4603      	mov	r3, r0
 8007d32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00f      	beq.n	8007d5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f918 	bl	8007f72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fe ffa9 	bl	8006ca2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d58:	e014      	b.n	8007d84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f9d4 	bl	8008108 <USBD_CtlSendStatus>
      break;
 8007d60:	e010      	b.n	8007d84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f9d0 	bl	8008108 <USBD_CtlSendStatus>
      break;
 8007d68:	e00c      	b.n	8007d84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f900 	bl	8007f72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <USBD_SetConfig+0x150>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7fe ff92 	bl	8006ca2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	73fb      	strb	r3, [r7, #15]
      break;
 8007d82:	bf00      	nop
  }

  return ret;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	2000020c 	.word	0x2000020c

08007d94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	88db      	ldrh	r3, [r3, #6]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d004      	beq.n	8007db0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f8e2 	bl	8007f72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dae:	e023      	b.n	8007df8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	dc02      	bgt.n	8007dc2 <USBD_GetConfig+0x2e>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dc03      	bgt.n	8007dc8 <USBD_GetConfig+0x34>
 8007dc0:	e015      	b.n	8007dee <USBD_GetConfig+0x5a>
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d00b      	beq.n	8007dde <USBD_GetConfig+0x4a>
 8007dc6:	e012      	b.n	8007dee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f93c 	bl	8008054 <USBD_CtlSendData>
        break;
 8007ddc:	e00c      	b.n	8007df8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	2201      	movs	r2, #1
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f934 	bl	8008054 <USBD_CtlSendData>
        break;
 8007dec:	e004      	b.n	8007df8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f8be 	bl	8007f72 <USBD_CtlError>
        break;
 8007df6:	bf00      	nop
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d81e      	bhi.n	8007e56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	88db      	ldrh	r3, [r3, #6]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d004      	beq.n	8007e2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f8a5 	bl	8007f72 <USBD_CtlError>
        break;
 8007e28:	e01a      	b.n	8007e60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f043 0202 	orr.w	r2, r3, #2
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	330c      	adds	r3, #12
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f900 	bl	8008054 <USBD_CtlSendData>
      break;
 8007e54:	e004      	b.n	8007e60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f88a 	bl	8007f72 <USBD_CtlError>
      break;
 8007e5e:	bf00      	nop
  }
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d107      	bne.n	8007e8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f940 	bl	8008108 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007e88:	e013      	b.n	8007eb2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	885b      	ldrh	r3, [r3, #2]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d10b      	bne.n	8007eaa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	889b      	ldrh	r3, [r3, #4]
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f930 	bl	8008108 <USBD_CtlSendStatus>
}
 8007ea8:	e003      	b.n	8007eb2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f860 	bl	8007f72 <USBD_CtlError>
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d80b      	bhi.n	8007eea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	885b      	ldrh	r3, [r3, #2]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10c      	bne.n	8007ef4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f910 	bl	8008108 <USBD_CtlSendStatus>
      }
      break;
 8007ee8:	e004      	b.n	8007ef4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f840 	bl	8007f72 <USBD_CtlError>
      break;
 8007ef2:	e000      	b.n	8007ef6 <USBD_ClrFeature+0x3c>
      break;
 8007ef4:	bf00      	nop
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	781a      	ldrb	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3301      	adds	r3, #1
 8007f18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7ff fa41 	bl	80073b0 <SWAPBYTE>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	461a      	mov	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff fa34 	bl	80073b0 <SWAPBYTE>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff fa27 	bl	80073b0 <SWAPBYTE>
 8007f62:	4603      	mov	r3, r0
 8007f64:	461a      	mov	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	80da      	strh	r2, [r3, #6]
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f7c:	2180      	movs	r1, #128	; 0x80
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fcec 	bl	800895c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fce8 	bl	800895c <USBD_LL_StallEP>
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d036      	beq.n	8008018 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fae:	6938      	ldr	r0, [r7, #16]
 8007fb0:	f000 f836 	bl	8008020 <USBD_GetLen>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	7812      	ldrb	r2, [r2, #0]
 8007fcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	4413      	add	r3, r2
 8007fda:	2203      	movs	r2, #3
 8007fdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007fe4:	e013      	b.n	800800e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	4413      	add	r3, r2
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	7812      	ldrb	r2, [r2, #0]
 8007ff0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	613b      	str	r3, [r7, #16]
    idx++;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	4413      	add	r3, r2
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
    idx++;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	3301      	adds	r3, #1
 800800c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1e7      	bne.n	8007fe6 <USBD_GetString+0x52>
 8008016:	e000      	b.n	800801a <USBD_GetString+0x86>
    return;
 8008018:	bf00      	nop
  }
}
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008030:	e005      	b.n	800803e <USBD_GetLen+0x1e>
  {
    len++;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	3301      	adds	r3, #1
 8008036:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	3301      	adds	r3, #1
 800803c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1f5      	bne.n	8008032 <USBD_GetLen+0x12>
  }

  return len;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2202      	movs	r2, #2
 8008064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	2100      	movs	r1, #0
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 fcf7 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	2100      	movs	r1, #0
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fce6 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2203      	movs	r2, #3
 80080bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	2100      	movs	r1, #0
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fcea 	bl	8008ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	2100      	movs	r1, #0
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fcd9 	bl	8008ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2204      	movs	r2, #4
 8008114:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008118:	2300      	movs	r3, #0
 800811a:	2200      	movs	r2, #0
 800811c:	2100      	movs	r1, #0
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fca5 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2205      	movs	r2, #5
 800813a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800813e:	2300      	movs	r3, #0
 8008140:	2200      	movs	r2, #0
 8008142:	2100      	movs	r1, #0
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fcb3 	bl	8008ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008158:	2200      	movs	r2, #0
 800815a:	4912      	ldr	r1, [pc, #72]	; (80081a4 <MX_USB_DEVICE_Init+0x50>)
 800815c:	4812      	ldr	r0, [pc, #72]	; (80081a8 <MX_USB_DEVICE_Init+0x54>)
 800815e:	f7fe fd07 	bl	8006b70 <USBD_Init>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008168:	f7f9 f9e4 	bl	8001534 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800816c:	490f      	ldr	r1, [pc, #60]	; (80081ac <MX_USB_DEVICE_Init+0x58>)
 800816e:	480e      	ldr	r0, [pc, #56]	; (80081a8 <MX_USB_DEVICE_Init+0x54>)
 8008170:	f7fe fd2e 	bl	8006bd0 <USBD_RegisterClass>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800817a:	f7f9 f9db 	bl	8001534 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800817e:	490c      	ldr	r1, [pc, #48]	; (80081b0 <MX_USB_DEVICE_Init+0x5c>)
 8008180:	4809      	ldr	r0, [pc, #36]	; (80081a8 <MX_USB_DEVICE_Init+0x54>)
 8008182:	f7fe fc1f 	bl	80069c4 <USBD_CDC_RegisterInterface>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800818c:	f7f9 f9d2 	bl	8001534 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008190:	4805      	ldr	r0, [pc, #20]	; (80081a8 <MX_USB_DEVICE_Init+0x54>)
 8008192:	f7fe fd53 	bl	8006c3c <USBD_Start>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800819c:	f7f9 f9ca 	bl	8001534 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081a0:	bf00      	nop
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	200000ac 	.word	0x200000ac
 80081a8:	20000210 	.word	0x20000210
 80081ac:	20000018 	.word	0x20000018
 80081b0:	20000098 	.word	0x20000098

080081b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081b8:	2200      	movs	r2, #0
 80081ba:	4905      	ldr	r1, [pc, #20]	; (80081d0 <CDC_Init_FS+0x1c>)
 80081bc:	4805      	ldr	r0, [pc, #20]	; (80081d4 <CDC_Init_FS+0x20>)
 80081be:	f7fe fc1b 	bl	80069f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081c2:	4905      	ldr	r1, [pc, #20]	; (80081d8 <CDC_Init_FS+0x24>)
 80081c4:	4803      	ldr	r0, [pc, #12]	; (80081d4 <CDC_Init_FS+0x20>)
 80081c6:	f7fe fc39 	bl	8006a3c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	200008d4 	.word	0x200008d4
 80081d4:	20000210 	.word	0x20000210
 80081d8:	200004ec 	.word	0x200004ec

080081dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	6039      	str	r1, [r7, #0]
 80081f6:	71fb      	strb	r3, [r7, #7]
 80081f8:	4613      	mov	r3, r2
 80081fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	2b23      	cmp	r3, #35	; 0x23
 8008200:	d84a      	bhi.n	8008298 <CDC_Control_FS+0xac>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <CDC_Control_FS+0x1c>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008299 	.word	0x08008299
 800820c:	08008299 	.word	0x08008299
 8008210:	08008299 	.word	0x08008299
 8008214:	08008299 	.word	0x08008299
 8008218:	08008299 	.word	0x08008299
 800821c:	08008299 	.word	0x08008299
 8008220:	08008299 	.word	0x08008299
 8008224:	08008299 	.word	0x08008299
 8008228:	08008299 	.word	0x08008299
 800822c:	08008299 	.word	0x08008299
 8008230:	08008299 	.word	0x08008299
 8008234:	08008299 	.word	0x08008299
 8008238:	08008299 	.word	0x08008299
 800823c:	08008299 	.word	0x08008299
 8008240:	08008299 	.word	0x08008299
 8008244:	08008299 	.word	0x08008299
 8008248:	08008299 	.word	0x08008299
 800824c:	08008299 	.word	0x08008299
 8008250:	08008299 	.word	0x08008299
 8008254:	08008299 	.word	0x08008299
 8008258:	08008299 	.word	0x08008299
 800825c:	08008299 	.word	0x08008299
 8008260:	08008299 	.word	0x08008299
 8008264:	08008299 	.word	0x08008299
 8008268:	08008299 	.word	0x08008299
 800826c:	08008299 	.word	0x08008299
 8008270:	08008299 	.word	0x08008299
 8008274:	08008299 	.word	0x08008299
 8008278:	08008299 	.word	0x08008299
 800827c:	08008299 	.word	0x08008299
 8008280:	08008299 	.word	0x08008299
 8008284:	08008299 	.word	0x08008299
 8008288:	08008299 	.word	0x08008299
 800828c:	08008299 	.word	0x08008299
 8008290:	08008299 	.word	0x08008299
 8008294:	08008299 	.word	0x08008299
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008298:	bf00      	nop
  }

  return (USBD_OK);
 800829a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	480f      	ldr	r0, [pc, #60]	; (80082f4 <CDC_Receive_FS+0x4c>)
 80082b6:	f7fe fbc1 	bl	8006a3c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082ba:	480e      	ldr	r0, [pc, #56]	; (80082f4 <CDC_Receive_FS+0x4c>)
 80082bc:	f7fe fc22 	bl	8006b04 <USBD_CDC_ReceivePacket>

	  memset (buffer, '\0', 64);  // clear the buffer
 80082c0:	2240      	movs	r2, #64	; 0x40
 80082c2:	2100      	movs	r1, #0
 80082c4:	480c      	ldr	r0, [pc, #48]	; (80082f8 <CDC_Receive_FS+0x50>)
 80082c6:	f000 fca3 	bl	8008c10 <memset>
	  uint8_t len = (uint8_t)*Len;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer, Buf, len);  // copy the data to the buffer
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	4808      	ldr	r0, [pc, #32]	; (80082f8 <CDC_Receive_FS+0x50>)
 80082d8:	f000 fc8c 	bl	8008bf4 <memcpy>
	  memset(Buf, '\0', len);   // clear the Buf also
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	461a      	mov	r2, r3
 80082e0:	2100      	movs	r1, #0
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fc94 	bl	8008c10 <memset>

	  return (USBD_OK);
 80082e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000210 	.word	0x20000210
 80082f8:	200001c4 	.word	0x200001c4

080082fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800830c:	4b0d      	ldr	r3, [pc, #52]	; (8008344 <CDC_Transmit_FS+0x48>)
 800830e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008312:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800831e:	2301      	movs	r3, #1
 8008320:	e00b      	b.n	800833a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008322:	887b      	ldrh	r3, [r7, #2]
 8008324:	461a      	mov	r2, r3
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4806      	ldr	r0, [pc, #24]	; (8008344 <CDC_Transmit_FS+0x48>)
 800832a:	f7fe fb65 	bl	80069f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800832e:	4805      	ldr	r0, [pc, #20]	; (8008344 <CDC_Transmit_FS+0x48>)
 8008330:	f7fe fba2 	bl	8006a78 <USBD_CDC_TransmitPacket>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000210 	.word	0x20000210

08008348 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800835a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800835e:	4618      	mov	r0, r3
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	6039      	str	r1, [r7, #0]
 8008376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2212      	movs	r2, #18
 800837c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800837e:	4b03      	ldr	r3, [pc, #12]	; (800838c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	200000c8 	.word	0x200000c8

08008390 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2204      	movs	r2, #4
 80083a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083a2:	4b03      	ldr	r3, [pc, #12]	; (80083b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	200000dc 	.word	0x200000dc

080083b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4907      	ldr	r1, [pc, #28]	; (80083e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083ca:	4808      	ldr	r0, [pc, #32]	; (80083ec <USBD_FS_ProductStrDescriptor+0x38>)
 80083cc:	f7ff fde2 	bl	8007f94 <USBD_GetString>
 80083d0:	e004      	b.n	80083dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	4904      	ldr	r1, [pc, #16]	; (80083e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083d6:	4805      	ldr	r0, [pc, #20]	; (80083ec <USBD_FS_ProductStrDescriptor+0x38>)
 80083d8:	f7ff fddc 	bl	8007f94 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083dc:	4b02      	ldr	r3, [pc, #8]	; (80083e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000cbc 	.word	0x20000cbc
 80083ec:	08009e78 	.word	0x08009e78

080083f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	4904      	ldr	r1, [pc, #16]	; (8008410 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008400:	4804      	ldr	r0, [pc, #16]	; (8008414 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008402:	f7ff fdc7 	bl	8007f94 <USBD_GetString>
  return USBD_StrDesc;
 8008406:	4b02      	ldr	r3, [pc, #8]	; (8008410 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20000cbc 	.word	0x20000cbc
 8008414:	08009e90 	.word	0x08009e90

08008418 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	221a      	movs	r2, #26
 8008428:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800842a:	f000 f843 	bl	80084b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800842e:	4b02      	ldr	r3, [pc, #8]	; (8008438 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	200000e0 	.word	0x200000e0

0800843c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4907      	ldr	r1, [pc, #28]	; (8008470 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008452:	4808      	ldr	r0, [pc, #32]	; (8008474 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008454:	f7ff fd9e 	bl	8007f94 <USBD_GetString>
 8008458:	e004      	b.n	8008464 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	4904      	ldr	r1, [pc, #16]	; (8008470 <USBD_FS_ConfigStrDescriptor+0x34>)
 800845e:	4805      	ldr	r0, [pc, #20]	; (8008474 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008460:	f7ff fd98 	bl	8007f94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000cbc 	.word	0x20000cbc
 8008474:	08009ea4 	.word	0x08009ea4

08008478 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4907      	ldr	r1, [pc, #28]	; (80084ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800848e:	4808      	ldr	r0, [pc, #32]	; (80084b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008490:	f7ff fd80 	bl	8007f94 <USBD_GetString>
 8008494:	e004      	b.n	80084a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	4904      	ldr	r1, [pc, #16]	; (80084ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800849a:	4805      	ldr	r0, [pc, #20]	; (80084b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800849c:	f7ff fd7a 	bl	8007f94 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084a0:	4b02      	ldr	r3, [pc, #8]	; (80084ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000cbc 	.word	0x20000cbc
 80084b0:	08009eb0 	.word	0x08009eb0

080084b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ba:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <Get_SerialNum+0x44>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084c0:	4b0e      	ldr	r3, [pc, #56]	; (80084fc <Get_SerialNum+0x48>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084c6:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <Get_SerialNum+0x4c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084da:	2208      	movs	r2, #8
 80084dc:	4909      	ldr	r1, [pc, #36]	; (8008504 <Get_SerialNum+0x50>)
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f814 	bl	800850c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084e4:	2204      	movs	r2, #4
 80084e6:	4908      	ldr	r1, [pc, #32]	; (8008508 <Get_SerialNum+0x54>)
 80084e8:	68b8      	ldr	r0, [r7, #8]
 80084ea:	f000 f80f 	bl	800850c <IntToUnicode>
  }
}
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	1fff7a10 	.word	0x1fff7a10
 80084fc:	1fff7a14 	.word	0x1fff7a14
 8008500:	1fff7a18 	.word	0x1fff7a18
 8008504:	200000e2 	.word	0x200000e2
 8008508:	200000f2 	.word	0x200000f2

0800850c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800851e:	2300      	movs	r3, #0
 8008520:	75fb      	strb	r3, [r7, #23]
 8008522:	e027      	b.n	8008574 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	0f1b      	lsrs	r3, r3, #28
 8008528:	2b09      	cmp	r3, #9
 800852a:	d80b      	bhi.n	8008544 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	0f1b      	lsrs	r3, r3, #28
 8008530:	b2da      	uxtb	r2, r3
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	4619      	mov	r1, r3
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	440b      	add	r3, r1
 800853c:	3230      	adds	r2, #48	; 0x30
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	e00a      	b.n	800855a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	0f1b      	lsrs	r3, r3, #28
 8008548:	b2da      	uxtb	r2, r3
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	4619      	mov	r1, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	440b      	add	r3, r1
 8008554:	3237      	adds	r2, #55	; 0x37
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	011b      	lsls	r3, r3, #4
 800855e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	3301      	adds	r3, #1
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	2200      	movs	r2, #0
 800856c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	3301      	adds	r3, #1
 8008572:	75fb      	strb	r3, [r7, #23]
 8008574:	7dfa      	ldrb	r2, [r7, #23]
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	429a      	cmp	r2, r3
 800857a:	d3d3      	bcc.n	8008524 <IntToUnicode+0x18>
  }
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
	...

0800858c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	; 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008594:	f107 0314 	add.w	r3, r7, #20
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ac:	d13a      	bne.n	8008624 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	4b1e      	ldr	r3, [pc, #120]	; (800862c <HAL_PCD_MspInit+0xa0>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	4a1d      	ldr	r2, [pc, #116]	; (800862c <HAL_PCD_MspInit+0xa0>)
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	6313      	str	r3, [r2, #48]	; 0x30
 80085be:	4b1b      	ldr	r3, [pc, #108]	; (800862c <HAL_PCD_MspInit+0xa0>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80085ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085d0:	2302      	movs	r3, #2
 80085d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085d8:	2303      	movs	r3, #3
 80085da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085dc:	230a      	movs	r3, #10
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e0:	f107 0314 	add.w	r3, r7, #20
 80085e4:	4619      	mov	r1, r3
 80085e6:	4812      	ldr	r0, [pc, #72]	; (8008630 <HAL_PCD_MspInit+0xa4>)
 80085e8:	f7f9 fa4a 	bl	8001a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085ec:	4b0f      	ldr	r3, [pc, #60]	; (800862c <HAL_PCD_MspInit+0xa0>)
 80085ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f0:	4a0e      	ldr	r2, [pc, #56]	; (800862c <HAL_PCD_MspInit+0xa0>)
 80085f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f6:	6353      	str	r3, [r2, #52]	; 0x34
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	4b0b      	ldr	r3, [pc, #44]	; (800862c <HAL_PCD_MspInit+0xa0>)
 80085fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008600:	4a0a      	ldr	r2, [pc, #40]	; (800862c <HAL_PCD_MspInit+0xa0>)
 8008602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008606:	6453      	str	r3, [r2, #68]	; 0x44
 8008608:	4b08      	ldr	r3, [pc, #32]	; (800862c <HAL_PCD_MspInit+0xa0>)
 800860a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008614:	2200      	movs	r2, #0
 8008616:	2100      	movs	r1, #0
 8008618:	2043      	movs	r0, #67	; 0x43
 800861a:	f7f9 f9fa 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800861e:	2043      	movs	r0, #67	; 0x43
 8008620:	f7f9 fa13 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008624:	bf00      	nop
 8008626:	3728      	adds	r7, #40	; 0x28
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40023800 	.word	0x40023800
 8008630:	40020000 	.word	0x40020000

08008634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f7fe fb43 	bl	8006cd6 <USBD_LL_SetupStage>
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	4619      	mov	r1, r3
 8008682:	f7fe fb7d 	bl	8006d80 <USBD_LL_DataOutStage>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	334c      	adds	r3, #76	; 0x4c
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7fe fc16 	bl	8006ee6 <USBD_LL_DataInStage>
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fd4a 	bl	800716a <USBD_LL_SOF>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d001      	beq.n	80086f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086f2:	f7f8 ff1f 	bl	8001534 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086fc:	7bfa      	ldrb	r2, [r7, #15]
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fcf4 	bl	80070ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe fc9c 	bl	800704a <USBD_LL_Reset>
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fcef 	bl	800710e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008742:	f043 0301 	orr.w	r3, r3, #1
 8008746:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008750:	4b04      	ldr	r3, [pc, #16]	; (8008764 <HAL_PCD_SuspendCallback+0x48>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	4a03      	ldr	r2, [pc, #12]	; (8008764 <HAL_PCD_SuspendCallback+0x48>)
 8008756:	f043 0306 	orr.w	r3, r3, #6
 800875a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	e000ed00 	.word	0xe000ed00

08008768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fcdf 	bl	800713a <USBD_LL_Resume>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	4611      	mov	r1, r2
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fd37 	bl	800720e <USBD_LL_IsoOUTIncomplete>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fcf3 	bl	80071aa <USBD_LL_IsoINIncomplete>
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fd49 	bl	8007272 <USBD_LL_DevConnected>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fd46 	bl	8007288 <USBD_LL_DevDisconnected>
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d13c      	bne.n	800888e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008814:	4a20      	ldr	r2, [pc, #128]	; (8008898 <USBD_LL_Init+0x94>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <USBD_LL_Init+0x94>)
 8008820:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008824:	4b1c      	ldr	r3, [pc, #112]	; (8008898 <USBD_LL_Init+0x94>)
 8008826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800882a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800882c:	4b1a      	ldr	r3, [pc, #104]	; (8008898 <USBD_LL_Init+0x94>)
 800882e:	2204      	movs	r2, #4
 8008830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008832:	4b19      	ldr	r3, [pc, #100]	; (8008898 <USBD_LL_Init+0x94>)
 8008834:	2202      	movs	r2, #2
 8008836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008838:	4b17      	ldr	r3, [pc, #92]	; (8008898 <USBD_LL_Init+0x94>)
 800883a:	2200      	movs	r2, #0
 800883c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800883e:	4b16      	ldr	r3, [pc, #88]	; (8008898 <USBD_LL_Init+0x94>)
 8008840:	2202      	movs	r2, #2
 8008842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008844:	4b14      	ldr	r3, [pc, #80]	; (8008898 <USBD_LL_Init+0x94>)
 8008846:	2200      	movs	r2, #0
 8008848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800884a:	4b13      	ldr	r3, [pc, #76]	; (8008898 <USBD_LL_Init+0x94>)
 800884c:	2200      	movs	r2, #0
 800884e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008850:	4b11      	ldr	r3, [pc, #68]	; (8008898 <USBD_LL_Init+0x94>)
 8008852:	2200      	movs	r2, #0
 8008854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008856:	4b10      	ldr	r3, [pc, #64]	; (8008898 <USBD_LL_Init+0x94>)
 8008858:	2200      	movs	r2, #0
 800885a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800885c:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <USBD_LL_Init+0x94>)
 800885e:	2200      	movs	r2, #0
 8008860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008862:	480d      	ldr	r0, [pc, #52]	; (8008898 <USBD_LL_Init+0x94>)
 8008864:	f7fa f866 	bl	8002934 <HAL_PCD_Init>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800886e:	f7f8 fe61 	bl	8001534 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008872:	2180      	movs	r1, #128	; 0x80
 8008874:	4808      	ldr	r0, [pc, #32]	; (8008898 <USBD_LL_Init+0x94>)
 8008876:	f7fb fabe 	bl	8003df6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800887a:	2240      	movs	r2, #64	; 0x40
 800887c:	2100      	movs	r1, #0
 800887e:	4806      	ldr	r0, [pc, #24]	; (8008898 <USBD_LL_Init+0x94>)
 8008880:	f7fb fa72 	bl	8003d68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008884:	2280      	movs	r2, #128	; 0x80
 8008886:	2101      	movs	r1, #1
 8008888:	4803      	ldr	r0, [pc, #12]	; (8008898 <USBD_LL_Init+0x94>)
 800888a:	f7fb fa6d 	bl	8003d68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000ebc 	.word	0x20000ebc

0800889c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fa f95b 	bl	8002b6e <HAL_PCD_Start>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f942 	bl	8008b48 <USBD_Get_USB_Status>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	461a      	mov	r2, r3
 80088e0:	4603      	mov	r3, r0
 80088e2:	70fb      	strb	r3, [r7, #3]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70bb      	strb	r3, [r7, #2]
 80088e8:	4613      	mov	r3, r2
 80088ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80088fa:	78bb      	ldrb	r3, [r7, #2]
 80088fc:	883a      	ldrh	r2, [r7, #0]
 80088fe:	78f9      	ldrb	r1, [r7, #3]
 8008900:	f7fa fe2c 	bl	800355c <HAL_PCD_EP_Open>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 f91c 	bl	8008b48 <USBD_Get_USB_Status>
 8008910:	4603      	mov	r3, r0
 8008912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008914:	7bbb      	ldrb	r3, [r7, #14]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	4611      	mov	r1, r2
 800893c:	4618      	mov	r0, r3
 800893e:	f7fa fe75 	bl	800362c <HAL_PCD_EP_Close>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f8fd 	bl	8008b48 <USBD_Get_USB_Status>
 800894e:	4603      	mov	r3, r0
 8008950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008952:	7bbb      	ldrb	r3, [r7, #14]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7fa ff4d 	bl	800381a <HAL_PCD_EP_SetStall>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f8de 	bl	8008b48 <USBD_Get_USB_Status>
 800898c:	4603      	mov	r3, r0
 800898e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008990:	7bbb      	ldrb	r3, [r7, #14]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089b4:	78fa      	ldrb	r2, [r7, #3]
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fa ff92 	bl	80038e2 <HAL_PCD_EP_ClrStall>
 80089be:	4603      	mov	r3, r0
 80089c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 f8bf 	bl	8008b48 <USBD_Get_USB_Status>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	da0b      	bge.n	8008a0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089fa:	68f9      	ldr	r1, [r7, #12]
 80089fc:	4613      	mov	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	333e      	adds	r3, #62	; 0x3e
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	e00b      	b.n	8008a24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a12:	68f9      	ldr	r1, [r7, #12]
 8008a14:	4613      	mov	r3, r2
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008a22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fa fd5f 	bl	8003512 <HAL_PCD_SetAddress>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f874 	bl	8008b48 <USBD_Get_USB_Status>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a8c:	7af9      	ldrb	r1, [r7, #11]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f7fa fe78 	bl	8003786 <HAL_PCD_EP_Transmit>
 8008a96:	4603      	mov	r3, r0
 8008a98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 f853 	bl	8008b48 <USBD_Get_USB_Status>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	460b      	mov	r3, r1
 8008abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ace:	7af9      	ldrb	r1, [r7, #11]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	f7fa fdf4 	bl	80036c0 <HAL_PCD_EP_Receive>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f832 	bl	8008b48 <USBD_Get_USB_Status>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ae8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	4611      	mov	r1, r2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fa fe24 	bl	8003756 <HAL_PCD_EP_GetRxCount>
 8008b0e:	4603      	mov	r3, r0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b20:	4b03      	ldr	r3, [pc, #12]	; (8008b30 <USBD_static_malloc+0x18>)
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	200013c8 	.word	0x200013c8

08008b34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d817      	bhi.n	8008b8c <USBD_Get_USB_Status+0x44>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <USBD_Get_USB_Status+0x1c>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008b7b 	.word	0x08008b7b
 8008b6c:	08008b81 	.word	0x08008b81
 8008b70:	08008b87 	.word	0x08008b87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
    break;
 8008b78:	e00b      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7e:	e008      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b80:	2301      	movs	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
    break;
 8008b84:	e005      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b86:	2303      	movs	r3, #3
 8008b88:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8a:	e002      	b.n	8008b92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	bf00      	nop
  }
  return usb_status;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <__errno>:
 8008ba0:	4b01      	ldr	r3, [pc, #4]	; (8008ba8 <__errno+0x8>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	200000fc 	.word	0x200000fc

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4d0d      	ldr	r5, [pc, #52]	; (8008be4 <__libc_init_array+0x38>)
 8008bb0:	4c0d      	ldr	r4, [pc, #52]	; (8008be8 <__libc_init_array+0x3c>)
 8008bb2:	1b64      	subs	r4, r4, r5
 8008bb4:	10a4      	asrs	r4, r4, #2
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	42a6      	cmp	r6, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	4d0b      	ldr	r5, [pc, #44]	; (8008bec <__libc_init_array+0x40>)
 8008bbe:	4c0c      	ldr	r4, [pc, #48]	; (8008bf0 <__libc_init_array+0x44>)
 8008bc0:	f001 f94c 	bl	8009e5c <_init>
 8008bc4:	1b64      	subs	r4, r4, r5
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	2600      	movs	r6, #0
 8008bca:	42a6      	cmp	r6, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd4:	4798      	blx	r3
 8008bd6:	3601      	adds	r6, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bde:	4798      	blx	r3
 8008be0:	3601      	adds	r6, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	08009f10 	.word	0x08009f10
 8008be8:	08009f10 	.word	0x08009f10
 8008bec:	08009f10 	.word	0x08009f10
 8008bf0:	08009f14 	.word	0x08009f14

08008bf4 <memcpy>:
 8008bf4:	440a      	add	r2, r1
 8008bf6:	4291      	cmp	r1, r2
 8008bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bfc:	d100      	bne.n	8008c00 <memcpy+0xc>
 8008bfe:	4770      	bx	lr
 8008c00:	b510      	push	{r4, lr}
 8008c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c0a:	4291      	cmp	r1, r2
 8008c0c:	d1f9      	bne.n	8008c02 <memcpy+0xe>
 8008c0e:	bd10      	pop	{r4, pc}

08008c10 <memset>:
 8008c10:	4402      	add	r2, r0
 8008c12:	4603      	mov	r3, r0
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d100      	bne.n	8008c1a <memset+0xa>
 8008c18:	4770      	bx	lr
 8008c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c1e:	e7f9      	b.n	8008c14 <memset+0x4>

08008c20 <log>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	ed2d 8b02 	vpush	{d8}
 8008c26:	ec55 4b10 	vmov	r4, r5, d0
 8008c2a:	f000 f8a9 	bl	8008d80 <__ieee754_log>
 8008c2e:	4622      	mov	r2, r4
 8008c30:	462b      	mov	r3, r5
 8008c32:	4620      	mov	r0, r4
 8008c34:	4629      	mov	r1, r5
 8008c36:	eeb0 8a40 	vmov.f32	s16, s0
 8008c3a:	eef0 8a60 	vmov.f32	s17, s1
 8008c3e:	f7f7 ff29 	bl	8000a94 <__aeabi_dcmpun>
 8008c42:	b998      	cbnz	r0, 8008c6c <log+0x4c>
 8008c44:	2200      	movs	r2, #0
 8008c46:	2300      	movs	r3, #0
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f7 ff18 	bl	8000a80 <__aeabi_dcmpgt>
 8008c50:	b960      	cbnz	r0, 8008c6c <log+0x4c>
 8008c52:	2200      	movs	r2, #0
 8008c54:	2300      	movs	r3, #0
 8008c56:	4620      	mov	r0, r4
 8008c58:	4629      	mov	r1, r5
 8008c5a:	f7f7 fee9 	bl	8000a30 <__aeabi_dcmpeq>
 8008c5e:	b160      	cbz	r0, 8008c7a <log+0x5a>
 8008c60:	f7ff ff9e 	bl	8008ba0 <__errno>
 8008c64:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008c90 <log+0x70>
 8008c68:	2322      	movs	r3, #34	; 0x22
 8008c6a:	6003      	str	r3, [r0, #0]
 8008c6c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c70:	eef0 0a68 	vmov.f32	s1, s17
 8008c74:	ecbd 8b02 	vpop	{d8}
 8008c78:	bd38      	pop	{r3, r4, r5, pc}
 8008c7a:	f7ff ff91 	bl	8008ba0 <__errno>
 8008c7e:	ecbd 8b02 	vpop	{d8}
 8008c82:	2321      	movs	r3, #33	; 0x21
 8008c84:	6003      	str	r3, [r0, #0]
 8008c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c8a:	4803      	ldr	r0, [pc, #12]	; (8008c98 <log+0x78>)
 8008c8c:	f001 b858 	b.w	8009d40 <nan>
 8008c90:	00000000 	.word	0x00000000
 8008c94:	fff00000 	.word	0xfff00000
 8008c98:	08009ed0 	.word	0x08009ed0

08008c9c <pow>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	ed2d 8b02 	vpush	{d8}
 8008ca2:	eeb0 8a40 	vmov.f32	s16, s0
 8008ca6:	eef0 8a60 	vmov.f32	s17, s1
 8008caa:	ec55 4b11 	vmov	r4, r5, d1
 8008cae:	f000 fa23 	bl	80090f8 <__ieee754_pow>
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4629      	mov	r1, r5
 8008cba:	ec57 6b10 	vmov	r6, r7, d0
 8008cbe:	f7f7 fee9 	bl	8000a94 <__aeabi_dcmpun>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d13b      	bne.n	8008d3e <pow+0xa2>
 8008cc6:	ec51 0b18 	vmov	r0, r1, d8
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f7f7 feaf 	bl	8000a30 <__aeabi_dcmpeq>
 8008cd2:	b1b8      	cbz	r0, 8008d04 <pow+0x68>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	4620      	mov	r0, r4
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f7f7 fea8 	bl	8000a30 <__aeabi_dcmpeq>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d146      	bne.n	8008d72 <pow+0xd6>
 8008ce4:	ec45 4b10 	vmov	d0, r4, r5
 8008ce8:	f001 f81f 	bl	8009d2a <finite>
 8008cec:	b338      	cbz	r0, 8008d3e <pow+0xa2>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	f7f7 fea5 	bl	8000a44 <__aeabi_dcmplt>
 8008cfa:	b300      	cbz	r0, 8008d3e <pow+0xa2>
 8008cfc:	f7ff ff50 	bl	8008ba0 <__errno>
 8008d00:	2322      	movs	r3, #34	; 0x22
 8008d02:	e01b      	b.n	8008d3c <pow+0xa0>
 8008d04:	ec47 6b10 	vmov	d0, r6, r7
 8008d08:	f001 f80f 	bl	8009d2a <finite>
 8008d0c:	b9e0      	cbnz	r0, 8008d48 <pow+0xac>
 8008d0e:	eeb0 0a48 	vmov.f32	s0, s16
 8008d12:	eef0 0a68 	vmov.f32	s1, s17
 8008d16:	f001 f808 	bl	8009d2a <finite>
 8008d1a:	b1a8      	cbz	r0, 8008d48 <pow+0xac>
 8008d1c:	ec45 4b10 	vmov	d0, r4, r5
 8008d20:	f001 f803 	bl	8009d2a <finite>
 8008d24:	b180      	cbz	r0, 8008d48 <pow+0xac>
 8008d26:	4632      	mov	r2, r6
 8008d28:	463b      	mov	r3, r7
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	f7f7 feb1 	bl	8000a94 <__aeabi_dcmpun>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d0e2      	beq.n	8008cfc <pow+0x60>
 8008d36:	f7ff ff33 	bl	8008ba0 <__errno>
 8008d3a:	2321      	movs	r3, #33	; 0x21
 8008d3c:	6003      	str	r3, [r0, #0]
 8008d3e:	ecbd 8b02 	vpop	{d8}
 8008d42:	ec47 6b10 	vmov	d0, r6, r7
 8008d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 fe6e 	bl	8000a30 <__aeabi_dcmpeq>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d0f2      	beq.n	8008d3e <pow+0xa2>
 8008d58:	eeb0 0a48 	vmov.f32	s0, s16
 8008d5c:	eef0 0a68 	vmov.f32	s1, s17
 8008d60:	f000 ffe3 	bl	8009d2a <finite>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d0ea      	beq.n	8008d3e <pow+0xa2>
 8008d68:	ec45 4b10 	vmov	d0, r4, r5
 8008d6c:	f000 ffdd 	bl	8009d2a <finite>
 8008d70:	e7c3      	b.n	8008cfa <pow+0x5e>
 8008d72:	4f01      	ldr	r7, [pc, #4]	; (8008d78 <pow+0xdc>)
 8008d74:	2600      	movs	r6, #0
 8008d76:	e7e2      	b.n	8008d3e <pow+0xa2>
 8008d78:	3ff00000 	.word	0x3ff00000
 8008d7c:	00000000 	.word	0x00000000

08008d80 <__ieee754_log>:
 8008d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	ec51 0b10 	vmov	r0, r1, d0
 8008d88:	ed2d 8b04 	vpush	{d8-d9}
 8008d8c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008d90:	b083      	sub	sp, #12
 8008d92:	460d      	mov	r5, r1
 8008d94:	da29      	bge.n	8008dea <__ieee754_log+0x6a>
 8008d96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d9a:	4303      	orrs	r3, r0
 8008d9c:	ee10 2a10 	vmov	r2, s0
 8008da0:	d10c      	bne.n	8008dbc <__ieee754_log+0x3c>
 8008da2:	49cf      	ldr	r1, [pc, #828]	; (80090e0 <__ieee754_log+0x360>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	2300      	movs	r3, #0
 8008da8:	2000      	movs	r0, #0
 8008daa:	f7f7 fd03 	bl	80007b4 <__aeabi_ddiv>
 8008dae:	ec41 0b10 	vmov	d0, r0, r1
 8008db2:	b003      	add	sp, #12
 8008db4:	ecbd 8b04 	vpop	{d8-d9}
 8008db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	da05      	bge.n	8008dcc <__ieee754_log+0x4c>
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	f7f7 fa15 	bl	80001f0 <__aeabi_dsub>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e7ee      	b.n	8008daa <__ieee754_log+0x2a>
 8008dcc:	4bc5      	ldr	r3, [pc, #788]	; (80090e4 <__ieee754_log+0x364>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f7f7 fbc6 	bl	8000560 <__aeabi_dmul>
 8008dd4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008dd8:	460d      	mov	r5, r1
 8008dda:	4ac3      	ldr	r2, [pc, #780]	; (80090e8 <__ieee754_log+0x368>)
 8008ddc:	4295      	cmp	r5, r2
 8008dde:	dd06      	ble.n	8008dee <__ieee754_log+0x6e>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	f7f7 fa06 	bl	80001f4 <__adddf3>
 8008de8:	e7e1      	b.n	8008dae <__ieee754_log+0x2e>
 8008dea:	2300      	movs	r3, #0
 8008dec:	e7f5      	b.n	8008dda <__ieee754_log+0x5a>
 8008dee:	152c      	asrs	r4, r5, #20
 8008df0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008df4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008df8:	441c      	add	r4, r3
 8008dfa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008dfe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e06:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008e0a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008e0e:	ea42 0105 	orr.w	r1, r2, r5
 8008e12:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008e16:	2200      	movs	r2, #0
 8008e18:	4bb4      	ldr	r3, [pc, #720]	; (80090ec <__ieee754_log+0x36c>)
 8008e1a:	f7f7 f9e9 	bl	80001f0 <__aeabi_dsub>
 8008e1e:	1cab      	adds	r3, r5, #2
 8008e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	4682      	mov	sl, r0
 8008e28:	468b      	mov	fp, r1
 8008e2a:	f04f 0200 	mov.w	r2, #0
 8008e2e:	dc53      	bgt.n	8008ed8 <__ieee754_log+0x158>
 8008e30:	2300      	movs	r3, #0
 8008e32:	f7f7 fdfd 	bl	8000a30 <__aeabi_dcmpeq>
 8008e36:	b1d0      	cbz	r0, 8008e6e <__ieee754_log+0xee>
 8008e38:	2c00      	cmp	r4, #0
 8008e3a:	f000 8122 	beq.w	8009082 <__ieee754_log+0x302>
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f7f7 fb24 	bl	800048c <__aeabi_i2d>
 8008e44:	a390      	add	r3, pc, #576	; (adr r3, 8009088 <__ieee754_log+0x308>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	f7f7 fb87 	bl	8000560 <__aeabi_dmul>
 8008e52:	a38f      	add	r3, pc, #572	; (adr r3, 8009090 <__ieee754_log+0x310>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fb7e 	bl	8000560 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	e7ba      	b.n	8008de4 <__ieee754_log+0x64>
 8008e6e:	a38a      	add	r3, pc, #552	; (adr r3, 8009098 <__ieee754_log+0x318>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	4650      	mov	r0, sl
 8008e76:	4659      	mov	r1, fp
 8008e78:	f7f7 fb72 	bl	8000560 <__aeabi_dmul>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	2000      	movs	r0, #0
 8008e82:	499b      	ldr	r1, [pc, #620]	; (80090f0 <__ieee754_log+0x370>)
 8008e84:	f7f7 f9b4 	bl	80001f0 <__aeabi_dsub>
 8008e88:	4652      	mov	r2, sl
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460f      	mov	r7, r1
 8008e8e:	465b      	mov	r3, fp
 8008e90:	4650      	mov	r0, sl
 8008e92:	4659      	mov	r1, fp
 8008e94:	f7f7 fb64 	bl	8000560 <__aeabi_dmul>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	f7f7 fb5e 	bl	8000560 <__aeabi_dmul>
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460f      	mov	r7, r1
 8008ea8:	b914      	cbnz	r4, 8008eb0 <__ieee754_log+0x130>
 8008eaa:	4632      	mov	r2, r6
 8008eac:	463b      	mov	r3, r7
 8008eae:	e0a2      	b.n	8008ff6 <__ieee754_log+0x276>
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f7f7 faeb 	bl	800048c <__aeabi_i2d>
 8008eb6:	a374      	add	r3, pc, #464	; (adr r3, 8009088 <__ieee754_log+0x308>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	4689      	mov	r9, r1
 8008ec0:	f7f7 fb4e 	bl	8000560 <__aeabi_dmul>
 8008ec4:	a372      	add	r3, pc, #456	; (adr r3, 8009090 <__ieee754_log+0x310>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	4604      	mov	r4, r0
 8008ecc:	460d      	mov	r5, r1
 8008ece:	4640      	mov	r0, r8
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	f7f7 fb45 	bl	8000560 <__aeabi_dmul>
 8008ed6:	e0a7      	b.n	8009028 <__ieee754_log+0x2a8>
 8008ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008edc:	f7f7 f98a 	bl	80001f4 <__adddf3>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	f7f7 fc64 	bl	80007b4 <__aeabi_ddiv>
 8008eec:	ec41 0b18 	vmov	d8, r0, r1
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f7f7 facb 	bl	800048c <__aeabi_i2d>
 8008ef6:	ec53 2b18 	vmov	r2, r3, d8
 8008efa:	ec41 0b19 	vmov	d9, r0, r1
 8008efe:	ec51 0b18 	vmov	r0, r1, d8
 8008f02:	f7f7 fb2d 	bl	8000560 <__aeabi_dmul>
 8008f06:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008f0a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4680      	mov	r8, r0
 8008f16:	4689      	mov	r9, r1
 8008f18:	f7f7 fb22 	bl	8000560 <__aeabi_dmul>
 8008f1c:	a360      	add	r3, pc, #384	; (adr r3, 80090a0 <__ieee754_log+0x320>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	4606      	mov	r6, r0
 8008f24:	460f      	mov	r7, r1
 8008f26:	f7f7 fb1b 	bl	8000560 <__aeabi_dmul>
 8008f2a:	a35f      	add	r3, pc, #380	; (adr r3, 80090a8 <__ieee754_log+0x328>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 f960 	bl	80001f4 <__adddf3>
 8008f34:	4632      	mov	r2, r6
 8008f36:	463b      	mov	r3, r7
 8008f38:	f7f7 fb12 	bl	8000560 <__aeabi_dmul>
 8008f3c:	a35c      	add	r3, pc, #368	; (adr r3, 80090b0 <__ieee754_log+0x330>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 f957 	bl	80001f4 <__adddf3>
 8008f46:	4632      	mov	r2, r6
 8008f48:	463b      	mov	r3, r7
 8008f4a:	f7f7 fb09 	bl	8000560 <__aeabi_dmul>
 8008f4e:	a35a      	add	r3, pc, #360	; (adr r3, 80090b8 <__ieee754_log+0x338>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7f7 f94e 	bl	80001f4 <__adddf3>
 8008f58:	4642      	mov	r2, r8
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	f7f7 fb00 	bl	8000560 <__aeabi_dmul>
 8008f60:	a357      	add	r3, pc, #348	; (adr r3, 80090c0 <__ieee754_log+0x340>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	4680      	mov	r8, r0
 8008f68:	4689      	mov	r9, r1
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 faf7 	bl	8000560 <__aeabi_dmul>
 8008f72:	a355      	add	r3, pc, #340	; (adr r3, 80090c8 <__ieee754_log+0x348>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 f93c 	bl	80001f4 <__adddf3>
 8008f7c:	4632      	mov	r2, r6
 8008f7e:	463b      	mov	r3, r7
 8008f80:	f7f7 faee 	bl	8000560 <__aeabi_dmul>
 8008f84:	a352      	add	r3, pc, #328	; (adr r3, 80090d0 <__ieee754_log+0x350>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f933 	bl	80001f4 <__adddf3>
 8008f8e:	4632      	mov	r2, r6
 8008f90:	463b      	mov	r3, r7
 8008f92:	f7f7 fae5 	bl	8000560 <__aeabi_dmul>
 8008f96:	460b      	mov	r3, r1
 8008f98:	4602      	mov	r2, r0
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	f7f7 f929 	bl	80001f4 <__adddf3>
 8008fa2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	3551      	adds	r5, #81	; 0x51
 8008faa:	431d      	orrs	r5, r3
 8008fac:	2d00      	cmp	r5, #0
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	dd48      	ble.n	8009046 <__ieee754_log+0x2c6>
 8008fb4:	4b4e      	ldr	r3, [pc, #312]	; (80090f0 <__ieee754_log+0x370>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	4650      	mov	r0, sl
 8008fba:	4659      	mov	r1, fp
 8008fbc:	f7f7 fad0 	bl	8000560 <__aeabi_dmul>
 8008fc0:	4652      	mov	r2, sl
 8008fc2:	465b      	mov	r3, fp
 8008fc4:	f7f7 facc 	bl	8000560 <__aeabi_dmul>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4606      	mov	r6, r0
 8008fce:	460f      	mov	r7, r1
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	f7f7 f90e 	bl	80001f4 <__adddf3>
 8008fd8:	ec53 2b18 	vmov	r2, r3, d8
 8008fdc:	f7f7 fac0 	bl	8000560 <__aeabi_dmul>
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	4689      	mov	r9, r1
 8008fe4:	b964      	cbnz	r4, 8009000 <__ieee754_log+0x280>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 f8ff 	bl	80001f0 <__aeabi_dsub>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	f7f7 f8f9 	bl	80001f0 <__aeabi_dsub>
 8008ffe:	e6d6      	b.n	8008dae <__ieee754_log+0x2e>
 8009000:	a321      	add	r3, pc, #132	; (adr r3, 8009088 <__ieee754_log+0x308>)
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	ec51 0b19 	vmov	r0, r1, d9
 800900a:	f7f7 faa9 	bl	8000560 <__aeabi_dmul>
 800900e:	a320      	add	r3, pc, #128	; (adr r3, 8009090 <__ieee754_log+0x310>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	4604      	mov	r4, r0
 8009016:	460d      	mov	r5, r1
 8009018:	ec51 0b19 	vmov	r0, r1, d9
 800901c:	f7f7 faa0 	bl	8000560 <__aeabi_dmul>
 8009020:	4642      	mov	r2, r8
 8009022:	464b      	mov	r3, r9
 8009024:	f7f7 f8e6 	bl	80001f4 <__adddf3>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4630      	mov	r0, r6
 800902e:	4639      	mov	r1, r7
 8009030:	f7f7 f8de 	bl	80001f0 <__aeabi_dsub>
 8009034:	4652      	mov	r2, sl
 8009036:	465b      	mov	r3, fp
 8009038:	f7f7 f8da 	bl	80001f0 <__aeabi_dsub>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4620      	mov	r0, r4
 8009042:	4629      	mov	r1, r5
 8009044:	e7d9      	b.n	8008ffa <__ieee754_log+0x27a>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4650      	mov	r0, sl
 800904c:	4659      	mov	r1, fp
 800904e:	f7f7 f8cf 	bl	80001f0 <__aeabi_dsub>
 8009052:	ec53 2b18 	vmov	r2, r3, d8
 8009056:	f7f7 fa83 	bl	8000560 <__aeabi_dmul>
 800905a:	4606      	mov	r6, r0
 800905c:	460f      	mov	r7, r1
 800905e:	2c00      	cmp	r4, #0
 8009060:	f43f af23 	beq.w	8008eaa <__ieee754_log+0x12a>
 8009064:	a308      	add	r3, pc, #32	; (adr r3, 8009088 <__ieee754_log+0x308>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	ec51 0b19 	vmov	r0, r1, d9
 800906e:	f7f7 fa77 	bl	8000560 <__aeabi_dmul>
 8009072:	a307      	add	r3, pc, #28	; (adr r3, 8009090 <__ieee754_log+0x310>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	4604      	mov	r4, r0
 800907a:	460d      	mov	r5, r1
 800907c:	ec51 0b19 	vmov	r0, r1, d9
 8009080:	e727      	b.n	8008ed2 <__ieee754_log+0x152>
 8009082:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80090d8 <__ieee754_log+0x358>
 8009086:	e694      	b.n	8008db2 <__ieee754_log+0x32>
 8009088:	fee00000 	.word	0xfee00000
 800908c:	3fe62e42 	.word	0x3fe62e42
 8009090:	35793c76 	.word	0x35793c76
 8009094:	3dea39ef 	.word	0x3dea39ef
 8009098:	55555555 	.word	0x55555555
 800909c:	3fd55555 	.word	0x3fd55555
 80090a0:	df3e5244 	.word	0xdf3e5244
 80090a4:	3fc2f112 	.word	0x3fc2f112
 80090a8:	96cb03de 	.word	0x96cb03de
 80090ac:	3fc74664 	.word	0x3fc74664
 80090b0:	94229359 	.word	0x94229359
 80090b4:	3fd24924 	.word	0x3fd24924
 80090b8:	55555593 	.word	0x55555593
 80090bc:	3fe55555 	.word	0x3fe55555
 80090c0:	d078c69f 	.word	0xd078c69f
 80090c4:	3fc39a09 	.word	0x3fc39a09
 80090c8:	1d8e78af 	.word	0x1d8e78af
 80090cc:	3fcc71c5 	.word	0x3fcc71c5
 80090d0:	9997fa04 	.word	0x9997fa04
 80090d4:	3fd99999 	.word	0x3fd99999
	...
 80090e0:	c3500000 	.word	0xc3500000
 80090e4:	43500000 	.word	0x43500000
 80090e8:	7fefffff 	.word	0x7fefffff
 80090ec:	3ff00000 	.word	0x3ff00000
 80090f0:	3fe00000 	.word	0x3fe00000
 80090f4:	00000000 	.word	0x00000000

080090f8 <__ieee754_pow>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	ed2d 8b06 	vpush	{d8-d10}
 8009100:	b089      	sub	sp, #36	; 0x24
 8009102:	ed8d 1b00 	vstr	d1, [sp]
 8009106:	e9dd 2900 	ldrd	r2, r9, [sp]
 800910a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800910e:	ea58 0102 	orrs.w	r1, r8, r2
 8009112:	ec57 6b10 	vmov	r6, r7, d0
 8009116:	d115      	bne.n	8009144 <__ieee754_pow+0x4c>
 8009118:	19b3      	adds	r3, r6, r6
 800911a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800911e:	4152      	adcs	r2, r2
 8009120:	4299      	cmp	r1, r3
 8009122:	4b89      	ldr	r3, [pc, #548]	; (8009348 <__ieee754_pow+0x250>)
 8009124:	4193      	sbcs	r3, r2
 8009126:	f080 84d2 	bcs.w	8009ace <__ieee754_pow+0x9d6>
 800912a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800912e:	4630      	mov	r0, r6
 8009130:	4639      	mov	r1, r7
 8009132:	f7f7 f85f 	bl	80001f4 <__adddf3>
 8009136:	ec41 0b10 	vmov	d0, r0, r1
 800913a:	b009      	add	sp, #36	; 0x24
 800913c:	ecbd 8b06 	vpop	{d8-d10}
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	4b81      	ldr	r3, [pc, #516]	; (800934c <__ieee754_pow+0x254>)
 8009146:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800914a:	429c      	cmp	r4, r3
 800914c:	ee10 aa10 	vmov	sl, s0
 8009150:	463d      	mov	r5, r7
 8009152:	dc06      	bgt.n	8009162 <__ieee754_pow+0x6a>
 8009154:	d101      	bne.n	800915a <__ieee754_pow+0x62>
 8009156:	2e00      	cmp	r6, #0
 8009158:	d1e7      	bne.n	800912a <__ieee754_pow+0x32>
 800915a:	4598      	cmp	r8, r3
 800915c:	dc01      	bgt.n	8009162 <__ieee754_pow+0x6a>
 800915e:	d10f      	bne.n	8009180 <__ieee754_pow+0x88>
 8009160:	b172      	cbz	r2, 8009180 <__ieee754_pow+0x88>
 8009162:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009166:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800916a:	ea55 050a 	orrs.w	r5, r5, sl
 800916e:	d1dc      	bne.n	800912a <__ieee754_pow+0x32>
 8009170:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009174:	18db      	adds	r3, r3, r3
 8009176:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800917a:	4152      	adcs	r2, r2
 800917c:	429d      	cmp	r5, r3
 800917e:	e7d0      	b.n	8009122 <__ieee754_pow+0x2a>
 8009180:	2d00      	cmp	r5, #0
 8009182:	da3b      	bge.n	80091fc <__ieee754_pow+0x104>
 8009184:	4b72      	ldr	r3, [pc, #456]	; (8009350 <__ieee754_pow+0x258>)
 8009186:	4598      	cmp	r8, r3
 8009188:	dc51      	bgt.n	800922e <__ieee754_pow+0x136>
 800918a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800918e:	4598      	cmp	r8, r3
 8009190:	f340 84ac 	ble.w	8009aec <__ieee754_pow+0x9f4>
 8009194:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009198:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800919c:	2b14      	cmp	r3, #20
 800919e:	dd0f      	ble.n	80091c0 <__ieee754_pow+0xc8>
 80091a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80091a4:	fa22 f103 	lsr.w	r1, r2, r3
 80091a8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ac:	4293      	cmp	r3, r2
 80091ae:	f040 849d 	bne.w	8009aec <__ieee754_pow+0x9f4>
 80091b2:	f001 0101 	and.w	r1, r1, #1
 80091b6:	f1c1 0302 	rsb	r3, r1, #2
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	b182      	cbz	r2, 80091e0 <__ieee754_pow+0xe8>
 80091be:	e05f      	b.n	8009280 <__ieee754_pow+0x188>
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	d15b      	bne.n	800927c <__ieee754_pow+0x184>
 80091c4:	f1c3 0314 	rsb	r3, r3, #20
 80091c8:	fa48 f103 	asr.w	r1, r8, r3
 80091cc:	fa01 f303 	lsl.w	r3, r1, r3
 80091d0:	4543      	cmp	r3, r8
 80091d2:	f040 8488 	bne.w	8009ae6 <__ieee754_pow+0x9ee>
 80091d6:	f001 0101 	and.w	r1, r1, #1
 80091da:	f1c1 0302 	rsb	r3, r1, #2
 80091de:	9304      	str	r3, [sp, #16]
 80091e0:	4b5c      	ldr	r3, [pc, #368]	; (8009354 <__ieee754_pow+0x25c>)
 80091e2:	4598      	cmp	r8, r3
 80091e4:	d132      	bne.n	800924c <__ieee754_pow+0x154>
 80091e6:	f1b9 0f00 	cmp.w	r9, #0
 80091ea:	f280 8478 	bge.w	8009ade <__ieee754_pow+0x9e6>
 80091ee:	4959      	ldr	r1, [pc, #356]	; (8009354 <__ieee754_pow+0x25c>)
 80091f0:	4632      	mov	r2, r6
 80091f2:	463b      	mov	r3, r7
 80091f4:	2000      	movs	r0, #0
 80091f6:	f7f7 fadd 	bl	80007b4 <__aeabi_ddiv>
 80091fa:	e79c      	b.n	8009136 <__ieee754_pow+0x3e>
 80091fc:	2300      	movs	r3, #0
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	2a00      	cmp	r2, #0
 8009202:	d13d      	bne.n	8009280 <__ieee754_pow+0x188>
 8009204:	4b51      	ldr	r3, [pc, #324]	; (800934c <__ieee754_pow+0x254>)
 8009206:	4598      	cmp	r8, r3
 8009208:	d1ea      	bne.n	80091e0 <__ieee754_pow+0xe8>
 800920a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800920e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009212:	ea53 030a 	orrs.w	r3, r3, sl
 8009216:	f000 845a 	beq.w	8009ace <__ieee754_pow+0x9d6>
 800921a:	4b4f      	ldr	r3, [pc, #316]	; (8009358 <__ieee754_pow+0x260>)
 800921c:	429c      	cmp	r4, r3
 800921e:	dd08      	ble.n	8009232 <__ieee754_pow+0x13a>
 8009220:	f1b9 0f00 	cmp.w	r9, #0
 8009224:	f2c0 8457 	blt.w	8009ad6 <__ieee754_pow+0x9de>
 8009228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800922c:	e783      	b.n	8009136 <__ieee754_pow+0x3e>
 800922e:	2302      	movs	r3, #2
 8009230:	e7e5      	b.n	80091fe <__ieee754_pow+0x106>
 8009232:	f1b9 0f00 	cmp.w	r9, #0
 8009236:	f04f 0000 	mov.w	r0, #0
 800923a:	f04f 0100 	mov.w	r1, #0
 800923e:	f6bf af7a 	bge.w	8009136 <__ieee754_pow+0x3e>
 8009242:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009246:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800924a:	e774      	b.n	8009136 <__ieee754_pow+0x3e>
 800924c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009250:	d106      	bne.n	8009260 <__ieee754_pow+0x168>
 8009252:	4632      	mov	r2, r6
 8009254:	463b      	mov	r3, r7
 8009256:	4630      	mov	r0, r6
 8009258:	4639      	mov	r1, r7
 800925a:	f7f7 f981 	bl	8000560 <__aeabi_dmul>
 800925e:	e76a      	b.n	8009136 <__ieee754_pow+0x3e>
 8009260:	4b3e      	ldr	r3, [pc, #248]	; (800935c <__ieee754_pow+0x264>)
 8009262:	4599      	cmp	r9, r3
 8009264:	d10c      	bne.n	8009280 <__ieee754_pow+0x188>
 8009266:	2d00      	cmp	r5, #0
 8009268:	db0a      	blt.n	8009280 <__ieee754_pow+0x188>
 800926a:	ec47 6b10 	vmov	d0, r6, r7
 800926e:	b009      	add	sp, #36	; 0x24
 8009270:	ecbd 8b06 	vpop	{d8-d10}
 8009274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	f000 bc6c 	b.w	8009b54 <__ieee754_sqrt>
 800927c:	2300      	movs	r3, #0
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	ec47 6b10 	vmov	d0, r6, r7
 8009284:	f000 fd48 	bl	8009d18 <fabs>
 8009288:	ec51 0b10 	vmov	r0, r1, d0
 800928c:	f1ba 0f00 	cmp.w	sl, #0
 8009290:	d129      	bne.n	80092e6 <__ieee754_pow+0x1ee>
 8009292:	b124      	cbz	r4, 800929e <__ieee754_pow+0x1a6>
 8009294:	4b2f      	ldr	r3, [pc, #188]	; (8009354 <__ieee754_pow+0x25c>)
 8009296:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800929a:	429a      	cmp	r2, r3
 800929c:	d123      	bne.n	80092e6 <__ieee754_pow+0x1ee>
 800929e:	f1b9 0f00 	cmp.w	r9, #0
 80092a2:	da05      	bge.n	80092b0 <__ieee754_pow+0x1b8>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	2000      	movs	r0, #0
 80092aa:	492a      	ldr	r1, [pc, #168]	; (8009354 <__ieee754_pow+0x25c>)
 80092ac:	f7f7 fa82 	bl	80007b4 <__aeabi_ddiv>
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	f6bf af40 	bge.w	8009136 <__ieee754_pow+0x3e>
 80092b6:	9b04      	ldr	r3, [sp, #16]
 80092b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80092bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80092c0:	4323      	orrs	r3, r4
 80092c2:	d108      	bne.n	80092d6 <__ieee754_pow+0x1de>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4610      	mov	r0, r2
 80092ca:	4619      	mov	r1, r3
 80092cc:	f7f6 ff90 	bl	80001f0 <__aeabi_dsub>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	e78f      	b.n	80091f6 <__ieee754_pow+0xfe>
 80092d6:	9b04      	ldr	r3, [sp, #16]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	f47f af2c 	bne.w	8009136 <__ieee754_pow+0x3e>
 80092de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092e2:	4619      	mov	r1, r3
 80092e4:	e727      	b.n	8009136 <__ieee754_pow+0x3e>
 80092e6:	0feb      	lsrs	r3, r5, #31
 80092e8:	3b01      	subs	r3, #1
 80092ea:	9306      	str	r3, [sp, #24]
 80092ec:	9a06      	ldr	r2, [sp, #24]
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	d102      	bne.n	80092fa <__ieee754_pow+0x202>
 80092f4:	4632      	mov	r2, r6
 80092f6:	463b      	mov	r3, r7
 80092f8:	e7e6      	b.n	80092c8 <__ieee754_pow+0x1d0>
 80092fa:	4b19      	ldr	r3, [pc, #100]	; (8009360 <__ieee754_pow+0x268>)
 80092fc:	4598      	cmp	r8, r3
 80092fe:	f340 80fb 	ble.w	80094f8 <__ieee754_pow+0x400>
 8009302:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009306:	4598      	cmp	r8, r3
 8009308:	4b13      	ldr	r3, [pc, #76]	; (8009358 <__ieee754_pow+0x260>)
 800930a:	dd0c      	ble.n	8009326 <__ieee754_pow+0x22e>
 800930c:	429c      	cmp	r4, r3
 800930e:	dc0f      	bgt.n	8009330 <__ieee754_pow+0x238>
 8009310:	f1b9 0f00 	cmp.w	r9, #0
 8009314:	da0f      	bge.n	8009336 <__ieee754_pow+0x23e>
 8009316:	2000      	movs	r0, #0
 8009318:	b009      	add	sp, #36	; 0x24
 800931a:	ecbd 8b06 	vpop	{d8-d10}
 800931e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009322:	f000 bcf0 	b.w	8009d06 <__math_oflow>
 8009326:	429c      	cmp	r4, r3
 8009328:	dbf2      	blt.n	8009310 <__ieee754_pow+0x218>
 800932a:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <__ieee754_pow+0x25c>)
 800932c:	429c      	cmp	r4, r3
 800932e:	dd19      	ble.n	8009364 <__ieee754_pow+0x26c>
 8009330:	f1b9 0f00 	cmp.w	r9, #0
 8009334:	dcef      	bgt.n	8009316 <__ieee754_pow+0x21e>
 8009336:	2000      	movs	r0, #0
 8009338:	b009      	add	sp, #36	; 0x24
 800933a:	ecbd 8b06 	vpop	{d8-d10}
 800933e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009342:	f000 bcd7 	b.w	8009cf4 <__math_uflow>
 8009346:	bf00      	nop
 8009348:	fff00000 	.word	0xfff00000
 800934c:	7ff00000 	.word	0x7ff00000
 8009350:	433fffff 	.word	0x433fffff
 8009354:	3ff00000 	.word	0x3ff00000
 8009358:	3fefffff 	.word	0x3fefffff
 800935c:	3fe00000 	.word	0x3fe00000
 8009360:	41e00000 	.word	0x41e00000
 8009364:	4b60      	ldr	r3, [pc, #384]	; (80094e8 <__ieee754_pow+0x3f0>)
 8009366:	2200      	movs	r2, #0
 8009368:	f7f6 ff42 	bl	80001f0 <__aeabi_dsub>
 800936c:	a354      	add	r3, pc, #336	; (adr r3, 80094c0 <__ieee754_pow+0x3c8>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	4604      	mov	r4, r0
 8009374:	460d      	mov	r5, r1
 8009376:	f7f7 f8f3 	bl	8000560 <__aeabi_dmul>
 800937a:	a353      	add	r3, pc, #332	; (adr r3, 80094c8 <__ieee754_pow+0x3d0>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	4606      	mov	r6, r0
 8009382:	460f      	mov	r7, r1
 8009384:	4620      	mov	r0, r4
 8009386:	4629      	mov	r1, r5
 8009388:	f7f7 f8ea 	bl	8000560 <__aeabi_dmul>
 800938c:	4b57      	ldr	r3, [pc, #348]	; (80094ec <__ieee754_pow+0x3f4>)
 800938e:	4682      	mov	sl, r0
 8009390:	468b      	mov	fp, r1
 8009392:	2200      	movs	r2, #0
 8009394:	4620      	mov	r0, r4
 8009396:	4629      	mov	r1, r5
 8009398:	f7f7 f8e2 	bl	8000560 <__aeabi_dmul>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	a14b      	add	r1, pc, #300	; (adr r1, 80094d0 <__ieee754_pow+0x3d8>)
 80093a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093a6:	f7f6 ff23 	bl	80001f0 <__aeabi_dsub>
 80093aa:	4622      	mov	r2, r4
 80093ac:	462b      	mov	r3, r5
 80093ae:	f7f7 f8d7 	bl	8000560 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	2000      	movs	r0, #0
 80093b8:	494d      	ldr	r1, [pc, #308]	; (80094f0 <__ieee754_pow+0x3f8>)
 80093ba:	f7f6 ff19 	bl	80001f0 <__aeabi_dsub>
 80093be:	4622      	mov	r2, r4
 80093c0:	4680      	mov	r8, r0
 80093c2:	4689      	mov	r9, r1
 80093c4:	462b      	mov	r3, r5
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7f7 f8c9 	bl	8000560 <__aeabi_dmul>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4640      	mov	r0, r8
 80093d4:	4649      	mov	r1, r9
 80093d6:	f7f7 f8c3 	bl	8000560 <__aeabi_dmul>
 80093da:	a33f      	add	r3, pc, #252	; (adr r3, 80094d8 <__ieee754_pow+0x3e0>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f7f7 f8be 	bl	8000560 <__aeabi_dmul>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4650      	mov	r0, sl
 80093ea:	4659      	mov	r1, fp
 80093ec:	f7f6 ff00 	bl	80001f0 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4680      	mov	r8, r0
 80093f6:	4689      	mov	r9, r1
 80093f8:	4630      	mov	r0, r6
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7f6 fefa 	bl	80001f4 <__adddf3>
 8009400:	2000      	movs	r0, #0
 8009402:	4632      	mov	r2, r6
 8009404:	463b      	mov	r3, r7
 8009406:	4604      	mov	r4, r0
 8009408:	460d      	mov	r5, r1
 800940a:	f7f6 fef1 	bl	80001f0 <__aeabi_dsub>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4640      	mov	r0, r8
 8009414:	4649      	mov	r1, r9
 8009416:	f7f6 feeb 	bl	80001f0 <__aeabi_dsub>
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	9a06      	ldr	r2, [sp, #24]
 800941e:	3b01      	subs	r3, #1
 8009420:	4313      	orrs	r3, r2
 8009422:	4682      	mov	sl, r0
 8009424:	468b      	mov	fp, r1
 8009426:	f040 81e7 	bne.w	80097f8 <__ieee754_pow+0x700>
 800942a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80094e0 <__ieee754_pow+0x3e8>
 800942e:	eeb0 8a47 	vmov.f32	s16, s14
 8009432:	eef0 8a67 	vmov.f32	s17, s15
 8009436:	e9dd 6700 	ldrd	r6, r7, [sp]
 800943a:	2600      	movs	r6, #0
 800943c:	4632      	mov	r2, r6
 800943e:	463b      	mov	r3, r7
 8009440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009444:	f7f6 fed4 	bl	80001f0 <__aeabi_dsub>
 8009448:	4622      	mov	r2, r4
 800944a:	462b      	mov	r3, r5
 800944c:	f7f7 f888 	bl	8000560 <__aeabi_dmul>
 8009450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009454:	4680      	mov	r8, r0
 8009456:	4689      	mov	r9, r1
 8009458:	4650      	mov	r0, sl
 800945a:	4659      	mov	r1, fp
 800945c:	f7f7 f880 	bl	8000560 <__aeabi_dmul>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4640      	mov	r0, r8
 8009466:	4649      	mov	r1, r9
 8009468:	f7f6 fec4 	bl	80001f4 <__adddf3>
 800946c:	4632      	mov	r2, r6
 800946e:	463b      	mov	r3, r7
 8009470:	4680      	mov	r8, r0
 8009472:	4689      	mov	r9, r1
 8009474:	4620      	mov	r0, r4
 8009476:	4629      	mov	r1, r5
 8009478:	f7f7 f872 	bl	8000560 <__aeabi_dmul>
 800947c:	460b      	mov	r3, r1
 800947e:	4604      	mov	r4, r0
 8009480:	460d      	mov	r5, r1
 8009482:	4602      	mov	r2, r0
 8009484:	4649      	mov	r1, r9
 8009486:	4640      	mov	r0, r8
 8009488:	f7f6 feb4 	bl	80001f4 <__adddf3>
 800948c:	4b19      	ldr	r3, [pc, #100]	; (80094f4 <__ieee754_pow+0x3fc>)
 800948e:	4299      	cmp	r1, r3
 8009490:	ec45 4b19 	vmov	d9, r4, r5
 8009494:	4606      	mov	r6, r0
 8009496:	460f      	mov	r7, r1
 8009498:	468b      	mov	fp, r1
 800949a:	f340 82f1 	ble.w	8009a80 <__ieee754_pow+0x988>
 800949e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80094a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80094a6:	4303      	orrs	r3, r0
 80094a8:	f000 81e4 	beq.w	8009874 <__ieee754_pow+0x77c>
 80094ac:	ec51 0b18 	vmov	r0, r1, d8
 80094b0:	2200      	movs	r2, #0
 80094b2:	2300      	movs	r3, #0
 80094b4:	f7f7 fac6 	bl	8000a44 <__aeabi_dcmplt>
 80094b8:	3800      	subs	r0, #0
 80094ba:	bf18      	it	ne
 80094bc:	2001      	movne	r0, #1
 80094be:	e72b      	b.n	8009318 <__ieee754_pow+0x220>
 80094c0:	60000000 	.word	0x60000000
 80094c4:	3ff71547 	.word	0x3ff71547
 80094c8:	f85ddf44 	.word	0xf85ddf44
 80094cc:	3e54ae0b 	.word	0x3e54ae0b
 80094d0:	55555555 	.word	0x55555555
 80094d4:	3fd55555 	.word	0x3fd55555
 80094d8:	652b82fe 	.word	0x652b82fe
 80094dc:	3ff71547 	.word	0x3ff71547
 80094e0:	00000000 	.word	0x00000000
 80094e4:	bff00000 	.word	0xbff00000
 80094e8:	3ff00000 	.word	0x3ff00000
 80094ec:	3fd00000 	.word	0x3fd00000
 80094f0:	3fe00000 	.word	0x3fe00000
 80094f4:	408fffff 	.word	0x408fffff
 80094f8:	4bd5      	ldr	r3, [pc, #852]	; (8009850 <__ieee754_pow+0x758>)
 80094fa:	402b      	ands	r3, r5
 80094fc:	2200      	movs	r2, #0
 80094fe:	b92b      	cbnz	r3, 800950c <__ieee754_pow+0x414>
 8009500:	4bd4      	ldr	r3, [pc, #848]	; (8009854 <__ieee754_pow+0x75c>)
 8009502:	f7f7 f82d 	bl	8000560 <__aeabi_dmul>
 8009506:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800950a:	460c      	mov	r4, r1
 800950c:	1523      	asrs	r3, r4, #20
 800950e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009512:	4413      	add	r3, r2
 8009514:	9305      	str	r3, [sp, #20]
 8009516:	4bd0      	ldr	r3, [pc, #832]	; (8009858 <__ieee754_pow+0x760>)
 8009518:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800951c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009520:	429c      	cmp	r4, r3
 8009522:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009526:	dd08      	ble.n	800953a <__ieee754_pow+0x442>
 8009528:	4bcc      	ldr	r3, [pc, #816]	; (800985c <__ieee754_pow+0x764>)
 800952a:	429c      	cmp	r4, r3
 800952c:	f340 8162 	ble.w	80097f4 <__ieee754_pow+0x6fc>
 8009530:	9b05      	ldr	r3, [sp, #20]
 8009532:	3301      	adds	r3, #1
 8009534:	9305      	str	r3, [sp, #20]
 8009536:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800953a:	2400      	movs	r4, #0
 800953c:	00e3      	lsls	r3, r4, #3
 800953e:	9307      	str	r3, [sp, #28]
 8009540:	4bc7      	ldr	r3, [pc, #796]	; (8009860 <__ieee754_pow+0x768>)
 8009542:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009546:	ed93 7b00 	vldr	d7, [r3]
 800954a:	4629      	mov	r1, r5
 800954c:	ec53 2b17 	vmov	r2, r3, d7
 8009550:	eeb0 9a47 	vmov.f32	s18, s14
 8009554:	eef0 9a67 	vmov.f32	s19, s15
 8009558:	4682      	mov	sl, r0
 800955a:	f7f6 fe49 	bl	80001f0 <__aeabi_dsub>
 800955e:	4652      	mov	r2, sl
 8009560:	4606      	mov	r6, r0
 8009562:	460f      	mov	r7, r1
 8009564:	462b      	mov	r3, r5
 8009566:	ec51 0b19 	vmov	r0, r1, d9
 800956a:	f7f6 fe43 	bl	80001f4 <__adddf3>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	2000      	movs	r0, #0
 8009574:	49bb      	ldr	r1, [pc, #748]	; (8009864 <__ieee754_pow+0x76c>)
 8009576:	f7f7 f91d 	bl	80007b4 <__aeabi_ddiv>
 800957a:	ec41 0b1a 	vmov	d10, r0, r1
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	f7f6 ffeb 	bl	8000560 <__aeabi_dmul>
 800958a:	2300      	movs	r3, #0
 800958c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009596:	46ab      	mov	fp, r5
 8009598:	106d      	asrs	r5, r5, #1
 800959a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800959e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80095a2:	ec41 0b18 	vmov	d8, r0, r1
 80095a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80095aa:	2200      	movs	r2, #0
 80095ac:	4640      	mov	r0, r8
 80095ae:	4649      	mov	r1, r9
 80095b0:	4614      	mov	r4, r2
 80095b2:	461d      	mov	r5, r3
 80095b4:	f7f6 ffd4 	bl	8000560 <__aeabi_dmul>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4630      	mov	r0, r6
 80095be:	4639      	mov	r1, r7
 80095c0:	f7f6 fe16 	bl	80001f0 <__aeabi_dsub>
 80095c4:	ec53 2b19 	vmov	r2, r3, d9
 80095c8:	4606      	mov	r6, r0
 80095ca:	460f      	mov	r7, r1
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f7f6 fe0e 	bl	80001f0 <__aeabi_dsub>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4650      	mov	r0, sl
 80095da:	4659      	mov	r1, fp
 80095dc:	f7f6 fe08 	bl	80001f0 <__aeabi_dsub>
 80095e0:	4642      	mov	r2, r8
 80095e2:	464b      	mov	r3, r9
 80095e4:	f7f6 ffbc 	bl	8000560 <__aeabi_dmul>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4630      	mov	r0, r6
 80095ee:	4639      	mov	r1, r7
 80095f0:	f7f6 fdfe 	bl	80001f0 <__aeabi_dsub>
 80095f4:	ec53 2b1a 	vmov	r2, r3, d10
 80095f8:	f7f6 ffb2 	bl	8000560 <__aeabi_dmul>
 80095fc:	ec53 2b18 	vmov	r2, r3, d8
 8009600:	ec41 0b19 	vmov	d9, r0, r1
 8009604:	ec51 0b18 	vmov	r0, r1, d8
 8009608:	f7f6 ffaa 	bl	8000560 <__aeabi_dmul>
 800960c:	a37c      	add	r3, pc, #496	; (adr r3, 8009800 <__ieee754_pow+0x708>)
 800960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009612:	4604      	mov	r4, r0
 8009614:	460d      	mov	r5, r1
 8009616:	f7f6 ffa3 	bl	8000560 <__aeabi_dmul>
 800961a:	a37b      	add	r3, pc, #492	; (adr r3, 8009808 <__ieee754_pow+0x710>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f7f6 fde8 	bl	80001f4 <__adddf3>
 8009624:	4622      	mov	r2, r4
 8009626:	462b      	mov	r3, r5
 8009628:	f7f6 ff9a 	bl	8000560 <__aeabi_dmul>
 800962c:	a378      	add	r3, pc, #480	; (adr r3, 8009810 <__ieee754_pow+0x718>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fddf 	bl	80001f4 <__adddf3>
 8009636:	4622      	mov	r2, r4
 8009638:	462b      	mov	r3, r5
 800963a:	f7f6 ff91 	bl	8000560 <__aeabi_dmul>
 800963e:	a376      	add	r3, pc, #472	; (adr r3, 8009818 <__ieee754_pow+0x720>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f6 fdd6 	bl	80001f4 <__adddf3>
 8009648:	4622      	mov	r2, r4
 800964a:	462b      	mov	r3, r5
 800964c:	f7f6 ff88 	bl	8000560 <__aeabi_dmul>
 8009650:	a373      	add	r3, pc, #460	; (adr r3, 8009820 <__ieee754_pow+0x728>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f7f6 fdcd 	bl	80001f4 <__adddf3>
 800965a:	4622      	mov	r2, r4
 800965c:	462b      	mov	r3, r5
 800965e:	f7f6 ff7f 	bl	8000560 <__aeabi_dmul>
 8009662:	a371      	add	r3, pc, #452	; (adr r3, 8009828 <__ieee754_pow+0x730>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 fdc4 	bl	80001f4 <__adddf3>
 800966c:	4622      	mov	r2, r4
 800966e:	4606      	mov	r6, r0
 8009670:	460f      	mov	r7, r1
 8009672:	462b      	mov	r3, r5
 8009674:	4620      	mov	r0, r4
 8009676:	4629      	mov	r1, r5
 8009678:	f7f6 ff72 	bl	8000560 <__aeabi_dmul>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4630      	mov	r0, r6
 8009682:	4639      	mov	r1, r7
 8009684:	f7f6 ff6c 	bl	8000560 <__aeabi_dmul>
 8009688:	4642      	mov	r2, r8
 800968a:	4604      	mov	r4, r0
 800968c:	460d      	mov	r5, r1
 800968e:	464b      	mov	r3, r9
 8009690:	ec51 0b18 	vmov	r0, r1, d8
 8009694:	f7f6 fdae 	bl	80001f4 <__adddf3>
 8009698:	ec53 2b19 	vmov	r2, r3, d9
 800969c:	f7f6 ff60 	bl	8000560 <__aeabi_dmul>
 80096a0:	4622      	mov	r2, r4
 80096a2:	462b      	mov	r3, r5
 80096a4:	f7f6 fda6 	bl	80001f4 <__adddf3>
 80096a8:	4642      	mov	r2, r8
 80096aa:	4682      	mov	sl, r0
 80096ac:	468b      	mov	fp, r1
 80096ae:	464b      	mov	r3, r9
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7f6 ff54 	bl	8000560 <__aeabi_dmul>
 80096b8:	4b6b      	ldr	r3, [pc, #428]	; (8009868 <__ieee754_pow+0x770>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	4606      	mov	r6, r0
 80096be:	460f      	mov	r7, r1
 80096c0:	f7f6 fd98 	bl	80001f4 <__adddf3>
 80096c4:	4652      	mov	r2, sl
 80096c6:	465b      	mov	r3, fp
 80096c8:	f7f6 fd94 	bl	80001f4 <__adddf3>
 80096cc:	2000      	movs	r0, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	460d      	mov	r5, r1
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f6 ff41 	bl	8000560 <__aeabi_dmul>
 80096de:	4b62      	ldr	r3, [pc, #392]	; (8009868 <__ieee754_pow+0x770>)
 80096e0:	4680      	mov	r8, r0
 80096e2:	4689      	mov	r9, r1
 80096e4:	2200      	movs	r2, #0
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f6 fd81 	bl	80001f0 <__aeabi_dsub>
 80096ee:	4632      	mov	r2, r6
 80096f0:	463b      	mov	r3, r7
 80096f2:	f7f6 fd7d 	bl	80001f0 <__aeabi_dsub>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4650      	mov	r0, sl
 80096fc:	4659      	mov	r1, fp
 80096fe:	f7f6 fd77 	bl	80001f0 <__aeabi_dsub>
 8009702:	ec53 2b18 	vmov	r2, r3, d8
 8009706:	f7f6 ff2b 	bl	8000560 <__aeabi_dmul>
 800970a:	4622      	mov	r2, r4
 800970c:	4606      	mov	r6, r0
 800970e:	460f      	mov	r7, r1
 8009710:	462b      	mov	r3, r5
 8009712:	ec51 0b19 	vmov	r0, r1, d9
 8009716:	f7f6 ff23 	bl	8000560 <__aeabi_dmul>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4630      	mov	r0, r6
 8009720:	4639      	mov	r1, r7
 8009722:	f7f6 fd67 	bl	80001f4 <__adddf3>
 8009726:	4606      	mov	r6, r0
 8009728:	460f      	mov	r7, r1
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4640      	mov	r0, r8
 8009730:	4649      	mov	r1, r9
 8009732:	f7f6 fd5f 	bl	80001f4 <__adddf3>
 8009736:	a33e      	add	r3, pc, #248	; (adr r3, 8009830 <__ieee754_pow+0x738>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	2000      	movs	r0, #0
 800973e:	4604      	mov	r4, r0
 8009740:	460d      	mov	r5, r1
 8009742:	f7f6 ff0d 	bl	8000560 <__aeabi_dmul>
 8009746:	4642      	mov	r2, r8
 8009748:	ec41 0b18 	vmov	d8, r0, r1
 800974c:	464b      	mov	r3, r9
 800974e:	4620      	mov	r0, r4
 8009750:	4629      	mov	r1, r5
 8009752:	f7f6 fd4d 	bl	80001f0 <__aeabi_dsub>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	4630      	mov	r0, r6
 800975c:	4639      	mov	r1, r7
 800975e:	f7f6 fd47 	bl	80001f0 <__aeabi_dsub>
 8009762:	a335      	add	r3, pc, #212	; (adr r3, 8009838 <__ieee754_pow+0x740>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f7f6 fefa 	bl	8000560 <__aeabi_dmul>
 800976c:	a334      	add	r3, pc, #208	; (adr r3, 8009840 <__ieee754_pow+0x748>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	4606      	mov	r6, r0
 8009774:	460f      	mov	r7, r1
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7f6 fef1 	bl	8000560 <__aeabi_dmul>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4630      	mov	r0, r6
 8009784:	4639      	mov	r1, r7
 8009786:	f7f6 fd35 	bl	80001f4 <__adddf3>
 800978a:	9a07      	ldr	r2, [sp, #28]
 800978c:	4b37      	ldr	r3, [pc, #220]	; (800986c <__ieee754_pow+0x774>)
 800978e:	4413      	add	r3, r2
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f6 fd2e 	bl	80001f4 <__adddf3>
 8009798:	4682      	mov	sl, r0
 800979a:	9805      	ldr	r0, [sp, #20]
 800979c:	468b      	mov	fp, r1
 800979e:	f7f6 fe75 	bl	800048c <__aeabi_i2d>
 80097a2:	9a07      	ldr	r2, [sp, #28]
 80097a4:	4b32      	ldr	r3, [pc, #200]	; (8009870 <__ieee754_pow+0x778>)
 80097a6:	4413      	add	r3, r2
 80097a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097ac:	4606      	mov	r6, r0
 80097ae:	460f      	mov	r7, r1
 80097b0:	4652      	mov	r2, sl
 80097b2:	465b      	mov	r3, fp
 80097b4:	ec51 0b18 	vmov	r0, r1, d8
 80097b8:	f7f6 fd1c 	bl	80001f4 <__adddf3>
 80097bc:	4642      	mov	r2, r8
 80097be:	464b      	mov	r3, r9
 80097c0:	f7f6 fd18 	bl	80001f4 <__adddf3>
 80097c4:	4632      	mov	r2, r6
 80097c6:	463b      	mov	r3, r7
 80097c8:	f7f6 fd14 	bl	80001f4 <__adddf3>
 80097cc:	2000      	movs	r0, #0
 80097ce:	4632      	mov	r2, r6
 80097d0:	463b      	mov	r3, r7
 80097d2:	4604      	mov	r4, r0
 80097d4:	460d      	mov	r5, r1
 80097d6:	f7f6 fd0b 	bl	80001f0 <__aeabi_dsub>
 80097da:	4642      	mov	r2, r8
 80097dc:	464b      	mov	r3, r9
 80097de:	f7f6 fd07 	bl	80001f0 <__aeabi_dsub>
 80097e2:	ec53 2b18 	vmov	r2, r3, d8
 80097e6:	f7f6 fd03 	bl	80001f0 <__aeabi_dsub>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4650      	mov	r0, sl
 80097f0:	4659      	mov	r1, fp
 80097f2:	e610      	b.n	8009416 <__ieee754_pow+0x31e>
 80097f4:	2401      	movs	r4, #1
 80097f6:	e6a1      	b.n	800953c <__ieee754_pow+0x444>
 80097f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009848 <__ieee754_pow+0x750>
 80097fc:	e617      	b.n	800942e <__ieee754_pow+0x336>
 80097fe:	bf00      	nop
 8009800:	4a454eef 	.word	0x4a454eef
 8009804:	3fca7e28 	.word	0x3fca7e28
 8009808:	93c9db65 	.word	0x93c9db65
 800980c:	3fcd864a 	.word	0x3fcd864a
 8009810:	a91d4101 	.word	0xa91d4101
 8009814:	3fd17460 	.word	0x3fd17460
 8009818:	518f264d 	.word	0x518f264d
 800981c:	3fd55555 	.word	0x3fd55555
 8009820:	db6fabff 	.word	0xdb6fabff
 8009824:	3fdb6db6 	.word	0x3fdb6db6
 8009828:	33333303 	.word	0x33333303
 800982c:	3fe33333 	.word	0x3fe33333
 8009830:	e0000000 	.word	0xe0000000
 8009834:	3feec709 	.word	0x3feec709
 8009838:	dc3a03fd 	.word	0xdc3a03fd
 800983c:	3feec709 	.word	0x3feec709
 8009840:	145b01f5 	.word	0x145b01f5
 8009844:	be3e2fe0 	.word	0xbe3e2fe0
 8009848:	00000000 	.word	0x00000000
 800984c:	3ff00000 	.word	0x3ff00000
 8009850:	7ff00000 	.word	0x7ff00000
 8009854:	43400000 	.word	0x43400000
 8009858:	0003988e 	.word	0x0003988e
 800985c:	000bb679 	.word	0x000bb679
 8009860:	08009ed8 	.word	0x08009ed8
 8009864:	3ff00000 	.word	0x3ff00000
 8009868:	40080000 	.word	0x40080000
 800986c:	08009ef8 	.word	0x08009ef8
 8009870:	08009ee8 	.word	0x08009ee8
 8009874:	a3b5      	add	r3, pc, #724	; (adr r3, 8009b4c <__ieee754_pow+0xa54>)
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	4640      	mov	r0, r8
 800987c:	4649      	mov	r1, r9
 800987e:	f7f6 fcb9 	bl	80001f4 <__adddf3>
 8009882:	4622      	mov	r2, r4
 8009884:	ec41 0b1a 	vmov	d10, r0, r1
 8009888:	462b      	mov	r3, r5
 800988a:	4630      	mov	r0, r6
 800988c:	4639      	mov	r1, r7
 800988e:	f7f6 fcaf 	bl	80001f0 <__aeabi_dsub>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	ec51 0b1a 	vmov	r0, r1, d10
 800989a:	f7f7 f8f1 	bl	8000a80 <__aeabi_dcmpgt>
 800989e:	2800      	cmp	r0, #0
 80098a0:	f47f ae04 	bne.w	80094ac <__ieee754_pow+0x3b4>
 80098a4:	4aa4      	ldr	r2, [pc, #656]	; (8009b38 <__ieee754_pow+0xa40>)
 80098a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098aa:	4293      	cmp	r3, r2
 80098ac:	f340 8108 	ble.w	8009ac0 <__ieee754_pow+0x9c8>
 80098b0:	151b      	asrs	r3, r3, #20
 80098b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80098b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80098ba:	fa4a f303 	asr.w	r3, sl, r3
 80098be:	445b      	add	r3, fp
 80098c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80098c4:	4e9d      	ldr	r6, [pc, #628]	; (8009b3c <__ieee754_pow+0xa44>)
 80098c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80098ca:	4116      	asrs	r6, r2
 80098cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80098d0:	2000      	movs	r0, #0
 80098d2:	ea23 0106 	bic.w	r1, r3, r6
 80098d6:	f1c2 0214 	rsb	r2, r2, #20
 80098da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80098de:	fa4a fa02 	asr.w	sl, sl, r2
 80098e2:	f1bb 0f00 	cmp.w	fp, #0
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4620      	mov	r0, r4
 80098ec:	4629      	mov	r1, r5
 80098ee:	bfb8      	it	lt
 80098f0:	f1ca 0a00 	rsblt	sl, sl, #0
 80098f4:	f7f6 fc7c 	bl	80001f0 <__aeabi_dsub>
 80098f8:	ec41 0b19 	vmov	d9, r0, r1
 80098fc:	4642      	mov	r2, r8
 80098fe:	464b      	mov	r3, r9
 8009900:	ec51 0b19 	vmov	r0, r1, d9
 8009904:	f7f6 fc76 	bl	80001f4 <__adddf3>
 8009908:	a37b      	add	r3, pc, #492	; (adr r3, 8009af8 <__ieee754_pow+0xa00>)
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	2000      	movs	r0, #0
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
 8009914:	f7f6 fe24 	bl	8000560 <__aeabi_dmul>
 8009918:	ec53 2b19 	vmov	r2, r3, d9
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
 8009920:	4620      	mov	r0, r4
 8009922:	4629      	mov	r1, r5
 8009924:	f7f6 fc64 	bl	80001f0 <__aeabi_dsub>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4640      	mov	r0, r8
 800992e:	4649      	mov	r1, r9
 8009930:	f7f6 fc5e 	bl	80001f0 <__aeabi_dsub>
 8009934:	a372      	add	r3, pc, #456	; (adr r3, 8009b00 <__ieee754_pow+0xa08>)
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	f7f6 fe11 	bl	8000560 <__aeabi_dmul>
 800993e:	a372      	add	r3, pc, #456	; (adr r3, 8009b08 <__ieee754_pow+0xa10>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	4680      	mov	r8, r0
 8009946:	4689      	mov	r9, r1
 8009948:	4620      	mov	r0, r4
 800994a:	4629      	mov	r1, r5
 800994c:	f7f6 fe08 	bl	8000560 <__aeabi_dmul>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4640      	mov	r0, r8
 8009956:	4649      	mov	r1, r9
 8009958:	f7f6 fc4c 	bl	80001f4 <__adddf3>
 800995c:	4604      	mov	r4, r0
 800995e:	460d      	mov	r5, r1
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4630      	mov	r0, r6
 8009966:	4639      	mov	r1, r7
 8009968:	f7f6 fc44 	bl	80001f4 <__adddf3>
 800996c:	4632      	mov	r2, r6
 800996e:	463b      	mov	r3, r7
 8009970:	4680      	mov	r8, r0
 8009972:	4689      	mov	r9, r1
 8009974:	f7f6 fc3c 	bl	80001f0 <__aeabi_dsub>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	f7f6 fc36 	bl	80001f0 <__aeabi_dsub>
 8009984:	4642      	mov	r2, r8
 8009986:	4606      	mov	r6, r0
 8009988:	460f      	mov	r7, r1
 800998a:	464b      	mov	r3, r9
 800998c:	4640      	mov	r0, r8
 800998e:	4649      	mov	r1, r9
 8009990:	f7f6 fde6 	bl	8000560 <__aeabi_dmul>
 8009994:	a35e      	add	r3, pc, #376	; (adr r3, 8009b10 <__ieee754_pow+0xa18>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	4604      	mov	r4, r0
 800999c:	460d      	mov	r5, r1
 800999e:	f7f6 fddf 	bl	8000560 <__aeabi_dmul>
 80099a2:	a35d      	add	r3, pc, #372	; (adr r3, 8009b18 <__ieee754_pow+0xa20>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f7f6 fc22 	bl	80001f0 <__aeabi_dsub>
 80099ac:	4622      	mov	r2, r4
 80099ae:	462b      	mov	r3, r5
 80099b0:	f7f6 fdd6 	bl	8000560 <__aeabi_dmul>
 80099b4:	a35a      	add	r3, pc, #360	; (adr r3, 8009b20 <__ieee754_pow+0xa28>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f7f6 fc1b 	bl	80001f4 <__adddf3>
 80099be:	4622      	mov	r2, r4
 80099c0:	462b      	mov	r3, r5
 80099c2:	f7f6 fdcd 	bl	8000560 <__aeabi_dmul>
 80099c6:	a358      	add	r3, pc, #352	; (adr r3, 8009b28 <__ieee754_pow+0xa30>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f6 fc10 	bl	80001f0 <__aeabi_dsub>
 80099d0:	4622      	mov	r2, r4
 80099d2:	462b      	mov	r3, r5
 80099d4:	f7f6 fdc4 	bl	8000560 <__aeabi_dmul>
 80099d8:	a355      	add	r3, pc, #340	; (adr r3, 8009b30 <__ieee754_pow+0xa38>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f7f6 fc09 	bl	80001f4 <__adddf3>
 80099e2:	4622      	mov	r2, r4
 80099e4:	462b      	mov	r3, r5
 80099e6:	f7f6 fdbb 	bl	8000560 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4640      	mov	r0, r8
 80099f0:	4649      	mov	r1, r9
 80099f2:	f7f6 fbfd 	bl	80001f0 <__aeabi_dsub>
 80099f6:	4604      	mov	r4, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4640      	mov	r0, r8
 8009a00:	4649      	mov	r1, r9
 8009a02:	f7f6 fdad 	bl	8000560 <__aeabi_dmul>
 8009a06:	2200      	movs	r2, #0
 8009a08:	ec41 0b19 	vmov	d9, r0, r1
 8009a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a10:	4620      	mov	r0, r4
 8009a12:	4629      	mov	r1, r5
 8009a14:	f7f6 fbec 	bl	80001f0 <__aeabi_dsub>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	ec51 0b19 	vmov	r0, r1, d9
 8009a20:	f7f6 fec8 	bl	80007b4 <__aeabi_ddiv>
 8009a24:	4632      	mov	r2, r6
 8009a26:	4604      	mov	r4, r0
 8009a28:	460d      	mov	r5, r1
 8009a2a:	463b      	mov	r3, r7
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	4649      	mov	r1, r9
 8009a30:	f7f6 fd96 	bl	8000560 <__aeabi_dmul>
 8009a34:	4632      	mov	r2, r6
 8009a36:	463b      	mov	r3, r7
 8009a38:	f7f6 fbdc 	bl	80001f4 <__adddf3>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4620      	mov	r0, r4
 8009a42:	4629      	mov	r1, r5
 8009a44:	f7f6 fbd4 	bl	80001f0 <__aeabi_dsub>
 8009a48:	4642      	mov	r2, r8
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	f7f6 fbd0 	bl	80001f0 <__aeabi_dsub>
 8009a50:	460b      	mov	r3, r1
 8009a52:	4602      	mov	r2, r0
 8009a54:	493a      	ldr	r1, [pc, #232]	; (8009b40 <__ieee754_pow+0xa48>)
 8009a56:	2000      	movs	r0, #0
 8009a58:	f7f6 fbca 	bl	80001f0 <__aeabi_dsub>
 8009a5c:	ec41 0b10 	vmov	d0, r0, r1
 8009a60:	ee10 3a90 	vmov	r3, s1
 8009a64:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a6c:	da2b      	bge.n	8009ac6 <__ieee754_pow+0x9ce>
 8009a6e:	4650      	mov	r0, sl
 8009a70:	f000 f96e 	bl	8009d50 <scalbn>
 8009a74:	ec51 0b10 	vmov	r0, r1, d0
 8009a78:	ec53 2b18 	vmov	r2, r3, d8
 8009a7c:	f7ff bbed 	b.w	800925a <__ieee754_pow+0x162>
 8009a80:	4b30      	ldr	r3, [pc, #192]	; (8009b44 <__ieee754_pow+0xa4c>)
 8009a82:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009a86:	429e      	cmp	r6, r3
 8009a88:	f77f af0c 	ble.w	80098a4 <__ieee754_pow+0x7ac>
 8009a8c:	4b2e      	ldr	r3, [pc, #184]	; (8009b48 <__ieee754_pow+0xa50>)
 8009a8e:	440b      	add	r3, r1
 8009a90:	4303      	orrs	r3, r0
 8009a92:	d009      	beq.n	8009aa8 <__ieee754_pow+0x9b0>
 8009a94:	ec51 0b18 	vmov	r0, r1, d8
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f7f6 ffd2 	bl	8000a44 <__aeabi_dcmplt>
 8009aa0:	3800      	subs	r0, #0
 8009aa2:	bf18      	it	ne
 8009aa4:	2001      	movne	r0, #1
 8009aa6:	e447      	b.n	8009338 <__ieee754_pow+0x240>
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	462b      	mov	r3, r5
 8009aac:	f7f6 fba0 	bl	80001f0 <__aeabi_dsub>
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	f7f6 ffda 	bl	8000a6c <__aeabi_dcmpge>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f43f aef3 	beq.w	80098a4 <__ieee754_pow+0x7ac>
 8009abe:	e7e9      	b.n	8009a94 <__ieee754_pow+0x99c>
 8009ac0:	f04f 0a00 	mov.w	sl, #0
 8009ac4:	e71a      	b.n	80098fc <__ieee754_pow+0x804>
 8009ac6:	ec51 0b10 	vmov	r0, r1, d0
 8009aca:	4619      	mov	r1, r3
 8009acc:	e7d4      	b.n	8009a78 <__ieee754_pow+0x980>
 8009ace:	491c      	ldr	r1, [pc, #112]	; (8009b40 <__ieee754_pow+0xa48>)
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f7ff bb30 	b.w	8009136 <__ieee754_pow+0x3e>
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	2100      	movs	r1, #0
 8009ada:	f7ff bb2c 	b.w	8009136 <__ieee754_pow+0x3e>
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	f7ff bb28 	b.w	8009136 <__ieee754_pow+0x3e>
 8009ae6:	9204      	str	r2, [sp, #16]
 8009ae8:	f7ff bb7a 	b.w	80091e0 <__ieee754_pow+0xe8>
 8009aec:	2300      	movs	r3, #0
 8009aee:	f7ff bb64 	b.w	80091ba <__ieee754_pow+0xc2>
 8009af2:	bf00      	nop
 8009af4:	f3af 8000 	nop.w
 8009af8:	00000000 	.word	0x00000000
 8009afc:	3fe62e43 	.word	0x3fe62e43
 8009b00:	fefa39ef 	.word	0xfefa39ef
 8009b04:	3fe62e42 	.word	0x3fe62e42
 8009b08:	0ca86c39 	.word	0x0ca86c39
 8009b0c:	be205c61 	.word	0xbe205c61
 8009b10:	72bea4d0 	.word	0x72bea4d0
 8009b14:	3e663769 	.word	0x3e663769
 8009b18:	c5d26bf1 	.word	0xc5d26bf1
 8009b1c:	3ebbbd41 	.word	0x3ebbbd41
 8009b20:	af25de2c 	.word	0xaf25de2c
 8009b24:	3f11566a 	.word	0x3f11566a
 8009b28:	16bebd93 	.word	0x16bebd93
 8009b2c:	3f66c16c 	.word	0x3f66c16c
 8009b30:	5555553e 	.word	0x5555553e
 8009b34:	3fc55555 	.word	0x3fc55555
 8009b38:	3fe00000 	.word	0x3fe00000
 8009b3c:	000fffff 	.word	0x000fffff
 8009b40:	3ff00000 	.word	0x3ff00000
 8009b44:	4090cbff 	.word	0x4090cbff
 8009b48:	3f6f3400 	.word	0x3f6f3400
 8009b4c:	652b82fe 	.word	0x652b82fe
 8009b50:	3c971547 	.word	0x3c971547

08009b54 <__ieee754_sqrt>:
 8009b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b58:	ec55 4b10 	vmov	r4, r5, d0
 8009b5c:	4e55      	ldr	r6, [pc, #340]	; (8009cb4 <__ieee754_sqrt+0x160>)
 8009b5e:	43ae      	bics	r6, r5
 8009b60:	ee10 0a10 	vmov	r0, s0
 8009b64:	ee10 3a10 	vmov	r3, s0
 8009b68:	462a      	mov	r2, r5
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	d110      	bne.n	8009b90 <__ieee754_sqrt+0x3c>
 8009b6e:	ee10 2a10 	vmov	r2, s0
 8009b72:	462b      	mov	r3, r5
 8009b74:	f7f6 fcf4 	bl	8000560 <__aeabi_dmul>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f7f6 fb38 	bl	80001f4 <__adddf3>
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	ec45 4b10 	vmov	d0, r4, r5
 8009b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	dc10      	bgt.n	8009bb6 <__ieee754_sqrt+0x62>
 8009b94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b98:	4330      	orrs	r0, r6
 8009b9a:	d0f5      	beq.n	8009b88 <__ieee754_sqrt+0x34>
 8009b9c:	b15d      	cbz	r5, 8009bb6 <__ieee754_sqrt+0x62>
 8009b9e:	ee10 2a10 	vmov	r2, s0
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	ee10 0a10 	vmov	r0, s0
 8009ba8:	f7f6 fb22 	bl	80001f0 <__aeabi_dsub>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	f7f6 fe00 	bl	80007b4 <__aeabi_ddiv>
 8009bb4:	e7e6      	b.n	8009b84 <__ieee754_sqrt+0x30>
 8009bb6:	1512      	asrs	r2, r2, #20
 8009bb8:	d074      	beq.n	8009ca4 <__ieee754_sqrt+0x150>
 8009bba:	07d4      	lsls	r4, r2, #31
 8009bbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009bc0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009bc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009bc8:	bf5e      	ittt	pl
 8009bca:	0fda      	lsrpl	r2, r3, #31
 8009bcc:	005b      	lslpl	r3, r3, #1
 8009bce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009bd2:	2400      	movs	r4, #0
 8009bd4:	0fda      	lsrs	r2, r3, #31
 8009bd6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009bda:	107f      	asrs	r7, r7, #1
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	2516      	movs	r5, #22
 8009be0:	4620      	mov	r0, r4
 8009be2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009be6:	1886      	adds	r6, r0, r2
 8009be8:	428e      	cmp	r6, r1
 8009bea:	bfde      	ittt	le
 8009bec:	1b89      	suble	r1, r1, r6
 8009bee:	18b0      	addle	r0, r6, r2
 8009bf0:	18a4      	addle	r4, r4, r2
 8009bf2:	0049      	lsls	r1, r1, #1
 8009bf4:	3d01      	subs	r5, #1
 8009bf6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009bfa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009bfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c02:	d1f0      	bne.n	8009be6 <__ieee754_sqrt+0x92>
 8009c04:	462a      	mov	r2, r5
 8009c06:	f04f 0e20 	mov.w	lr, #32
 8009c0a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009c0e:	4281      	cmp	r1, r0
 8009c10:	eb06 0c05 	add.w	ip, r6, r5
 8009c14:	dc02      	bgt.n	8009c1c <__ieee754_sqrt+0xc8>
 8009c16:	d113      	bne.n	8009c40 <__ieee754_sqrt+0xec>
 8009c18:	459c      	cmp	ip, r3
 8009c1a:	d811      	bhi.n	8009c40 <__ieee754_sqrt+0xec>
 8009c1c:	f1bc 0f00 	cmp.w	ip, #0
 8009c20:	eb0c 0506 	add.w	r5, ip, r6
 8009c24:	da43      	bge.n	8009cae <__ieee754_sqrt+0x15a>
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	db41      	blt.n	8009cae <__ieee754_sqrt+0x15a>
 8009c2a:	f100 0801 	add.w	r8, r0, #1
 8009c2e:	1a09      	subs	r1, r1, r0
 8009c30:	459c      	cmp	ip, r3
 8009c32:	bf88      	it	hi
 8009c34:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009c38:	eba3 030c 	sub.w	r3, r3, ip
 8009c3c:	4432      	add	r2, r6
 8009c3e:	4640      	mov	r0, r8
 8009c40:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009c44:	f1be 0e01 	subs.w	lr, lr, #1
 8009c48:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c54:	d1db      	bne.n	8009c0e <__ieee754_sqrt+0xba>
 8009c56:	430b      	orrs	r3, r1
 8009c58:	d006      	beq.n	8009c68 <__ieee754_sqrt+0x114>
 8009c5a:	1c50      	adds	r0, r2, #1
 8009c5c:	bf13      	iteet	ne
 8009c5e:	3201      	addne	r2, #1
 8009c60:	3401      	addeq	r4, #1
 8009c62:	4672      	moveq	r2, lr
 8009c64:	f022 0201 	bicne.w	r2, r2, #1
 8009c68:	1063      	asrs	r3, r4, #1
 8009c6a:	0852      	lsrs	r2, r2, #1
 8009c6c:	07e1      	lsls	r1, r4, #31
 8009c6e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009c72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009c76:	bf48      	it	mi
 8009c78:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009c7c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009c80:	4614      	mov	r4, r2
 8009c82:	e781      	b.n	8009b88 <__ieee754_sqrt+0x34>
 8009c84:	0ad9      	lsrs	r1, r3, #11
 8009c86:	3815      	subs	r0, #21
 8009c88:	055b      	lsls	r3, r3, #21
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d0fa      	beq.n	8009c84 <__ieee754_sqrt+0x130>
 8009c8e:	02cd      	lsls	r5, r1, #11
 8009c90:	d50a      	bpl.n	8009ca8 <__ieee754_sqrt+0x154>
 8009c92:	f1c2 0420 	rsb	r4, r2, #32
 8009c96:	fa23 f404 	lsr.w	r4, r3, r4
 8009c9a:	1e55      	subs	r5, r2, #1
 8009c9c:	4093      	lsls	r3, r2
 8009c9e:	4321      	orrs	r1, r4
 8009ca0:	1b42      	subs	r2, r0, r5
 8009ca2:	e78a      	b.n	8009bba <__ieee754_sqrt+0x66>
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	e7f0      	b.n	8009c8a <__ieee754_sqrt+0x136>
 8009ca8:	0049      	lsls	r1, r1, #1
 8009caa:	3201      	adds	r2, #1
 8009cac:	e7ef      	b.n	8009c8e <__ieee754_sqrt+0x13a>
 8009cae:	4680      	mov	r8, r0
 8009cb0:	e7bd      	b.n	8009c2e <__ieee754_sqrt+0xda>
 8009cb2:	bf00      	nop
 8009cb4:	7ff00000 	.word	0x7ff00000

08009cb8 <with_errno>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	4604      	mov	r4, r0
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	4616      	mov	r6, r2
 8009cc0:	f7fe ff6e 	bl	8008ba0 <__errno>
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	6006      	str	r6, [r0, #0]
 8009cc8:	4620      	mov	r0, r4
 8009cca:	bd70      	pop	{r4, r5, r6, pc}

08009ccc <xflow>:
 8009ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cce:	4614      	mov	r4, r2
 8009cd0:	461d      	mov	r5, r3
 8009cd2:	b108      	cbz	r0, 8009cd8 <xflow+0xc>
 8009cd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cd8:	e9cd 2300 	strd	r2, r3, [sp]
 8009cdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fc3c 	bl	8000560 <__aeabi_dmul>
 8009ce8:	2222      	movs	r2, #34	; 0x22
 8009cea:	b003      	add	sp, #12
 8009cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cf0:	f7ff bfe2 	b.w	8009cb8 <with_errno>

08009cf4 <__math_uflow>:
 8009cf4:	b508      	push	{r3, lr}
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cfc:	f7ff ffe6 	bl	8009ccc <xflow>
 8009d00:	ec41 0b10 	vmov	d0, r0, r1
 8009d04:	bd08      	pop	{r3, pc}

08009d06 <__math_oflow>:
 8009d06:	b508      	push	{r3, lr}
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009d0e:	f7ff ffdd 	bl	8009ccc <xflow>
 8009d12:	ec41 0b10 	vmov	d0, r0, r1
 8009d16:	bd08      	pop	{r3, pc}

08009d18 <fabs>:
 8009d18:	ec51 0b10 	vmov	r0, r1, d0
 8009d1c:	ee10 2a10 	vmov	r2, s0
 8009d20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d24:	ec43 2b10 	vmov	d0, r2, r3
 8009d28:	4770      	bx	lr

08009d2a <finite>:
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	ed8d 0b00 	vstr	d0, [sp]
 8009d30:	9801      	ldr	r0, [sp, #4]
 8009d32:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009d36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009d3a:	0fc0      	lsrs	r0, r0, #31
 8009d3c:	b002      	add	sp, #8
 8009d3e:	4770      	bx	lr

08009d40 <nan>:
 8009d40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d48 <nan+0x8>
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	00000000 	.word	0x00000000
 8009d4c:	7ff80000 	.word	0x7ff80000

08009d50 <scalbn>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	ec55 4b10 	vmov	r4, r5, d0
 8009d56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	462b      	mov	r3, r5
 8009d5e:	b99a      	cbnz	r2, 8009d88 <scalbn+0x38>
 8009d60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d64:	4323      	orrs	r3, r4
 8009d66:	d036      	beq.n	8009dd6 <scalbn+0x86>
 8009d68:	4b39      	ldr	r3, [pc, #228]	; (8009e50 <scalbn+0x100>)
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	ee10 0a10 	vmov	r0, s0
 8009d70:	2200      	movs	r2, #0
 8009d72:	f7f6 fbf5 	bl	8000560 <__aeabi_dmul>
 8009d76:	4b37      	ldr	r3, [pc, #220]	; (8009e54 <scalbn+0x104>)
 8009d78:	429e      	cmp	r6, r3
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	da10      	bge.n	8009da2 <scalbn+0x52>
 8009d80:	a32b      	add	r3, pc, #172	; (adr r3, 8009e30 <scalbn+0xe0>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	e03a      	b.n	8009dfe <scalbn+0xae>
 8009d88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009d8c:	428a      	cmp	r2, r1
 8009d8e:	d10c      	bne.n	8009daa <scalbn+0x5a>
 8009d90:	ee10 2a10 	vmov	r2, s0
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 fa2c 	bl	80001f4 <__adddf3>
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	460d      	mov	r5, r1
 8009da0:	e019      	b.n	8009dd6 <scalbn+0x86>
 8009da2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009da6:	460b      	mov	r3, r1
 8009da8:	3a36      	subs	r2, #54	; 0x36
 8009daa:	4432      	add	r2, r6
 8009dac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009db0:	428a      	cmp	r2, r1
 8009db2:	dd08      	ble.n	8009dc6 <scalbn+0x76>
 8009db4:	2d00      	cmp	r5, #0
 8009db6:	a120      	add	r1, pc, #128	; (adr r1, 8009e38 <scalbn+0xe8>)
 8009db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dbc:	da1c      	bge.n	8009df8 <scalbn+0xa8>
 8009dbe:	a120      	add	r1, pc, #128	; (adr r1, 8009e40 <scalbn+0xf0>)
 8009dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc4:	e018      	b.n	8009df8 <scalbn+0xa8>
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	dd08      	ble.n	8009ddc <scalbn+0x8c>
 8009dca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009dd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009dd6:	ec45 4b10 	vmov	d0, r4, r5
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009de0:	da19      	bge.n	8009e16 <scalbn+0xc6>
 8009de2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009de6:	429e      	cmp	r6, r3
 8009de8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009dec:	dd0a      	ble.n	8009e04 <scalbn+0xb4>
 8009dee:	a112      	add	r1, pc, #72	; (adr r1, 8009e38 <scalbn+0xe8>)
 8009df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e2      	bne.n	8009dbe <scalbn+0x6e>
 8009df8:	a30f      	add	r3, pc, #60	; (adr r3, 8009e38 <scalbn+0xe8>)
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	f7f6 fbaf 	bl	8000560 <__aeabi_dmul>
 8009e02:	e7cb      	b.n	8009d9c <scalbn+0x4c>
 8009e04:	a10a      	add	r1, pc, #40	; (adr r1, 8009e30 <scalbn+0xe0>)
 8009e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d0b8      	beq.n	8009d80 <scalbn+0x30>
 8009e0e:	a10e      	add	r1, pc, #56	; (adr r1, 8009e48 <scalbn+0xf8>)
 8009e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e14:	e7b4      	b.n	8009d80 <scalbn+0x30>
 8009e16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e1a:	3236      	adds	r2, #54	; 0x36
 8009e1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009e24:	4620      	mov	r0, r4
 8009e26:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <scalbn+0x108>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	e7e8      	b.n	8009dfe <scalbn+0xae>
 8009e2c:	f3af 8000 	nop.w
 8009e30:	c2f8f359 	.word	0xc2f8f359
 8009e34:	01a56e1f 	.word	0x01a56e1f
 8009e38:	8800759c 	.word	0x8800759c
 8009e3c:	7e37e43c 	.word	0x7e37e43c
 8009e40:	8800759c 	.word	0x8800759c
 8009e44:	fe37e43c 	.word	0xfe37e43c
 8009e48:	c2f8f359 	.word	0xc2f8f359
 8009e4c:	81a56e1f 	.word	0x81a56e1f
 8009e50:	43500000 	.word	0x43500000
 8009e54:	ffff3cb0 	.word	0xffff3cb0
 8009e58:	3c900000 	.word	0x3c900000

08009e5c <_init>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	bf00      	nop
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr

08009e68 <_fini>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	bf00      	nop
 8009e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6e:	bc08      	pop	{r3}
 8009e70:	469e      	mov	lr, r3
 8009e72:	4770      	bx	lr
